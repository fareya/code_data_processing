{"callee_method_names":["String.equals","Logger.info","ChemComp.getName","ChemComp.getAtoms","Logger.info","HashSet.add"],"method_name":"ZipChemCompProvider.getChemComp","method_implementation":"{\n    if (null == recordName)\n        return null;\n    // handle non-existent ChemComp codes and do not repeatedly attempt to add these.\n    for (String str : unavailable) {\n        if (recordName.equals(str))\n            return getEmptyChemComp(recordName);\n    }\n    // Try to pull from zip, if fail then download.\n    ChemComp cc = getFromZip(recordName);\n    if (cc == null) {\n        s_logger.info(\"File {} not found in archive. Attempting download from PDB.\", recordName);\n        cc = downloadAndAdd(recordName);\n    }\n    // If a null record or an empty chemcomp, return a default ChemComp and blacklist.\n    if (cc == null || (null == cc.getName() && cc.getAtoms().size() == 0)) {\n        s_logger.info(\"Unable to find or download {} - excluding from future searches.\", recordName);\n        unavailable.add(recordName);\n        return getEmptyChemComp(recordName);\n    }\n    return cc;\n}","repo_id":"9","comment":"/**\n * (non-Javadoc)\n * @see ChemCompProvider#getChemComp(java.lang.String)\n *\n * @param recordName : three letter PDB name for a residue\n * @return ChemComp from .zip or ChemComp from repository.  Will return empty ChemComp when unable to find a residue and will return null if not provided a valid recordName.\n */\n","repo_name":"biojava-master/","id":1075,"method_signature":"ChemComp getChemComp(String)"}