{"callee_method_ids":[2107,2108],"callee_method_names":["List<Axis>.get","Axis.getOrder","Axis.getSymmType","List<Integer>.add","List<List<Integer>>.add"],"method_name":"SymmetryAxes.getRepeatsCyclicForm","method_implementation":"{\n    Axis axis = axes.get(level);\n    //size of the children\n    int m = getNumRepeats(level + 1);\n    // degree of this node\n    int d = axis.getOrder();\n    // number of repeats included\n    int n = m * d;\n    if (firstRepeat % n != 0) {\n        throw new IllegalArgumentException(String.format(\"Repeat %d cannot start a block at level %s of this tree\", firstRepeat, level));\n    }\n    if (axis.getSymmType() == SymmetryType.OPEN) {\n        // leave off last child for open symm\n        n -= m;\n    }\n    List<List<Integer>> repeats = new ArrayList<>(m);\n    for (int i = 0; i < m; i++) {\n        List<Integer> cycle = new ArrayList<>(d);\n        for (int j = 0; j < d; j++) {\n            cycle.add(firstRepeat + i + j * m);\n        }\n        repeats.add(cycle);\n    }\n    return repeats;\n}","repo_id":"9","comment":"/**\n * Get the indices of participating repeats in cyclic form.\n * <p>\n * Each inner list gives a set of equivalent repeats and should have length\n * equal to the order of the axis' operator.\n * @param level\n * @param firstRepeat\n * @return\n */\n","repo_name":"biojava-master/","id":2098,"method_signature":"List<List<Integer>> getRepeatsCyclicForm(int, int)"}