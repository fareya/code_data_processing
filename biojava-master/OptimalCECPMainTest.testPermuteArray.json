{"callee_method_names":["Method.setAccessible","Method.invoke","Method.invoke","Method.invoke","Method.invoke","Method.invoke"],"method_name":"OptimalCECPMainTest.testPermuteArray","method_implementation":"{\n    //test private member using reflection\n    Method permuteArray = OptimalCECPMain.class.getDeclaredMethod(\"permuteArray\", Object[].class, int.class);\n    permuteArray.setAccessible(true);\n    String[] arr0 = new String[] { \"A\", \"B\", \"C\", \"D\", \"E\", \"F\" };\n    String[] arr1 = new String[] { \"B\", \"C\", \"D\", \"E\", \"F\", \"A\" };\n    String[] arr5 = new String[] { \"F\", \"A\", \"B\", \"C\", \"D\", \"E\" };\n    String[] arrP;\n    arrP = Arrays.copyOf(arr0, arr0.length);\n    Assert.assertTrue(\"Shallow equals!\", Arrays.deepEquals(arr0, arrP));\n    permuteArray.invoke(null, arrP, 0);\n    Assert.assertTrue(String.format(\"Permuting by 0 gave %s%s%s%s%s%s\", (Object[]) arrP), Arrays.deepEquals(arr0, arrP));\n    arrP = Arrays.copyOf(arr0, arr0.length);\n    permuteArray.invoke(null, arrP, 1);\n    Assert.assertTrue(String.format(\"Permuting by 1 gave %s%s%s%s%s%s\", (Object[]) arrP), Arrays.deepEquals(arr1, arrP));\n    arrP = Arrays.copyOf(arr0, arr0.length);\n    permuteArray.invoke(null, arrP, 5);\n    Assert.assertTrue(String.format(\"Permuting by 7 gave %s%s%s%s%s%s\", (Object[]) arrP), Arrays.deepEquals(arr5, arrP));\n    arrP = Arrays.copyOf(arr0, arr0.length);\n    permuteArray.invoke(null, arrP, -1);\n    Assert.assertTrue(String.format(\"Permuting by -1 gave %s%s%s%s%s%s\", (Object[]) arrP), Arrays.deepEquals(arr5, arrP));\n    try {\n        arrP = Arrays.copyOf(arr0, arr0.length);\n        permuteArray.invoke(null, arrP, 6);\n        Assert.fail(\"Illegal index. Should throw exception.\");\n    } catch (InvocationTargetException e) {\n        if (!(e.getCause() instanceof ArrayIndexOutOfBoundsException)) {\n            throw e;\n        }\n    }\n}","repo_id":"9","comment":"/**\n * Tests private {@link OptimalCECPMain#permuteArray(Object[], int)}\n * @throws Exception\n */\n","repo_name":"biojava-master/","id":151,"method_signature":"void testPermuteArray()"}