{"callee_method_names":["Matrix4d.rotX","Matrix4d.rotY","Matrix4d.rotZ"],"method_name":"TestUnitQuaternions.testOrientationMetricIncrement","method_implementation":"{\n    // The rotation increment will be Pi/10, Pi/15 and Pi/12 degrees in X,Y\n    // and Z\n    Matrix4d transform = new Matrix4d();\n    transform.rotX(Math.PI / 10);\n    transform.rotY(Math.PI / 12);\n    transform.rotZ(Math.PI / 15);\n    // Get points from a structure.\n    Structure pdb = StructureIO.getStructure(\"4hhb.A\");\n    Point3d[] cloud = Calc.atomsToPoints(StructureTools.getRepresentativeAtomArray(pdb));\n    Point3d[] cloud2 = CalcPoint.clonePoint3dArray(cloud);\n    // Center the clouds at the origin\n    CalcPoint.center(cloud);\n    CalcPoint.center(cloud2);\n    // Their orientation is equal at this stage\n    double m0 = UnitQuaternions.orientationMetric(cloud, cloud2);\n    assertEquals(m0, 0.0, 0.001);\n    // Assert it keeps incrementing every time transform is applied\n    CalcPoint.transform(transform, cloud2);\n    double m1 = UnitQuaternions.orientationMetric(cloud, cloud2);\n    assertTrue(m1 > m0);\n    CalcPoint.transform(transform, cloud2);\n    double m2 = UnitQuaternions.orientationMetric(cloud, cloud2);\n    assertTrue(m2 > m1);\n    CalcPoint.transform(transform, cloud2);\n    double m3 = UnitQuaternions.orientationMetric(cloud, cloud2);\n    assertTrue(m3 > m2);\n    CalcPoint.transform(transform, cloud2);\n    double m4 = UnitQuaternions.orientationMetric(cloud, cloud2);\n    assertTrue(m4 > m3);\n    CalcPoint.transform(transform, cloud2);\n    double m5 = UnitQuaternions.orientationMetric(cloud, cloud2);\n    assertTrue(m5 > m4);\n    CalcPoint.transform(transform, cloud2);\n    double m6 = UnitQuaternions.orientationMetric(cloud, cloud2);\n    assertTrue(m6 > m5);\n    CalcPoint.transform(transform, cloud2);\n    double m7 = UnitQuaternions.orientationMetric(cloud, cloud2);\n    assertTrue(m7 > m6);\n    CalcPoint.transform(transform, cloud2);\n    double m8 = UnitQuaternions.orientationMetric(cloud, cloud2);\n    assertTrue(m8 > m7);\n    CalcPoint.transform(transform, cloud2);\n    double m9 = UnitQuaternions.orientationMetric(cloud, cloud2);\n    assertTrue(m9 > m8);\n}","repo_id":"9","comment":"/**\n * Test {@link UnitQuaternions#orientationMetric(Point3d[], Point3d[])} on a\n * real structure, which will be deviating a little bit every time.\n *\n * @throws StructureException\n * @throws IOException\n */\n","repo_name":"biojava-master/","id":2312,"method_signature":"void testOrientationMetricIncrement()"}