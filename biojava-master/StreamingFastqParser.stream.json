{"callee_method_ids":[2342,2343,2344,2341,2345,2346,2349],"callee_method_names":["FastqBuilder.withDescription","FastqBuilder.withSequence","FastqBuilder.appendSequence","FastqBuilder.getDescription","String.length","String.equals","String.length","String.charAt","FastqVariant.qualityScore","FastqVariant.minimumQualityScore","FastqVariant.maximumQualityScore","FastqVariant.minimumQualityScore","FastqVariant.maximumQualityScore","FastqBuilder.withQuality","FastqBuilder.appendQuality","StreamListener.fastq","FastqBuilder.build"],"method_name":"StreamingFastqParser.stream","method_implementation":"{\n    if (readable == null) {\n        throw new IllegalArgumentException(\"readable must not be null\");\n    }\n    if (variant == null) {\n        throw new IllegalArgumentException(\"variant must not be null\");\n    }\n    if (listener == null) {\n        throw new IllegalArgumentException(\"listener must not be null\");\n    }\n    final FastqBuilder builder = new FastqBuilder().withVariant(variant);\n    FastqParser.parse(readable, new ParseListener() {\n\n        @Override\n        public void description(final String description) throws IOException {\n            builder.withDescription(description);\n        }\n\n        @Override\n        public void sequence(final String sequence) throws IOException {\n            builder.withSequence(sequence);\n        }\n\n        @Override\n        public void appendSequence(final String sequence) throws IOException {\n            builder.appendSequence(sequence);\n        }\n\n        @Override\n        public void repeatDescription(final String repeatDescription) throws IOException {\n            String description = builder.getDescription();\n            if ((description != null) && (description.length() > 0) && (repeatDescription.length() > 0)) {\n                if (!description.equals(repeatDescription)) {\n                    throw new IOException(\"repeat description must match description\");\n                }\n            }\n        }\n\n        /**\n         * Validate the specified quality line.\n         *\n         * @param quality quality line to validate\n         * @throws IOException if an I/O error occurs\n         */\n        private void validateQuality(final String quality) throws IOException {\n            for (int i = 0, size = quality.length(); i < size; i++) {\n                char c = quality.charAt(i);\n                int qualityScore = variant.qualityScore(c);\n                if (qualityScore < variant.minimumQualityScore() || qualityScore > variant.maximumQualityScore()) {\n                    throw new IOException(\"quality score must be between \" + variant.minimumQualityScore() + \" and \" + variant.maximumQualityScore() + \", was \" + qualityScore + \" for ASCII char '\" + c + \"'\");\n                }\n            }\n        }\n\n        @Override\n        public void quality(final String quality) throws IOException {\n            validateQuality(quality);\n            builder.withQuality(quality);\n        }\n\n        @Override\n        public void appendQuality(final String quality) throws IOException {\n            validateQuality(quality);\n            builder.appendQuality(quality);\n        }\n\n        @Override\n        public void complete() throws IOException {\n            try {\n                listener.fastq(builder.build());\n            } catch (IllegalStateException e) {\n                throw new IOException(\"caught an IllegalStateException\", e);\n            }\n        }\n    });\n}","repo_id":"9","comment":"/**\n * Stream the specified readable.\n *\n * @param readable readable, must not be null\n * @param variant FASTQ variant, must not be null\n * @param listener event based reader callback, must not be null\n * @throws IOException if an I/O error occurs\n */\n","repo_name":"biojava-master/","id":2355,"method_signature":"void stream(Readable, FastqVariant, StreamListener)"}