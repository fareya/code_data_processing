{"callee_method_ids":[492,489,490,487],"callee_method_names":["AFPChain.getAlnLength","AFPChain.getOptAln","AFPChain.getOptLen","AFPChain.getBlockNum","Map<Integer, Integer>.containsKey","Map<Integer, Integer>.get","Map<Integer, Integer>.put"],"method_name":"AlignmentTools.alignmentAsMap","method_implementation":"{\n    Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n    if (afpChain.getAlnLength() < 1) {\n        return map;\n    }\n    int[][][] optAln = afpChain.getOptAln();\n    int[] optLen = afpChain.getOptLen();\n    for (int block = 0; block < afpChain.getBlockNum(); block++) {\n        for (int pos = 0; pos < optLen[block]; pos++) {\n            int res1 = optAln[block][0][pos];\n            int res2 = optAln[block][1][pos];\n            if (map.containsKey(res1)) {\n                throw new StructureException(String.format(\"Residue %d aligned to both %d and %d.\", res1, map.get(res1), res2));\n            }\n            map.put(res1, res2);\n        }\n    }\n    return map;\n}","repo_id":"9","comment":"/**\n * Creates a Map specifying the alignment as a mapping between residue indices\n * of protein 1 and residue indices of protein 2.\n *\n * <p>For example,<pre>\n * 1234\n * 5678<\/pre>\n * becomes<pre>\n * 1->5\n * 2->6\n * 3->7\n * 4->8<\/pre>\n *\n * @param afpChain An alignment\n * @return A mapping from aligned residues of protein 1 to their partners in protein 2.\n * @throws StructureException If afpChain is not one-to-one\n */\n","repo_name":"biojava-master/","id":579,"method_signature":"Map<Integer,Integer> alignmentAsMap(AFPChain)"}