{"callee_method_names":["URL.getPath","URL.getHost","URL.getPath","URL.getHost","URL.getPath","URL.getHost","URL.getPath","URL.getHost","URL.getPath","URL.getHost","URL.getPath","URL.getHost","URL.getProtocol","URL.getPath","URL.getHost","URL.getProtocol","URL.getPath","URL.getHost","URL.getProtocol","URL.getPath","URL.getHost","URL.getProtocol"],"method_name":"TestStructureName.testURLs","method_implementation":"{\n    URL url;\n    // Tilde doesn't get expanded\n    url = new URL(\"file://~/1abc.pdb\");\n    assertEquals(\"/1abc.pdb\", url.getPath());\n    assertEquals(\"~\", url.getHost());\n    url = new URL(\"file:///~/1abc.pdb\");\n    assertEquals(\"/~/1abc.pdb\", url.getPath());\n    assertEquals(\"\", url.getHost());\n    // Supports omitting the initial slashes\n    url = new URL(\"file:~/1abc.pdb\");\n    assertEquals(\"~/1abc.pdb\", url.getPath());\n    assertEquals(\"\", url.getHost());\n    // proper case. Three slashes gives empty host\n    url = new URL(\"file:///1abc.pdb\");\n    assertEquals(\"/1abc.pdb\", url.getPath());\n    assertEquals(\"\", url.getHost());\n    // Two slashes triggers host\n    url = new URL(\"file://1abc.pdb\");\n    assertEquals(\"\", url.getPath());\n    assertEquals(\"1abc.pdb\", url.getHost());\n    // One slash treated like zero slashes\n    url = new URL(\"file:/1abc.pdb\");\n    assertEquals(\"/1abc.pdb\", url.getPath());\n    assertEquals(\"\", url.getHost());\n    assertEquals(\"file\", url.getProtocol());\n    // Surprise! url: prefix already works\n    url = new URL(\"url:file://localhost/1abc.pdb\");\n    assertEquals(\"/1abc.pdb\", url.getPath());\n    assertEquals(\"localhost\", url.getHost());\n    assertEquals(\"file\", url.getProtocol());\n    url = new URL(\"URL:file://localhost/1abc.pdb\");\n    assertEquals(\"/1abc.pdb\", url.getPath());\n    assertEquals(\"localhost\", url.getHost());\n    assertEquals(\"file\", url.getProtocol());\n    // But doubling the file prefix doesn't. Is that OK?\n    url = new URL(\"file:file://localhost/1abc.pdb\");\n    assertEquals(\"file://localhost/1abc.pdb\", url.getPath());\n    assertEquals(\"\", url.getHost());\n    assertEquals(\"file\", url.getProtocol());\n}","repo_id":"9","comment":"// Not really a test, but rather documenting Java's URL behavior\n","repo_name":"biojava-master/","id":2177,"method_signature":"void testURLs()"}