{"callee_method_names":["MultipleAlignment.size","MultipleAlignment.getAtomArrays","List<Atom[]>.get","List<Atom[]>.get","MultipleAlignment.getBlockSet","Logger.error","MultipleAlignment.clone","MultipleSuperimposer.superimpose","MultipleAlignment.getBlockSet","List<Atom[]>.get","List<Group>.size","Group.getAtom","List<Matrix4d>.get","List<Atom[]>.add"],"method_name":"MultipleAlignmentDisplay.getRotatedAtoms","method_implementation":"{\n    int size = multAln.size();\n    List<Atom[]> atomArrays = multAln.getAtomArrays();\n    for (int i = 0; i < size; i++) {\n        if (atomArrays.get(i).length < 1)\n            throw new StructureException(\"Length of atoms arrays is too short! Size: \" + atomArrays.get(i).length);\n    }\n    List<Atom[]> rotatedAtoms = new ArrayList<Atom[]>();\n    // TODO implement independent BlockSet superposition of the structure\n    List<Matrix4d> transf = multAln.getBlockSet(0).getTransformations();\n    if (transf == null) {\n        logger.error(\"Alignment Transformations are not calculated. \" + \"Superimposing to first structure as reference.\");\n        multAln = multAln.clone();\n        MultipleSuperimposer imposer = new ReferenceSuperimposer();\n        imposer.superimpose(multAln);\n        transf = multAln.getBlockSet(0).getTransformations();\n        assert (transf != null);\n    }\n    // Rotate the atom coordinates of all the structures\n    for (int i = 0; i < size; i++) {\n        // TODO handle BlockSet-level transformations\n        // make sure this method has the same behavior as the other display.\n        // -SB 2015-06\n        // Assume all atoms are from the same structure\n        Structure displayS = atomArrays.get(i)[0].getGroup().getChain().getStructure().clone();\n        // Get all the atoms and include ligands and hetatoms\n        Atom[] rotCA = StructureTools.getRepresentativeAtomArray(displayS);\n        List<Group> hetatms = StructureTools.getUnalignedGroups(rotCA);\n        int index = rotCA.length;\n        rotCA = Arrays.copyOf(rotCA, rotCA.length + hetatms.size());\n        for (Group g : hetatms) {\n            rotCA[index] = g.getAtom(0);\n            index++;\n        }\n        // Transform the structure to ensure a full rotation in the display\n        Calc.transform(displayS, transf.get(i));\n        rotatedAtoms.add(rotCA);\n    }\n    return rotatedAtoms;\n}","repo_id":"9","comment":"/**\n * New structures are downloaded if they were not cached in the alignment\n * and they are entirely transformed here with the superposition information\n * in the Multiple Alignment.\n *\n * @param multAln\n * @return list of transformed AtomArrays\n * @throws StructureException\n */\n","repo_name":"biojava-master/","id":676,"method_signature":"List<Atom[]> getRotatedAtoms(MultipleAlignment)"}