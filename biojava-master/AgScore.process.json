{"callee_method_ids":[3637,3673,3675,3659,3657,3661,3654],"callee_method_names":["ArrayList<SurvivalInfo>.size","CoxInfo.getCoefficientsList","ArrayList<String>.size","ArrayList<SurvivalInfo>.get","SurvivalInfo.getTime","SurvivalInfo.getStatus","SurvivalInfo.getStrata","SurvivalInfo.getWeight","SurvivalInfo.getScore","ArrayList<String>.size","ArrayList<String>.get","SurvivalInfo.getVariable"],"method_name":"AgScore.process","method_implementation":"{\n    int i, k;\n    //double temp;\n    int n = survivalInfoList.size();\n    ArrayList<String> variables = new ArrayList<String>(coxInfo.getCoefficientsList().keySet());\n    int nvar = variables.size();\n    int dd;\n    double[] event = new double[n];\n    double[] start = new double[n];\n    double[] stop = new double[n];\n    double[] strata = new double[n];\n    double[] weights = new double[n];\n    double[] score = new double[n];\n    double[] a = new double[nvar];\n    double[] a2 = new double[nvar];\n    double[] mean = new double[nvar];\n    double[] mh1 = new double[nvar];\n    double[] mh2 = new double[nvar];\n    double[] mh3 = new double[nvar];\n    double denom = 0;\n    double time = 0;\n    double e_denom = 0;\n    double meanwt = 0;\n    double deaths = 0;\n    double risk;\n    double[][] covar = new double[nvar][n];\n    double[][] resid = new double[nvar][n];\n    double hazard;\n    double downwt, temp1, temp2, d2;\n    int person = 0;\n    //  n = *nx;\n    //  nvar  = *nvarx;\n    for (int p = 0; p < n; p++) {\n        SurvivalInfo si = survivalInfoList.get(p);\n        stop[p] = si.getTime();\n        event[p] = si.getStatus();\n        if (useStrata) {\n            strata[p] = si.getStrata();\n        } else {\n            strata[p] = 0;\n        }\n        weights[p] = si.getWeight();\n        score[p] = si.getScore();\n        for (int v = 0; v < variables.size(); v++) {\n            String variable = variables.get(v);\n            Double value = si.getVariable(variable);\n            covar[v][p] = value;\n        }\n    }\n    for (person = 0; person < n; ) {\n        if (event[person] == 0) {\n            person++;\n        } else {\n            /*\n\t\t\t\t ** compute the mean over the risk set, also hazard at this time\n\t\t\t\t */\n            denom = 0;\n            e_denom = 0;\n            meanwt = 0;\n            deaths = 0;\n            for (i = 0; i < nvar; i++) {\n                a[i] = 0;\n                a2[i] = 0;\n            }\n            time = stop[person];\n            for (k = person; k < n; k++) {\n                if (start[k] < time) {\n                    risk = score[k] * weights[k];\n                    denom += risk;\n                    for (i = 0; i < nvar; i++) {\n                        a[i] = a[i] + risk * covar[i][k];\n                    }\n                    if (stop[k] == time && event[k] == 1) {\n                        deaths++;\n                        e_denom += risk;\n                        meanwt += weights[k];\n                        for (i = 0; i < nvar; i++) {\n                            a2[i] = a2[i] + risk * covar[i][k];\n                        }\n                    }\n                }\n                if (strata[k] == 1) {\n                    break;\n                }\n            }\n            /* add things in for everyone in the risk set*/\n            if (deaths < 2 || method == CoxMethod.Breslow) {\n                /* easier case */\n                hazard = meanwt / denom;\n                for (i = 0; i < nvar; i++) {\n                    mean[i] = a[i] / denom;\n                }\n                for (k = person; k < n; k++) {\n                    if (start[k] < time) {\n                        risk = score[k];\n                        for (i = 0; i < nvar; i++) {\n                            resid[i][k] -= (covar[i][k] - mean[i]) * risk * hazard;\n                        }\n                        if (stop[k] == time) {\n                            person++;\n                            if (event[k] == 1) {\n                                for (i = 0; i < nvar; i++) {\n                                    resid[i][k] += (covar[i][k] - mean[i]);\n                                }\n                            }\n                        }\n                    }\n                    if (strata[k] == 1) {\n                        break;\n                    }\n                }\n            } else {\n                /*\n\t\t\t\t\t ** If there are 3 deaths, let m1, m2, m3 be the three\n\t\t\t\t\t **   weighted means,  h1, h2, h3 be the three hazard jumps.\n\t\t\t\t\t ** Then temp1 = h1 + h2 + h3\n\t\t\t\t\t **      temp2 = h1 + (2/3)h2 + (1/3)h3\n\t\t\t\t\t **      mh1   = m1*h1 + m2*h2 + m3*h3\n\t\t\t\t\t **      mh2   = m1*h1 + (2/3)m2*h2 + (1/3)m3*h3\n\t\t\t\t\t **      mh3   = (1/3)*(m1+m2+m3)\n\t\t\t\t\t */\n                temp1 = 0;\n                temp2 = 0;\n                for (i = 0; i < nvar; i++) {\n                    mh1[i] = 0;\n                    mh2[i] = 0;\n                    mh3[i] = 0;\n                }\n                meanwt /= deaths;\n                for (dd = 0; dd < deaths; dd++) {\n                    downwt = dd / deaths;\n                    d2 = denom - downwt * e_denom;\n                    hazard = meanwt / d2;\n                    temp1 += hazard;\n                    temp2 += (1 - downwt) * hazard;\n                    for (i = 0; i < nvar; i++) {\n                        mean[i] = (a[i] - downwt * a2[i]) / d2;\n                        mh1[i] += mean[i] * hazard;\n                        mh2[i] += mean[i] * (1 - downwt) * hazard;\n                        mh3[i] += mean[i] / deaths;\n                    }\n                }\n                for (k = person; k < n; k++) {\n                    if (start[k] < time) {\n                        risk = score[k];\n                        if (stop[k] == time && event[k] == 1) {\n                            for (i = 0; i < nvar; i++) {\n                                resid[i][k] += covar[i][k] - mh3[i];\n                                resid[i][k] -= risk * covar[i][k] * temp2;\n                                resid[i][k] += risk * mh2[i];\n                            }\n                        } else {\n                            for (i = 0; i < nvar; i++) {\n                                resid[i][k] -= risk * (covar[i][k] * temp1 - mh1[i]);\n                            }\n                        }\n                    }\n                    if (strata[k] == 1) {\n                        break;\n                    }\n                }\n                for (; stop[person] == time; person++) {\n                    if (strata[person] == 1) {\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    //appears to be backward internally\n    double[][] flipresid = new double[n][nvar];\n    for (int s = 0; s < resid.length; s++) {\n        for (int t = 0; t < resid[0].length; t++) {\n            flipresid[t][s] = resid[s][t];\n        }\n    }\n    return flipresid;\n}","repo_id":"9","comment":"/**\n * @param method\n * @param survivalInfoList\n * @param coxInfo\n * @param useStrata\n * @return\n */\n","repo_name":"biojava-master/","id":3508,"method_signature":"double[][] process(CoxMethod, ArrayList, CoxInfo, boolean)"}