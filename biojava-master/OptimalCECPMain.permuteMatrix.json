{"callee_method_names":["Matrix.copy","Matrix.getRowDimension","Matrix.getRowDimension","Matrix.getRowDimension","Matrix.getColumnDimension","Matrix.getColumnDimension","Matrix.getColumnDimension","Matrix.getRowDimension","Matrix.getColumnDimension","Matrix.getMatrix","Matrix.getRowDimension","Matrix.getRowDimension","Matrix.getColumnDimension","Matrix.getColumnDimension","Matrix.get","Matrix.get","Matrix.getRowDimension","Matrix.getColumnDimension"],"method_name":"OptimalCECPMain.permuteMatrix","method_implementation":"{\n    //fix up cp to be positive\n    if (cpRows == 0 && cpCols == 0) {\n        return mat.copy();\n    }\n    if (cpRows < 0) {\n        cpRows = mat.getRowDimension() + cpRows;\n    }\n    if (cpRows < 0 || cpRows >= mat.getRowDimension()) {\n        throw new ArrayIndexOutOfBoundsException(String.format(\"Can't permute rows by %d: only %d rows.\", cpRows, mat.getRowDimension()));\n    }\n    if (cpCols < 0) {\n        cpCols = mat.getColumnDimension() + cpCols;\n    }\n    if (cpCols < 0 || cpCols >= mat.getColumnDimension()) {\n        throw new ArrayIndexOutOfBoundsException(String.format(\"Can't permute cols by %d: only %d rows.\", cpCols, mat.getColumnDimension()));\n    }\n    int[] rows = new int[mat.getRowDimension()];\n    for (int i = 0; i < rows.length; i++) {\n        rows[i] = (i + cpRows) % rows.length;\n    }\n    int[] cols = new int[mat.getColumnDimension()];\n    for (int i = 0; i < cols.length; i++) {\n        cols[i] = (i + cpCols) % cols.length;\n    }\n    Matrix newMat = mat.getMatrix(rows, cols);\n    assert (newMat.getRowDimension() == mat.getRowDimension());\n    assert (newMat.getColumnDimension() == mat.getColumnDimension());\n    assert (newMat.get(0, 0) == mat.get(cpRows % mat.getRowDimension(), cpCols % mat.getColumnDimension()));\n    return newMat;\n}","repo_id":"9","comment":"/**\n * Permutes <i>mat<\/i> by moving the rows of the matrix upwards by <i>cp<\/i>\n * rows.\n * @param mat The original matrix\n * @param cpRows Number of rows upward to move entries\n * @param cpCols Number of columns leftward to move entries\n * @return The permuted matrix\n */\n","repo_name":"biojava-master/","id":786,"method_signature":"Matrix permuteMatrix(Matrix, int, int)"}