{"callee_method_names":["Atom.getGroup","Group.getType","GroupType.equals","Group.getPDBName","Group.getResidueNumber","Atom.getPDBserial","Atom.getAltLoc","DecimalFormat.format","Atom.getX","DecimalFormat.format","Atom.getY","DecimalFormat.format","Atom.getZ","DecimalFormat.format","Atom.getOccupancy","DecimalFormat.format","Atom.getTempFactor","StringBuffer.append","StringBuffer.append","StringBuffer.append","StringBuffer.append","StringBuffer.append","StringBuffer.append","StringBuffer.append","StringBuffer.append","StringBuffer.append","StringBuffer.append","StringBuffer.append","StringBuffer.append","StringBuffer.append","StringBuffer.append","StringBuffer.append","Atom.getElement","Element.toString","Element.equals","StringBuffer.append","StringBuffer.toString","StringBuffer.append"],"method_name":"FileConvert.toPDB","method_implementation":"{\n    Group g = a.getGroup();\n    GroupType type = g.getType();\n    String record = \"\";\n    if (type.equals(GroupType.HETATM)) {\n        record = \"HETATM\";\n    } else {\n        record = \"ATOM  \";\n    }\n    // format output ...\n    String resName = g.getPDBName();\n    String pdbcode = g.getResidueNumber().toString();\n    int seri = a.getPDBserial();\n    String serial = String.format(\"%5d\", seri);\n    String fullName = formatAtomName(a);\n    Character altLoc = a.getAltLoc();\n    if (altLoc == null)\n        altLoc = ' ';\n    String resseq = \"\";\n    if (hasInsertionCode(pdbcode))\n        resseq = String.format(\"%5s\", pdbcode);\n    else\n        resseq = String.format(\"%4s\", pdbcode) + \" \";\n    String x = String.format(\"%8s\", d3.format(a.getX()));\n    String y = String.format(\"%8s\", d3.format(a.getY()));\n    String z = String.format(\"%8s\", d3.format(a.getZ()));\n    String occupancy = String.format(\"%6s\", d2.format(a.getOccupancy()));\n    String tempfactor = String.format(\"%6s\", d2.format(a.getTempFactor()));\n    String leftResName = String.format(\"%3s\", resName);\n    StringBuffer s = new StringBuffer();\n    s.append(record);\n    s.append(serial);\n    s.append(\" \");\n    s.append(fullName);\n    s.append(altLoc);\n    s.append(leftResName);\n    s.append(\" \");\n    s.append(chainID);\n    s.append(resseq);\n    s.append(\"   \");\n    s.append(x);\n    s.append(y);\n    s.append(z);\n    s.append(occupancy);\n    s.append(tempfactor);\n    Element e = a.getElement();\n    String eString = e.toString().toUpperCase();\n    if (e.equals(Element.R)) {\n        eString = \"X\";\n    }\n    str.append(String.format(\"%-76s%2s\", s.toString(), eString));\n    str.append(newline);\n}","repo_id":"9","comment":"/**\n * Print ATOM record in the following syntax\n * <pre>\n * ATOM      1  N   ASP A  15     110.964  24.941  59.191  1.00 83.44           N\n *\n * COLUMNS        DATA TYPE       FIELD         DEFINITION\n * ---------------------------------------------------------------------------------\n * 1 -  6        Record name     \"ATOM  \"\n * 7 - 11        Integer         serial        Atom serial number.\n * 13 - 16        Atom            name          Atom name.\n * 17             Character       altLoc        Alternate location indicator.\n * 18 - 20        Residue name    resName       Residue name.\n * 22             Character       chainID       Chain identifier.\n * 23 - 26        Integer         resSeq        Residue sequence number.\n * 27             AChar           iCode         Code for insertion of residues.\n * 31 - 38        Real(8.3)       x             Orthogonal coordinates for X in\n * Angstroms.\n * 39 - 46        Real(8.3)       y             Orthogonal coordinates for Y in\n * Angstroms.\n * 47 - 54        Real(8.3)       z             Orthogonal coordinates for Z in\n * Angstroms.\n * 55 - 60        Real(6.2)       occupancy     Occupancy.\n * 61 - 66        Real(6.2)       tempFactor    Temperature factor.\n * 73 - 76        LString(4)      segID         Segment identifier, left-justified.\n * 77 - 78        LString(2)      element       Element symbol, right-justified.\n * 79 - 80        LString(2)      charge        Charge on the atom.\n * <\/pre>\n * @param a\n * @param str\n * @param chainID the chain ID that the Atom will have in the output string\n */\n","repo_name":"biojava-master/","id":1156,"method_signature":"void toPDB(Atom, StringBuffer, String)"}