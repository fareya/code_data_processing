{"callee_method_names":["S.setOriginalHeader","S.setAccession","S.setAnnotationType","S.setAnnotationType","S.setAccession","S.setDescription","S.setAccession","S.setAccession","S.setAccession","S.setAccession","S.setAccession","String[].startsWith","String[].split","String[].split","S.setAccession","String[].indexOf","S.setAccession","S.setAccession","S.setAccession","S.setAccession","S.setAccession","S.setAccession","S.setAccession"],"method_name":"GenericFastaHeaderParser.parseHeader","method_implementation":"{\n    //uniptrot\n    // tr|Q0TET7|Q0TET7_ECOL5 Putative uncharacterized protein OS=Escherichia coli O6:K15:H31 (strain 536 / UPEC) GN=ECP_2553 PE=4 SV=1\n    sequence.setOriginalHeader(header);\n    String[] data = getHeaderValues(header);\n    if (data.length == 1) {\n        sequence.setAccession(new AccessionID(data[0]));\n    } else if (\"sp\".equalsIgnoreCase(data[0]) || \"tr\".equalsIgnoreCase(data[0])) {\n        if (\"sp\".equalsIgnoreCase(data[0])) {\n            sequence.setAnnotationType(AnnotationType.CURATED);\n        } else {\n            sequence.setAnnotationType(AnnotationType.PREDICTED);\n        }\n        sequence.setAccession(new AccessionID(data[1], DataSource.UNIPROT));\n        if (data.length > 2) {\n            sequence.setDescription(data[2]);\n        }\n    } else if (\"gi\".equalsIgnoreCase(data[0])) {\n        DataSource giSource = DataSource.UNKNOWN;\n        if (data.length >= 3) {\n            if (\"gb\".equalsIgnoreCase(data[2])) {\n                giSource = DataSource.GENBANK;\n            } else if (\"emb\".equalsIgnoreCase(data[2])) {\n                giSource = DataSource.ENA;\n            } else if (\"dbj\".equalsIgnoreCase(data[2])) {\n                giSource = DataSource.DDBJ;\n            }\n            sequence.setAccession(new AccessionID(data[3], giSource));\n        } else {\n            sequence.setAccession(new AccessionID(header, giSource));\n        }\n    } else if (\"pir\".equalsIgnoreCase(data[0])) {\n        sequence.setAccession(new AccessionID(data[2], DataSource.NBRF));\n    } else if (\"prf\".equalsIgnoreCase(data[0])) {\n        sequence.setAccession(new AccessionID(data[2], DataSource.PRF));\n    } else if (\"pdb\".equalsIgnoreCase(data[0])) {\n        sequence.setAccession(new AccessionID(data[1] + \":\" + data[2], DataSource.PDB1));\n    } else if (data[0].startsWith(\"PDB\")) {\n        String[] pdbe = data[0].split(\" \");\n        String[] pdbaccession = pdbe[0].split(\":\");\n        sequence.setAccession(new AccessionID(pdbaccession[1], DataSource.PDBe));\n    } else if (data[0].indexOf(\":\") != -1 && data.length > 1 && \"PDBID\".equals(data[1])) {\n        sequence.setAccession(new AccessionID(data[0], DataSource.PDB2));\n    } else if (\"pat\".equalsIgnoreCase(data[0])) {\n        sequence.setAccession(new AccessionID(data[2], DataSource.PATENTS));\n    } else if (\"bbs\".equalsIgnoreCase(data[0])) {\n        sequence.setAccession(new AccessionID(data[1], DataSource.GENINFO));\n    } else if (\"gnl\".equalsIgnoreCase(data[0])) {\n        sequence.setAccession(new AccessionID(data[2], DataSource.GENERAL));\n    } else if (\"ref\".equalsIgnoreCase(data[0])) {\n        sequence.setAccession(new AccessionID(data[1], DataSource.NCBI));\n    } else if (\"lcl\".equalsIgnoreCase(data[0])) {\n        sequence.setAccession(new AccessionID(data[1], DataSource.LOCAL));\n    } else {\n        // avoid the common problem of picking up all the comments original header in getOriginalHeader\n        sequence.setAccession(new AccessionID(data[0]));\n    }\n}","repo_id":"9","comment":"/**\n * Parse the header and set the values in the sequence\n * @param header\n * @param sequence\n */\n","repo_name":"biojava-master/","id":2838,"method_signature":"void parseHeader(String, S)"}