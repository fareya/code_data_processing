{"callee_method_names":["Matrix.get","Matrix.get","Random.nextDouble","Matrix.get","List<List<Integer>>.get","List<Integer>.add","List<List<Integer>>.get"],"method_name":"SymmOptimizer.insertGap","method_implementation":"{\n    // Let gaps only if the repeat is larger than the minimum length\n    if (repeatCore <= Lmin)\n        return false;\n    // Select residue by maximum distance\n    updateMultipleAlignment();\n    Matrix residueDistances = MultipleAlignmentTools.getAverageResidueDistances(msa);\n    double maxDist = Double.MIN_VALUE;\n    int su = 0;\n    int res = 0;\n    for (int col = 0; col < length; col++) {\n        for (int s = 0; s < order; s++) {\n            if (residueDistances.get(s, col) != -1) {\n                if (residueDistances.get(s, col) > maxDist) {\n                    // geometric distribution\n                    if (rnd.nextDouble() > 0.5) {\n                        su = s;\n                        res = col;\n                        maxDist = residueDistances.get(s, col);\n                    }\n                }\n            }\n        }\n    }\n    // Insert the gap at the position\n    Integer residueL = block.get(su).get(res);\n    if (residueL != null) {\n        freePool.add(residueL);\n        Collections.sort(freePool);\n    } else\n        // If there was a gap already in the position.\n        return false;\n    block.get(su).set(res, null);\n    checkGaps();\n    return true;\n}","repo_id":"9","comment":"/**\n * Insert a gap in one of the repeats into selected position (by higher\n * distances) in the alignment. Calculates the average residue distance to\n * make the choice. A gap is a null in the block.\n *\n * @throws StructureException\n * @throws RefinerFailedException\n */\n","repo_name":"biojava-master/","id":2078,"method_signature":"boolean insertGap()"}