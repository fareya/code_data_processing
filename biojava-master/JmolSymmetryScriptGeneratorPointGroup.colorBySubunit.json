{"callee_method_ids":[1885,1884],"callee_method_names":["RotationAxisAligner.getSubunits","QuatSymmetrySubunits.getModelNumbers","QuatSymmetrySubunits.getChainIds","RotationAxisAligner.getOrbits","RotationGroup.getRotation","List<List<Integer>>.size","List<List<Integer>>.size","List<List<Integer>>.get","Map<Color4f, List<String>>.get","Map<Color4f, List<String>>.put","List<String>.add"],"method_name":"JmolSymmetryScriptGeneratorPointGroup.colorBySubunit","method_implementation":"{\n    QuatSymmetrySubunits subunits = rotationAxisAligner.getSubunits();\n    List<Integer> modelNumbers = subunits.getModelNumbers();\n    List<String> chainIds = subunits.getChainIds();\n    List<List<Integer>> orbits = rotationAxisAligner.getOrbits();\n    int fold = rotationGroup.getRotation(0).getFold();\n    Color[] col = null;\n    Color4f[] colors = null;\n    if (fold > 1) {\n        col = ColorBrewer.Spectral.getColorPalette(2 * fold);\n        colors = ColorConverter.convertColor4f(col);\n    } else {\n        col = ColorBrewer.Spectral.getColorPalette(orbits.size());\n        colors = ColorConverter.convertColor4f(col);\n    }\n    int half = colors.length / 2;\n    for (int i = 0; i < half; i++) {\n        if (i % 2 != 0) {\n            Color4f temp = colors[i];\n            colors[i] = colors[half + i];\n            colors[half + i] = temp;\n        }\n    }\n    Map<Color4f, List<String>> colorMap = new HashMap<Color4f, List<String>>();\n    for (int i = 0; i < orbits.size(); i++) {\n        for (int j = 0; j < fold; j++) {\n            // assign alternating color sets to adjacent orbits\n            int colorIndex = i;\n            if (fold > 1) {\n                if (i % 2 == 0) {\n                    colorIndex = j;\n                } else {\n                    colorIndex = fold + j;\n                }\n            }\n            int subunit = orbits.get(i).get(j);\n            Color4f c = colors[colorIndex];\n            List<String> ids = colorMap.get(c);\n            if (ids == null) {\n                ids = new ArrayList<String>();\n                colorMap.put(c, ids);\n            }\n            String id = getChainSpecification(modelNumbers, chainIds, subunit);\n            ids.add(id);\n        }\n    }\n    return defaultColoring + getJmolColorScript(colorMap) + getJmolLigandScript();\n}","repo_id":"9","comment":"/* (non-Javadoc)\n\t * @see org.biojava.nbio.structure.quaternary.jmolScript.JMolSymmetryScriptInterface#colorBySubunit()\n\t */\n","repo_name":"biojava-master/","id":3396,"method_signature":"String colorBySubunit()"}