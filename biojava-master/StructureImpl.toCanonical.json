{"callee_method_names":["StructureIdentifier.toCanonical","Chain.getAtomGroups","List<Group>.listIterator","ListIterator<Group>.hasNext","ListIterator<Group>.next","Group.getResidueNumber","ListIterator<Group>.hasNext","ListIterator<Group>.next","Group.getResidueNumber","List<ResidueRange>.add","Chain.getName"],"method_name":"StructureImpl.toCanonical","method_implementation":"{\n    StructureIdentifier real = getStructureIdentifier();\n    if (real != null) {\n        try {\n            return real.toCanonical();\n        } catch (StructureException e) {\n            // generate fake one if needed\n        }\n    }\n    // No identifier set, so generate based on residues present in the structure\n    List<ResidueRange> range = new ArrayList<>();\n    for (Chain chain : getChains()) {\n        List<Group> groups = chain.getAtomGroups();\n        ListIterator<Group> groupsIt = groups.listIterator();\n        if (!groupsIt.hasNext()) {\n            // no groups in chain\n            continue;\n        }\n        Group g = groupsIt.next();\n        ResidueNumber first = g.getResidueNumber();\n        //TODO Detect missing intermediate residues -sbliven, 2015-01-28\n        //Already better than previous whole-chain representation\n        // get last residue\n        while (groupsIt.hasNext()) {\n            g = groupsIt.next();\n        }\n        ResidueNumber last = g.getResidueNumber();\n        range.add(new ResidueRange(chain.getName(), first, last));\n    }\n    return new SubstructureIdentifier(getPdbId(), range);\n}","repo_id":"9","comment":"/**\n * Creates a SubstructureIdentifier based on the residues in this Structure.\n *\n * Only the first and last residues of each chain are considered, so chains\n * with gaps\n * @return A {@link SubstructureIdentifier} with residue ranges constructed from each chain\n */\n","repo_name":"biojava-master/","id":2166,"method_signature":"SubstructureIdentifier toCanonical()"}