{"callee_method_ids":[554,545,828],"callee_method_names":["PDBFileReader.setPath","Logger.info","PDBFileReader.getStructureById","PDBFileReader.getStructureById","StructurePairAligner.align","StructurePairAligner.getAlignments","Logger.info","AlternativeAlignment.toPDB","Logger.info","PrintStream.println","PrintStream.close","FileOutputStream.close","Logger.error"],"method_name":"StructurePairAligner.main","method_implementation":"{\n    // UPDATE THE FOLLOWING LINES TO MATCH YOUR SETUP\n    PDBFileReader pdbr = new PDBFileReader();\n    pdbr.setPath(\"/Users/andreas/WORK/PDB/\");\n    // String pdb1 = \"1crl\";\n    // String pdb2 = \"1ede\";\n    String pdb1 = \"1buz\";\n    String pdb2 = \"1ali\";\n    String outputfile = \"/tmp/alig_\" + pdb1 + \"_\" + pdb2 + \".pdb\";\n    // NO NEED TO DO CHANGE ANYTHING BELOW HERE...\n    StructurePairAligner sc = new StructurePairAligner();\n    // step1 : read molecules\n    logger.info(\"aligning {} vs. {}\", pdb1, pdb2);\n    Structure s1 = pdbr.getStructureById(pdb1);\n    Structure s2 = pdbr.getStructureById(pdb2);\n    // step 2 : do the calculations\n    sc.align(s1, s2);\n    AlternativeAlignment[] aligs = sc.getAlignments();\n    // cluster similar results together\n    ClusterAltAligs.cluster(aligs);\n    // print the result:\n    // the AlternativeAlignment object gives also access to rotation\n    // matrices / shift vectors.\n    for (AlternativeAlignment aa : aligs) {\n        logger.info(\"Alternative Alignment: {}\", aa);\n    }\n    // convert AlternativeAlignemnt 1 to PDB file, so it can be opened with\n    // a viewer (e.g. Jmol, Rasmol)\n    if (aligs.length > 0) {\n        AlternativeAlignment aa1 = aligs[0];\n        String pdbstr = aa1.toPDB(s1, s2);\n        logger.info(\"writing alignment to {}\", outputfile);\n        FileOutputStream out = new FileOutputStream(outputfile);\n        PrintStream p = new PrintStream(out);\n        p.println(pdbstr);\n        p.close();\n        out.close();\n    }\n    // display the alignment in Jmol\n    // only will work if Jmol is in the Classpath\n    if (aligs.length > 0) {\n        if (!GuiWrapper.isGuiModuleInstalled()) {\n            logger.error(\"Could not find structure-gui modules in classpath, please install first!\");\n        }\n    }\n}","repo_id":"9","comment":"/**\n * example usage of this class\n *\n * @param args\n */\n","repo_name":"biojava-master/","id":544,"method_signature":"void main(String[])"}