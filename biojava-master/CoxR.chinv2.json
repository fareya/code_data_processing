{"callee_method_names":[],"method_name":"CoxR.chinv2","method_implementation":"{\n    double temp;\n    int i, j, k;\n    /*\n\t\t ** invert the cholesky in the lower triangle\n\t\t **   take full advantage of the cholesky's diagonal of 1's\n\t\t */\n    for (i = 0; i < n; i++) {\n        if (matrix[i][i] > 0) {\n            matrix[i][i] = 1 / matrix[i][i];\n            /*this line inverts D */\n            for (j = (i + 1); j < n; j++) {\n                matrix[j][i] = -matrix[j][i];\n                for (k = 0; k < i; k++) /*sweep operator */\n                {\n                    matrix[j][k] += matrix[j][i] * matrix[i][k];\n                }\n            }\n        }\n    }\n    /*\n\t\t ** lower triangle now contains inverse of cholesky\n\t\t ** calculate F'DF (inverse of cholesky decomp process) to get inverse\n\t\t **   of original matrix\n\t\t */\n    for (i = 0; i < n; i++) {\n        if (matrix[i][i] == 0) {\n            /* singular row */\n            for (j = 0; j < i; j++) {\n                matrix[j][i] = 0;\n            }\n            for (j = i; j < n; j++) {\n                matrix[i][j] = 0;\n            }\n        } else {\n            for (j = (i + 1); j < n; j++) {\n                temp = matrix[j][i] * matrix[j][j];\n                if (j != i) {\n                    matrix[i][j] = temp;\n                }\n                for (k = i; k < j; k++) {\n                    matrix[i][k] += temp * matrix[j][k];\n                }\n            }\n        }\n    }\n}","repo_id":"9","comment":"/* $Id: chinv2.c 11357 2009-09-04 15:22:46Z therneau $\n\t **\n\t ** matrix inversion, given the FDF' cholesky decomposition\n\t **\n\t ** input  **matrix, which contains the chol decomp of an n by n\n\t **   matrix in its lower triangle.\n\t **\n\t ** returned: the upper triangle + diagonal contain (FDF')^{-1}\n\t **            below the diagonal will be F inverse\n\t **\n\t **  Terry Therneau\n\t */\n","repo_name":"biojava-master/","id":3566,"method_signature":"void chinv2(double[][], int)"}