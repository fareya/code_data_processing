{"callee_method_names":["MultipleAlignment.size","MultipleAlignment.getStructureIdentifier","Map<String, Integer>.containsKey","Map<String, Integer>.put","Map<String, Integer>.get","Map<String, Integer>.get","Map<String, Integer>.put","BasicSymmetricalDistanceMatrix.setIdentifier","Phylogeny.setName"],"method_name":"MultipleAlignmentTools.getStructuralTree","method_implementation":"{\n    double[][] rmsdMat = MultipleAlignmentTools.getRMSDMatrix(msta).getArray();\n    BasicSymmetricalDistanceMatrix rmsdDist = (BasicSymmetricalDistanceMatrix) DistanceMatrixCalculator.structuralDistance(rmsdMat, 1, 5, 0.4);\n    // Set the identifiers of the matrix\n    Map<String, Integer> alreadySeen = new HashMap<String, Integer>();\n    for (int i = 0; i < msta.size(); i++) {\n        // Make sure the identifiers are unique\n        String id = msta.getStructureIdentifier(i).toString();\n        if (alreadySeen.containsKey(id)) {\n            alreadySeen.put(id, alreadySeen.get(id) + 1);\n            id += \"_\" + alreadySeen.get(id);\n        } else\n            alreadySeen.put(id, 1);\n        rmsdDist.setIdentifier(i, id);\n    }\n    Phylogeny tree = TreeConstructor.distanceTree(rmsdDist, TreeConstructorType.NJ);\n    tree.setName(\"Structural Tree\");\n    return tree;\n}","repo_id":"9","comment":"/**\n * Calculate a phylogenetic tree of the MultipleAlignment using RMSD\n * distances and the Neighbor Joining algorithm from forester.\n *\n * @param msta\n *            MultipleAlignment of protein structures\n * @return Phylogeny phylogenetic tree\n * @throws CompoundNotFoundException\n */\n","repo_name":"biojava-master/","id":669,"method_signature":"Phylogeny getStructuralTree(MultipleAlignment)"}