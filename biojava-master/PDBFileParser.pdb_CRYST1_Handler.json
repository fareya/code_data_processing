{"callee_method_ids":[1479,1411,1418,1413,1418],"callee_method_names":["String.length","Logger.warn","String.substring","String.substring","String.substring","String.substring","String.substring","String.substring","Logger.info","Element.getMessage","String.length","String.substring","String.substring","String.length","CrystalCell.setA","CrystalCell.setB","CrystalCell.setC","CrystalCell.setAlpha","CrystalCell.setBeta","CrystalCell.setGamma","CrystalCell.isCellReasonable","Logger.debug","PDBCrystallographicInfo.setCrystalCell","Logger.warn","PDBCrystallographicInfo.setNonStandardSg","PDBCrystallographicInfo.setSpaceGroup","PDBCrystallographicInfo.setNonStandardSg"],"method_name":"PDBFileParser.pdb_CRYST1_Handler","method_implementation":"{\n    // for badly formatted files (e.g. phenix-produced ones), there's no z and the min length is 58 (e.g. for SG 'P 1')\n    if (line.length() < 58) {\n        logger.warn(\"CRYST1 record has fewer than 58 columns: will ignore it\");\n        return;\n    }\n    float a;\n    float b;\n    float c;\n    float alpha;\n    float beta;\n    float gamma;\n    String spaceGroup = \"\";\n    try {\n        a = Float.parseFloat(line.substring(6, 15).trim());\n        b = Float.parseFloat(line.substring(15, 24).trim());\n        c = Float.parseFloat(line.substring(24, 33).trim());\n        alpha = Float.parseFloat(line.substring(33, 40).trim());\n        beta = Float.parseFloat(line.substring(40, 47).trim());\n        gamma = Float.parseFloat(line.substring(47, 54).trim());\n    } catch (NumberFormatException e) {\n        logger.info(\"could not parse CRYST1 record (\" + e.getMessage() + \") from line and ignoring it \" + line);\n        return;\n    }\n    if (line.length() >= 66) {\n        // for well formatted files\n        spaceGroup = line.substring(55, 66).trim();\n    } else {\n        // for not-so-well formatted files, e.g. phenix-produced ones: they lack a Z value\n        spaceGroup = line.substring(55, line.length()).trim();\n    }\n    CrystalCell xtalCell = new CrystalCell();\n    xtalCell.setA(a);\n    xtalCell.setB(b);\n    xtalCell.setC(c);\n    xtalCell.setAlpha(alpha);\n    xtalCell.setBeta(beta);\n    xtalCell.setGamma(gamma);\n    if (!xtalCell.isCellReasonable()) {\n        // If the entry describes a structure determined by a technique other than X-ray crystallography,\n        // CRYST1 contains a = b = c = 1.0, alpha = beta = gamma = 90 degrees, space group = P 1, and Z =1.\n        // if so we don't add the crystal cell and it remains null\n        logger.debug(\"The crystal cell read from file does not have reasonable dimensions (at least one dimension is below {}), discarding it.\", CrystalCell.MIN_VALID_CELL_SIZE);\n    } else {\n        crystallographicInfo.setCrystalCell(xtalCell);\n    }\n    SpaceGroup sg = SymoplibParser.getSpaceGroup(spaceGroup);\n    if (sg == null) {\n        logger.warn(\"Space group '\" + spaceGroup + \"' not recognised as a standard space group\");\n        crystallographicInfo.setNonStandardSg(true);\n    } else {\n        crystallographicInfo.setSpaceGroup(sg);\n        crystallographicInfo.setNonStandardSg(false);\n    }\n}","repo_id":"9","comment":"/**\n * Handler for\n * CRYST1 Record Format\n * The CRYST1 record presents the unit cell parameters, space group, and Z value.\n * If the entry describes a structure determined by a technique other than X-ray crystallography,\n * CRYST1 contains a = b = c = 1.0, alpha = beta = gamma = 90 degrees, space group = P 1, and Z =1.\n * <pre>\n * COLUMNS DATA TYPE    FIELD          DEFINITION\n * -------------------------------------------------------------\n *  1 - 6  Record name  \"CRYST1\"\n *  7 - 15 Real(9.3)    a              a (Angstroms).\n * 16 - 24 Real(9.3)    b              b (Angstroms).\n * 25 - 33 Real(9.3)    c              c (Angstroms).\n * 34 - 40 Real(7.2)    alpha          alpha (degrees).\n * 41 - 47 Real(7.2)    beta           beta (degrees).\n * 48 - 54 Real(7.2)    gamma          gamma (degrees).\n * 56 - 66 LString      sGroup         Space group.\n * 67 - 70 Integer      z              Z value.\n * <\/pre>\n */\n","repo_name":"biojava-master/","id":1177,"method_signature":"void pdb_CRYST1_Handler(String)"}