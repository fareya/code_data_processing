{"callee_method_names":["StringWriter.append","MultipleAlignment.toString","List<String>.get","String.concat","String.concat","MultipleAlignment.size","StringWriter.append","List<String>.get","StringWriter.append","List<String>.get","MultipleAlignment.size","StringWriter.append","StringWriter.toString"],"method_name":"MultipleAlignmentWriter.toFatCat","method_implementation":"{\n    // Initialize the String and put the summary information\n    StringWriter fatcat = new StringWriter();\n    fatcat.append(alignment.toString() + \"\\n\\n\");\n    // Get the alignment sequences and the mapping\n    List<Integer> mapSeqToStruct = new ArrayList<Integer>();\n    List<String> alnSequences = MultipleAlignmentTools.getSequenceAlignment(alignment, mapSeqToStruct);\n    // Get the String of the Block Numbers for Position\n    String blockNumbers = \"\";\n    for (int pos = 0; pos < alnSequences.get(0).length(); pos++) {\n        int blockNr = MultipleAlignmentTools.getBlockForSequencePosition(alignment, mapSeqToStruct, pos);\n        if (blockNr != -1) {\n            blockNumbers = blockNumbers.concat(String.valueOf(blockNr + 1));\n        } else\n            blockNumbers = blockNumbers.concat(\" \");\n    }\n    // Write the Sequence Alignment\n    for (int str = 0; str < alignment.size(); str++) {\n        if (str < 9) {\n            fatcat.append(\"Chain 0\" + (str + 1) + \": \" + alnSequences.get(str) + \"\\n\");\n        } else {\n            fatcat.append(\"Chain \" + (str + 1) + \": \" + alnSequences.get(str) + \"\\n\");\n        }\n        if (str != alignment.size() - 1) {\n            fatcat.append(\"          \" + blockNumbers + \"\\n\");\n        }\n    }\n    return fatcat.toString();\n}","repo_id":"9","comment":"/**\n * Converts the {@link MultipleAlignment} into a FatCat String format.\n * Includes summary information about the alignment in the top and a\n * multiple sequence alignment at the bottom.\n *\n * @param alignment\n *            MultipleAlignment\n * @return String multiple sequence alignment in FASTA format\n * @see MultipleAlignmentTools#getSequenceAlignment(MultipleAlignment)\n */\n","repo_name":"biojava-master/","id":671,"method_signature":"String toFatCat(MultipleAlignment)"}