{"callee_method_names":["String.equals","String.charAt","StringBuilder.append","StringBuilder.append","StringBuilder.append","StringBuilder.append","StringBuilder.append","StringBuilder.append","StringBuilder.append","StringBuilder.append","StringBuilder.toString"],"method_name":"StructureInterface.toPDB","method_implementation":"{\n    String molecId1 = getMoleculeIds().getFirst();\n    String molecId2 = getMoleculeIds().getSecond();\n    if (molecId2.equals(molecId1)) {\n        // if both chains are named equally we want to still named them differently in the output pdb file\n        // so that molecular viewers can handle properly the 2 chains as separate entities\n        char letter = molecId1.charAt(0);\n        if (letter != 'Z' && letter != 'z') {\n            // i.e. next letter in alphabet\n            molecId2 = Character.toString((char) (letter + 1));\n        } else {\n            //i.e. 'A' or 'a'\n            molecId2 = Character.toString((char) (letter - 25));\n        }\n    }\n    StringBuilder sb = new StringBuilder();\n    for (Atom atom : this.molecules.getFirst()) {\n        sb.append(FileConvert.toPDB(atom, molecId1));\n    }\n    sb.append(\"TER\");\n    sb.append(System.getProperty(\"line.separator\"));\n    for (Atom atom : this.molecules.getSecond()) {\n        sb.append(FileConvert.toPDB(atom, molecId2));\n    }\n    sb.append(\"TER\");\n    sb.append(System.getProperty(\"line.separator\"));\n    sb.append(\"END\");\n    sb.append(System.getProperty(\"line.separator\"));\n    return sb.toString();\n}","repo_id":"9","comment":"/**\n * Return a String representing the 2 molecules of this interface in PDB format.\n * If the molecule ids (i.e. chain ids) are the same for both molecules, then the second\n * one will be replaced by the next letter in alphabet (or A for Z)\n * @return the PDB-formatted string\n */\n","repo_name":"biojava-master/","id":896,"method_signature":"String toPDB()"}