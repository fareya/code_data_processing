{"callee_method_ids":[2626],"callee_method_names":["InputStreamProvider.getInputStream","Iterator<Map.Entry<String, ProteinSequence>>.hasNext","FastaReader<ProteinSequence, AminoAcidCompound>.process","FastaReader<ProteinSequence, AminoAcidCompound>.close","LinkedHashMap.entrySet","Iterator<Map.Entry<String, ProteinSequence>>.hasNext","Iterator<Map.Entry<String, ProteinSequence>>.next","Map.Entry<String, ProteinSequence>.getValue","FastaReader<ProteinSequence, AminoAcidCompound>.close"],"method_name":"FastaStreamer.stream","method_implementation":"{\n    InputStreamProvider provider = new InputStreamProvider();\n    InputStream input;\n    try {\n        input = provider.getInputStream(getPath().toFile());\n    } catch (IOException exception) {\n        throw new UncheckedIOException(exception);\n    }\n    FastaReader<ProteinSequence, AminoAcidCompound> reader = new FastaReader<>(input, getHeaderParser(), getSequenceCreator());\n    Spliterator<ProteinSequence> source = new Spliterators.AbstractSpliterator<>(Integer.MAX_VALUE, Spliterator.IMMUTABLE | Spliterator.NONNULL) {\n\n        @Override\n        public boolean tryAdvance(Consumer<? super ProteinSequence> action) {\n            if (closed) {\n                return false;\n            }\n            ProteinSequence protein = next(reader);\n            if (null == protein) {\n                return false;\n            }\n            action.accept(protein);\n            return true;\n        }\n\n        /**\n         * Fetch the next header/protein tuple from the cache.  If the cache is empty, fetch another\n         * batch from the source file\n         *\n         * @param reader\n         * \t\tthe input stream from which the FASTA content is read\n         * @return the protein sequence\n         */\n        private ProteinSequence next(FastaReader<ProteinSequence, AminoAcidCompound> reader) {\n            try {\n                if (!iterator.hasNext()) {\n                    chunk = reader.process(getBatchSize());\n                    if (null == chunk) {\n                        closed = true;\n                        reader.close();\n                        return null;\n                    }\n                    iterator = chunk.entrySet().iterator();\n                }\n                if (iterator.hasNext()) {\n                    Map.Entry<String, ProteinSequence> entry = iterator.next();\n                    return createSequence(entry.getValue());\n                }\n                closed = true;\n                reader.close();\n            } catch (IOException exception) {\n                throw new UncheckedIOException(String.format(\"I/O error reading the FASTA file from '%s'\", getPath()), exception);\n            }\n            return null;\n        }\n    };\n    // Spliterator\n    return StreamSupport.stream(source, false);\n}","repo_id":"9","comment":"/**\n * Create a stream of protein sequences from the contents of the path\n * @return the stream\n */\n","repo_name":"biojava-master/","id":2697,"method_signature":"Stream<ProteinSequence> stream()"}