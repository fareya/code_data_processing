{"callee_method_names":["List<Range>.add","List<Range>.add","List<Range>.toArray","List<Range>.size"],"method_name":"Jronn.scoresToRanges","method_implementation":"{\n    assert scores != null && scores.length > 0;\n    assert probability > 0 && probability < 1;\n    int count = 0;\n    int regionLen = 0;\n    List<Range> ranges = new ArrayList<Range>();\n    for (float score : scores) {\n        count++;\n        // Round to 2 decimal points before comparison\n        score = (float) (Math.round(score * 100.0) / 100.0);\n        if (score > probability) {\n            regionLen++;\n        } else {\n            if (regionLen > 0) {\n                ranges.add(new Range(count - regionLen, count - 1, score));\n            }\n            regionLen = 0;\n        }\n    }\n    // In case of the range to boundary runs to the very end of the sequence\n    if (regionLen > 1) {\n        ranges.add(new Range(count - regionLen + 1, count, scores[scores.length - 1]));\n    }\n    return ranges.toArray(new Range[ranges.size()]);\n}","repo_id":"9","comment":"/**\n * Convert raw scores to ranges. Gives ranges for given probability of disorder value\n * @param scores the raw probability of disorder scores for each residue in the sequence.\n * @param probability the cut off threshold. Include all residues with the probability of disorder greater then this value\n * @return the array of ranges if there are any residues predicted to have the\n * probability of disorder greater then {@code probability}, null otherwise.\n */\n","repo_name":"biojava-master/","id":198,"method_signature":"Range[] scoresToRanges(float[], float)"}