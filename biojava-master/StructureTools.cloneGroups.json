{"callee_method_names":["Atom.getGroup","Group.getChain","Chain.getName","Chain.getName","Chain.setName","Chain.getName","List<Chain>.add","Group.clone","Chain.addGroup"],"method_name":"StructureTools.cloneGroups","method_implementation":"{\n    Group[] newGroup = new Group[ca.length];\n    List<Chain> model = new ArrayList<Chain>();\n    int apos = -1;\n    for (Atom a : ca) {\n        apos++;\n        Group parentG = a.getGroup();\n        Chain parentC = parentG.getChain();\n        Chain newChain = null;\n        for (Chain c : model) {\n            if (c.getName().equals(parentC.getName())) {\n                newChain = c;\n                break;\n            }\n        }\n        if (newChain == null) {\n            newChain = new ChainImpl();\n            newChain.setName(parentC.getName());\n            model.add(newChain);\n        }\n        Group ng = (Group) parentG.clone();\n        newGroup[apos] = ng;\n        newChain.addGroup(ng);\n    }\n    return newGroup;\n}","repo_id":"9","comment":"/**\n * Clone a set of representative Atoms, but returns the parent groups\n *\n * @param ca\n *            Atom array\n * @return Group array\n */\n","repo_name":"biojava-master/","id":1037,"method_signature":"Group[] cloneGroups(Atom[])"}