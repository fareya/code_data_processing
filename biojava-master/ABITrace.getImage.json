{"callee_method_names":["BufferedImage.createGraphics","String.toCharArray","Graphics2D.setBackground","Graphics2D.clearRect","Graphics2D.setColor","Graphics2D.drawLine","Graphics2D.setColor","Graphics2D.drawLine","Graphics2D.setColor","Graphics2D.drawLine","Graphics2D.setColor","Graphics2D.drawLine","Graphics2D.drawLine","Graphics2D.drawLine","Graphics2D.drawString","Graphics2D.setColor","Graphics2D.setColor","Graphics2D.setColor","Graphics2D.setColor","Graphics2D.setColor","Graphics2D.drawChars","Graphics2D.setColor"],"method_name":"ABITrace.getImage","method_implementation":"{\n    BufferedImage out = new BufferedImage(traceLength * widthScale, imageHeight, BufferedImage.TYPE_BYTE_INDEXED);\n    Graphics2D g = out.createGraphics();\n    Color acolor = Color.green.darker();\n    Color ccolor = Color.blue;\n    Color gcolor = Color.black;\n    Color tcolor = Color.red;\n    Color ncolor = Color.pink;\n    double scale = calculateScale(imageHeight);\n    int[] bc = baseCalls;\n    char[] seq = sequence.toCharArray();\n    g.setBackground(Color.white);\n    g.clearRect(0, 0, traceLength * widthScale, imageHeight);\n    int here = 0;\n    int basenum = 0;\n    for (int q = 1; q <= 5; q++) {\n        for (int x = 0; x <= traceLength - 2; x++) {\n            if (q == 1) {\n                g.setColor(acolor);\n                g.drawLine(widthScale * x, transmute(A[x], imageHeight, scale), widthScale * (x + 1), transmute(A[x + 1], imageHeight, scale));\n            }\n            if (q == 2) {\n                g.setColor(ccolor);\n                g.drawLine(widthScale * x, transmute(C[x], imageHeight, scale), widthScale * (x + 1), transmute(C[x + 1], imageHeight, scale));\n            }\n            if (q == 3) {\n                g.setColor(tcolor);\n                g.drawLine(widthScale * x, transmute(T[x], imageHeight, scale), widthScale * (x + 1), transmute(T[x + 1], imageHeight, scale));\n            }\n            if (q == 4) {\n                g.setColor(gcolor);\n                g.drawLine(widthScale * x, transmute(G[x], imageHeight, scale), widthScale * (x + 1), transmute(G[x + 1], imageHeight, scale));\n            }\n            if (q == 5) {\n                if ((here > bc.length - 1) || (basenum > seq.length - 1))\n                    break;\n                if (bc[here] == x) {\n                    g.drawLine(widthScale * x, transmute(-2, imageHeight, 1.0), widthScale * x, transmute(-7, imageHeight, 1.0));\n                    if (//if the basecount is divisible by ten\n                    (basenum + 1) % 10 == 0) //add a number\n                    {\n                        g.drawLine(widthScale * x, transmute(-20, imageHeight, 1.0), widthScale * x, transmute(-25, imageHeight, 1.0));\n                        g.drawString(Integer.toString(basenum + 1), widthScale * x - 3, transmute(-36, imageHeight, 1.0));\n                    }\n                    switch(seq[basenum]) {\n                        case 'A':\n                        case 'a':\n                            g.setColor(acolor);\n                            break;\n                        case 'C':\n                        case 'c':\n                            g.setColor(ccolor);\n                            break;\n                        case 'G':\n                        case 'g':\n                            g.setColor(gcolor);\n                            break;\n                        case 'T':\n                        case 't':\n                            g.setColor(tcolor);\n                            break;\n                        default:\n                            g.setColor(ncolor);\n                    }\n                    g.drawChars(seq, basenum, 1, widthScale * x - 3, transmute(-18, imageHeight, 1.0));\n                    g.setColor(Color.black);\n                    here++;\n                    basenum++;\n                }\n            }\n        }\n    }\n    return out;\n}","repo_id":"9","comment":"/**\n * Returns a BufferedImage that represents the entire trace. The height can be set precisely in\n * pixels, the width in pixels is determined by the scaling factor times the number\n * of points in the trace (<code>getTraceLength()<\/code>). The entire trace is represented\n * in the returned image.\n *\n * @param imageHeight - desired height of the image in pixels.\n * @param widthScale - how many horizontal pixels to use to represent a single x-coordinate (try 2).\n * @return BufferedImage image\n */\n","repo_name":"biojava-master/","id":2865,"method_signature":"BufferedImage getImage(int, int)"}