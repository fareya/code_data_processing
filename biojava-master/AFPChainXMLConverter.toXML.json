{"callee_method_ids":[487],"callee_method_names":["PrettyXMLWriter.openTag","AFPChain.getBlockNum","PrettyXMLWriter.openTag","PrettyXMLWriter.closeTag","PrettyXMLWriter.closeTag","PrintWriter.close"],"method_name":"AFPChainXMLConverter.toXML","method_implementation":"{\n    PrintWriter writer = new PrintWriter(swriter);\n    PrettyXMLWriter xml = new PrettyXMLWriter(writer);\n    xml.openTag(\"AFPChain\");\n    printXMLHeader(xml, afpChain);\n    // that is the initial alignment...\n    // we don't serialize that at the present.\n    //int[] blockResSize = afpChain.getBlockResSize();\n    //int[][][] blockResList = afpChain.getBlockResList();\n    // get the alignment blocks\n    int blockNum = afpChain.getBlockNum();\n    //int[] optLen       = afpChain.getOptLen();\n    //int[] blockSize    = afpChain.getBlockSize();\n    for (int bk = 0; bk < blockNum; bk++) {\n        xml.openTag(\"block\");\n        printXMLBlockHeader(xml, afpChain, bk);\n        if (ca1 == null || ca2 == null) {\n            try {\n                printXMLEQRKnownPositions(xml, afpChain, bk);\n            } catch (StructureException ex) {\n                throw new IOException(ex.getMessage());\n            }\n        } else\n            printXMLEQRInferPositions(xml, afpChain, bk, ca1, ca2);\n        printXMLMatrixShift(xml, afpChain, bk);\n        xml.closeTag(\"block\");\n    }\n    xml.closeTag(\"AFPChain\");\n    writer.close();\n}","repo_id":"9","comment":"/**\n * Write the XML representation to a StringWriter\n *\n * @param afpChain\n * @param swriter\n * @throws IOException\n */\n","repo_name":"biojava-master/","id":528,"method_signature":"void toXML(AFPChain, StringWriter, Atom[], Atom[])"}