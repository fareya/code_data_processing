{"callee_method_ids":[976,976,977,977,977,977,977,957,957,959,959],"callee_method_names":["Structure.getPDBHeader","Structure.getPDBHeader","Map<Integer, BioAssemblyInfo>.size","Map<Integer, BioAssemblyInfo>.size","Map<Integer, BioAssemblyInfo>.keySet","Map<Integer, BioAssemblyInfo>.keySet","Map<Integer, BioAssemblyInfo>.values","Map<Integer, BioAssemblyInfo>.values","List<BioAssemblyInfo>.size","List<BioAssemblyInfo>.get","List<BioAssemblyInfo>.get","BioAssemblyInfo.getId","BioAssemblyInfo.getId","BioAssemblyInfo.getTransforms","BioAssemblyInfo.getTransforms","BioAssemblyInfo.getTransforms","BioAssemblyInfo.getTransforms","BioAssemblyInfo.getTransforms","BiologicalAssemblyTransformation.getChainId","BiologicalAssemblyTransformation.getChainId","BiologicalAssemblyTransformation.getTransformationMatrix","BiologicalAssemblyTransformation.getTransformationMatrix"],"method_name":"TestMmtfRoundTrip.checkBioAssemblies1","method_implementation":"{\n    Map<Integer, BioAssemblyInfo> expecteds = structOne.getPDBHeader().getBioAssemblies();\n    Map<Integer, BioAssemblyInfo> actuals = structTwo.getPDBHeader().getBioAssemblies();\n    assertEquals(expecteds.size(), actuals.size());\n    assertEquals(new ArrayList<>(expecteds.keySet()), new ArrayList<>(actuals.keySet()));\n    List<BioAssemblyInfo> assemblies1 = new ArrayList<>(expecteds.values());\n    List<BioAssemblyInfo> assemblies2 = new ArrayList<>(actuals.values());\n    for (int i = 0; i < assemblies1.size(); i++) {\n        BioAssemblyInfo info1 = assemblies1.get(i);\n        BioAssemblyInfo info2 = assemblies2.get(i);\n        assertEquals(info1.getId(), info2.getId());\n        assertEquals(info1.getTransforms().size(), info2.getTransforms().size());\n        for (int j = 0; j < info1.getTransforms().size(); j++) {\n            BiologicalAssemblyTransformation trans1 = info1.getTransforms().get(j);\n            BiologicalAssemblyTransformation trans2 = info2.getTransforms().get(j);\n            assertEquals(trans1.getChainId(), trans2.getChainId());\n            assertTrue(trans1.getTransformationMatrix().epsilonEquals(trans2.getTransformationMatrix(), 0.000001));\n        }\n    }\n}","repo_id":"9","comment":"/**\n * Checks consistency of bioassemblies\n * @param structOne the first input structure\n * @param structTwo the second input structure\n */\n","repo_name":"biojava-master/","id":2244,"method_signature":"void checkBioAssemblies1(Structure, Structure)"}