{"callee_method_ids":[628,633],"callee_method_names":["AtomCache.getStructure","List<ResidueRangeAndLength>.get","List<ResidueRangeAndLength>.get","AtomCache.getStructureForDomain","Structure.getPolyChains","Structure.getPolyChainByPDB","Structure.getPolyChainByPDB","Chain.getAtomGroups","Chain.getAtomGroups"],"method_name":"AtomCacheTest.testGetStructureForDomain1","method_implementation":"{\n    // note that prior to Apr 2023, the example here was 1h6w, but it was obsoleted\n    String ranges = \"A:246-262,B:263-345\";\n    Structure whole = cache.getStructure(\"3bzy\");\n    AtomPositionMap map = new AtomPositionMap(StructureTools.getAllAtomArray(whole), AtomPositionMap.ANYTHING_MATCHER);\n    List<ResidueRangeAndLength> rrs = ResidueRangeAndLength.parseMultiple(ranges, map);\n    int expectedLengthA = rrs.get(0).getLength();\n    int expectedLengthB = rrs.get(1).getLength();\n    Structure structure = cache.getStructureForDomain(\"d3bzy.1\");\n    assertEquals(2, structure.getPolyChains().size());\n    Chain a = structure.getPolyChainByPDB(\"A\");\n    Chain b = structure.getPolyChainByPDB(\"B\");\n    assertEquals(expectedLengthA, a.getAtomGroups().size());\n    assertEquals(expectedLengthB, b.getAtomGroups().size());\n}","repo_id":"9","comment":"/**\n * Tests {@link AtomCache#getStructureForDomain(String)} on a multi-chain domain with no ligands but an explicit range (not whole-chain).\n */\n","repo_name":"biojava-master/","id":2178,"method_signature":"void testGetStructureForDomain1()"}