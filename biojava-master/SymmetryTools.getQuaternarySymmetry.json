{"callee_method_ids":[1633,1627,1631],"callee_method_names":["List<Atom[]>.stream","SubunitClustererParameters.setClustererMethod","SubunitClustererParameters.setRMSDThreshold","SubunitClustererParameters.setStructureCoverageThreshold"],"method_name":"SymmetryTools.getQuaternarySymmetry","method_implementation":"{\n    // Obtain the subunits of the repeats\n    List<Atom[]> atoms = toRepeatsAlignment(result).getAtomArrays();\n    List<Subunit> subunits = atoms.stream().map(a -> new Subunit(a, null, null, null)).collect(Collectors.toList());\n    // The clustering thresholds are set to 0 so that all always merged\n    SubunitClustererParameters cp = new SubunitClustererParameters();\n    cp.setClustererMethod(SubunitClustererMethod.STRUCTURE);\n    cp.setRMSDThreshold(10.0);\n    cp.setStructureCoverageThreshold(0.0);\n    QuatSymmetryParameters sp = new QuatSymmetryParameters();\n    QuatSymmetryResults gSymmetry = QuatSymmetryDetector.calcGlobalSymmetry(subunits, sp, cp);\n    return gSymmetry;\n}","repo_id":"9","comment":"/**\n * Given a symmetry result, it calculates the overall global symmetry,\n * factoring out the alignment and detection steps of\n * {@link QuatSymmetryDetector} algorithm.\n *\n * @param result\n *            symmetry result\n * @return global symmetry results\n * @throws StructureException\n */\n","repo_name":"biojava-master/","id":2046,"method_signature":"QuatSymmetryResults getQuaternarySymmetry(CeSymmResult)"}