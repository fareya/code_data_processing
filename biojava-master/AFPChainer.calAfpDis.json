{"callee_method_ids":[484,431],"callee_method_names":["AFPChain.getAfpSet","AFPChain.getDisTable1","AFPChain.getDisTable2","FatCatParameters.getFragLen","FatCatParameters.getAfpDisCut","FatCatParameters.getDisCut","FatCatParameters.getFragLenSq","List<AFP>.get","List<AFP>.get","List<AFP>.get","List<AFP>.get","Matrix.get","Matrix.get"],"method_name":"AFPChainer.calAfpDis","method_implementation":"{\n    List<AFP> afpSet = afpChain.getAfpSet();\n    Matrix disTable1 = afpChain.getDisTable1();\n    Matrix disTable2 = afpChain.getDisTable2();\n    int fragLen = params.getFragLen();\n    double afpDisCut = params.getAfpDisCut();\n    double disCut = params.getDisCut();\n    double fragLenSq = params.getFragLenSq();\n    int i, j, ai, bi, aj, bj;\n    double d;\n    double rms = 0;\n    for (i = 0; i < fragLen; i++) {\n        ai = afpSet.get(afp1).getP1() + i;\n        bi = afpSet.get(afp1).getP2() + i;\n        for (j = 0; j < fragLen; j++) {\n            aj = afpSet.get(afp2).getP1() + j;\n            bj = afpSet.get(afp2).getP2() + j;\n            d = disTable1.get(aj, ai) - disTable2.get(bj, bi);\n            rms += d * d;\n            if (rms > afpDisCut) {\n                return (disCut);\n            }\n        }\n    }\n    return (Math.sqrt(rms / fragLenSq));\n}","repo_id":"9","comment":"/**\n * \t//return the root mean square of the distance matrix between the residues\n * \t//from the segments that form the given AFP list\n * \t//this value can be a measurement (2) for the connectivity of the AFPs\n * \t//and its calculation is quicker than the measurement (1), rmsd\n * \t//currently only deal with AFP pair\n * //\n * //           |-d1--|\n * //          |--d2---|\n * //         |---d3----|\n * \t//-----------------------------------------------------------------------\n * \t//this module is optimized\n *\n *  @param afp1\n *  @param afp2\n *  @return\n */\n","repo_name":"biojava-master/","id":416,"method_signature":"double calAfpDis(int, int, FatCatParameters, AFPChain)"}