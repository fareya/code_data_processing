{"callee_method_ids":[641],"callee_method_names":["AtomCache.setFiletype","List<Structure>.size","List<Structure>.size","List<Structure>.get","List<Structure>.get","List<Structure>.get","List<Structure>.get","List<Structure>.get","List<Structure>.get","List<Structure>.get","List<Structure>.get","List<Structure>.get","List<Structure>.get","List<Structure>.get"],"method_name":"TestBioassemblies.test4TTX","method_implementation":"{\n    AtomCache prevAtomCache = StructureIO.getAtomCache();\n    AtomCache cache = new AtomCache();\n    cache.setFiletype(StructureFiletype.CIF);\n    StructureIO.setAtomCache(cache);\n    List<Structure> multiModelBioAssemblies = StructureIO.getBiologicalAssemblies(\"4TTX\", true);\n    List<Structure> flattenedBioAssemblies = StructureIO.getBiologicalAssemblies(\"4TTX\", false);\n    // 3 bioassemblies in this case\n    assertEquals(3, multiModelBioAssemblies.size());\n    assertEquals(3, flattenedBioAssemblies.size());\n    // checking that we have 1 model only\n    assertEquals(1, multiModelBioAssemblies.get(0).nrModels());\n    assertEquals(1, flattenedBioAssemblies.get(0).nrModels());\n    // the 3 bioassemblies are dimers\n    assertEquals(2, multiModelBioAssemblies.get(0).getPolyChains().size());\n    assertEquals(2, flattenedBioAssemblies.get(0).getPolyChains().size());\n    assertEquals(2, multiModelBioAssemblies.get(1).getPolyChains().size());\n    assertEquals(2, flattenedBioAssemblies.get(1).getPolyChains().size());\n    assertEquals(2, multiModelBioAssemblies.get(2).getPolyChains().size());\n    assertEquals(2, flattenedBioAssemblies.get(2).getPolyChains().size());\n    // all 3 flattened bioassemblies have operator id 1 in their new chain ids\n    assertEquals(\"1\", flattenedBioAssemblies.get(0).getPolyChains().get(0).getId().split(\"_\")[1]);\n    assertEquals(\"1\", flattenedBioAssemblies.get(1).getPolyChains().get(0).getId().split(\"_\")[1]);\n    assertEquals(\"1\", flattenedBioAssemblies.get(2).getPolyChains().get(0).getId().split(\"_\")[1]);\n    StructureIO.setAtomCache(prevAtomCache);\n}","repo_id":"9","comment":"/**\n * A test for an entry with a biounit that is a subset of the AU\n * @throws StructureException\n * @throws IOException\n */\n","repo_name":"biojava-master/","id":155,"method_signature":"void test4TTX()"}