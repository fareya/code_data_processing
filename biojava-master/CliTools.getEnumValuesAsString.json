{"callee_method_names":["Class<T>.getEnumConstants","StringBuilder.append","T[].name","StringBuilder.append","T[].name","StringBuilder.append","StringBuilder.append","StringBuilder.append","T[].name","StringBuilder.toString"],"method_name":"CliTools.getEnumValuesAsString","method_implementation":"{\n    //ScoringStrategy[] vals = ScoringStrategy.values();\n    T[] vals = enumClass.getEnumConstants();\n    StringBuilder str = new StringBuilder();\n    if (vals.length == 1) {\n        str.append(vals[0].name());\n    } else if (vals.length > 1) {\n        for (int i = 0; i < vals.length - 1; i++) {\n            str.append(vals[i].name());\n            str.append(\", \");\n        }\n        str.append(\"or \");\n        str.append(vals[vals.length - 1].name());\n    }\n    return str.toString();\n}","repo_id":"9","comment":"/**\n * Constructs a comma-separated list of values for an enum.\n *\n * Example:\n * > getEnumValues(ScoringStrategy.class)\n * \"CA_SCORING, SIDE_CHAIN_SCORING, SIDE_CHAIN_ANGLE_SCORING, CA_AND_SIDE_CHAIN_ANGLE_SCORING, or SEQUENCE_CONSERVATION\"\n * @param enumClass\n * @return\n */\n","repo_name":"biojava-master/","id":611,"method_signature":"String getEnumValuesAsString(Class)"}