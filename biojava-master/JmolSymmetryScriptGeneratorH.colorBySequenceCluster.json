{"callee_method_ids":[1971,1885,1884],"callee_method_names":["HelixAxisAligner.getSubunits","QuatSymmetrySubunits.getSubunitCount","QuatSymmetrySubunits.getModelNumbers","QuatSymmetrySubunits.getChainIds","QuatSymmetrySubunits.getClusterIds","List<Integer>.get","Map<Color4f, List<String>>.get","Map<Color4f, List<String>>.put","List<String>.add"],"method_name":"JmolSymmetryScriptGeneratorH.colorBySequenceCluster","method_implementation":"{\n    QuatSymmetrySubunits subunits = helixAxisAligner.getSubunits();\n    int n = subunits.getSubunitCount();\n    List<Integer> modelNumbers = subunits.getModelNumbers();\n    List<String> chainIds = subunits.getChainIds();\n    List<Integer> seqClusterIds = subunits.getClusterIds();\n    int clusters = Collections.max(seqClusterIds) + 1;\n    Color[] col = ColorBrewer.BrBG.getColorPalette(clusters);\n    Color4f[] colors = ColorConverter.convertColor4f(col);\n    Map<Color4f, List<String>> colorMap = new HashMap<Color4f, List<String>>();\n    for (int i = 0; i < n; i++) {\n        Color4f c = colors[seqClusterIds.get(i)];\n        List<String> ids = colorMap.get(c);\n        if (ids == null) {\n            ids = new ArrayList<String>();\n            colorMap.put(c, ids);\n        }\n        String id = getChainSpecification(modelNumbers, chainIds, i);\n        ids.add(id);\n    }\n    String coloring = defaultColoring + getJmolColorScript(colorMap);\n    return coloring;\n}","repo_id":"9","comment":"/**\n * Returns a Jmol script that colors subunits by their sequence cluster ids.\n * @return Jmol script\n */\n","repo_name":"biojava-master/","id":3419,"method_signature":"String colorBySequenceCluster()"}