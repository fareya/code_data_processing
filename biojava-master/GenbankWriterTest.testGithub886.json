{"callee_method_ids":[3080],"callee_method_names":["DNASequence.setAccession","AbstractFeature.setLocation","AbstractFeature.addQualifier","AbstractFeature.addQualifier","AbstractFeature.addQualifier","AbstractFeature.addQualifier","AbstractFeature.addQualifier","AbstractFeature.addQualifier","AbstractFeature.addQualifier","DNASequence.addFeature","ByteArrayOutputStream.close","ByteArrayOutputStream.toByteArray","DNASequence.getFeaturesByType","AbstractFeature.getQualifiers","Map<String, List<Qualifier>>.get","Map<String, List<Qualifier>>.get","Map<String, List<Qualifier>>.get","Map<String, List<Qualifier>>.get","Map<String, List<Qualifier>>.get","Map<String, List<Qualifier>>.get","Map<String, List<Qualifier>>.get","Map<String, List<Qualifier>>.get","Map<String, List<Qualifier>>.get","Map<String, List<Qualifier>>.get","Map<String, List<Qualifier>>.get","Map<String, List<Qualifier>>.get","Map<String, List<Qualifier>>.get","Map<String, List<Qualifier>>.get"],"method_name":"GenbankWriterTest.testGithub886","method_implementation":"{\n    DNASequence seq = new DNASequence(\"ATGC\");\n    seq.setAccession(new AccessionID(\".\"));\n    AbstractFeature feature = new TextFeature(\"CDS\", \"source\", \"short description\", \"description\");\n    feature.setLocation(new SimpleLocation(1, 10, Strand.POSITIVE));\n    // no percent symbols in key or value\n    feature.addQualifier(\"note1\", new Qualifier(\"note1\", \"50\", true));\n    // percent symbol in key\n    feature.addQualifier(\"note2\", new Qualifier(\"%note2\", \"50\", true));\n    feature.addQualifier(\"note3\", new Qualifier(\"not%e3\", \"50\", true));\n    feature.addQualifier(\"note4\", new Qualifier(\"note4%\", \"50\", true));\n    // percent symbol in value\n    feature.addQualifier(\"note5\", new Qualifier(\"note5\", \"%50\", true));\n    feature.addQualifier(\"note6\", new Qualifier(\"note6\", \"5%0\", true));\n    feature.addQualifier(\"note7\", new Qualifier(\"note7\", \"50%\", true));\n    seq.addFeature(feature);\n    ByteArrayOutputStream fragwriter = new ByteArrayOutputStream();\n    GenbankWriterHelper.writeNucleotideSequence(fragwriter, Arrays.asList(seq), GenbankWriterHelper.LINEAR_DNA);\n    fragwriter.close();\n    //System.out.println(fragwriter.toString().replaceAll(\"\\r\\n\", \"\\n\"));\n    // now read in the file that was created and check that the qualifiers were created correctly\n    InputStream readerInputStream = new ByteArrayInputStream(fragwriter.toByteArray());\n    DNASequence newSeq = GenbankReaderHelper.readGenbankDNASequence(readerInputStream).values().iterator().next();\n    AbstractFeature newFeature = (TextFeature) seq.getFeaturesByType(\"CDS\").get(0);\n    Map<String, List<Qualifier>> newQualifiers = newFeature.getQualifiers();\n    assertEquals(\"note1\", newQualifiers.get(\"note1\").get(0).getName());\n    assertEquals(\"50\", newQualifiers.get(\"note1\").get(0).getValue());\n    assertEquals(\"%note2\", newQualifiers.get(\"note2\").get(0).getName());\n    assertEquals(\"50\", newQualifiers.get(\"note2\").get(0).getValue());\n    assertEquals(\"not%e3\", newQualifiers.get(\"note3\").get(0).getName());\n    assertEquals(\"50\", newQualifiers.get(\"note3\").get(0).getValue());\n    assertEquals(\"note4%\", newQualifiers.get(\"note4\").get(0).getName());\n    assertEquals(\"50\", newQualifiers.get(\"note4\").get(0).getValue());\n    assertEquals(\"note5\", newQualifiers.get(\"note5\").get(0).getName());\n    assertEquals(\"%50\", newQualifiers.get(\"note5\").get(0).getValue());\n    assertEquals(\"note6\", newQualifiers.get(\"note6\").get(0).getName());\n    assertEquals(\"5%0\", newQualifiers.get(\"note6\").get(0).getValue());\n    assertEquals(\"note7\", newQualifiers.get(\"note7\").get(0).getName());\n    assertEquals(\"50%\", newQualifiers.get(\"note7\").get(0).getValue());\n}","repo_id":"9","comment":"/**\n * String Formatter error when key or value of Qualifier has character \"%\"\n * https://github.com/biojava/biojava/issues/886\n */\n","repo_name":"biojava-master/","id":3222,"method_signature":"void testGithub886()"}