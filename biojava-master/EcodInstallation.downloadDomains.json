{"callee_method_names":["ReadWriteLock.writeLock","Logger.trace","Logger.info","Logger.error","Logger.trace","ReadWriteLock.writeLock"],"method_name":"EcodInstallation.downloadDomains","method_implementation":"{\n    domainsFileLock.writeLock().lock();\n    logger.trace(\"LOCK writelock\");\n    try {\n        URL domainsURL = new URL(url + DOMAINS_PATH + getDomainFilename());\n        File localFile = getDomainFile();\n        logger.info(\"Downloading {} to: {}\", domainsURL, localFile);\n        FileDownloadUtils.createValidationFiles(domainsURL, localFile, null, FileDownloadUtils.Hash.UNKNOWN);\n        FileDownloadUtils.downloadFile(domainsURL, localFile);\n        if (!FileDownloadUtils.validateFile(localFile))\n            throw new IOException(\"Downloaded file invalid: \" + localFile);\n    } catch (MalformedURLException e) {\n        logger.error(\"Malformed url: \" + url + DOMAINS_PATH + getDomainFilename(), e);\n    } finally {\n        logger.trace(\"UNLOCK writelock\");\n        domainsFileLock.writeLock().unlock();\n    }\n}","repo_id":"9","comment":"/**\n * Downloads the domains file +/- its validation metadata, overwriting any existing file\n * @throws IOException in cases of file I/O, including failure to download a healthy (non-corrupted) file.\n */\n","repo_name":"biojava-master/","id":1813,"method_signature":"void downloadDomains()"}