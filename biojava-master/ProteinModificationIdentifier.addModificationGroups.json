{"callee_method_ids":[311,312,313],"callee_method_names":["ModificationCondition.getComponents","Component.getPdbccIds","Component.isNTerminal","Component.isCTerminal","Map<Component, Set<Component>>.get","Map<Component, Set<Component>>.put","Set<Component>.add","Map<Component, Set<Component>>.get","Group.getPDBName","Map<Component, Set<Component>>.get","Map<Component,Set<Group>>.get","Map<Component,Set<Group>>.put","Set<Group>.add","List<Group>.isEmpty","Map<Component, Set<Component>>.get","Group.getPDBName","Map<Component, Set<Component>>.get","Map<Component,Set<Group>>.get","Map<Component,Set<Group>>.put","Set<Group>.add","List<Group>.size","List<Group>.get","Map<Component, Set<Component>>.get","Map<Component, Set<Component>>.get","Group.getPDBName","Map<Component,Set<Group>>.get","Map<Component,Set<Group>>.put","Set<Group>.add","List<Group>.contains","List<Group>.size","List<Group>.get","Map<Component, Set<Component>>.get","Map<Component, Set<Component>>.get","Group.getPDBName","Map<Component,Set<Group>>.get","Map<Component,Set<Group>>.put","Set<Group>.add","List<Group>.contains"],"method_name":"ProteinModificationIdentifier.addModificationGroups","method_implementation":"{\n    if (residues == null || ligands == null || modifications == null) {\n        throw new IllegalArgumentException(\"Null argument(s).\");\n    }\n    Map<Component, Set<Component>> mapSingleMultiComps = new HashMap<Component, Set<Component>>();\n    for (ProteinModification mod : modifications) {\n        ModificationCondition condition = mod.getCondition();\n        for (Component comp : condition.getComponents()) {\n            for (String pdbccId : comp.getPdbccIds()) {\n                Component single = Component.of(Collections.singleton(pdbccId), comp.isNTerminal(), comp.isCTerminal());\n                Set<Component> mult = mapSingleMultiComps.get(single);\n                if (mult == null) {\n                    mult = new HashSet<Component>();\n                    mapSingleMultiComps.put(single, mult);\n                }\n                mult.add(comp);\n            }\n        }\n    }\n    {\n        // ligands\n        Set<Component> ligandsWildCard = mapSingleMultiComps.get(Component.of(\"*\"));\n        for (Group group : ligands) {\n            String pdbccId = group.getPDBName().trim();\n            Set<Component> comps = mapSingleMultiComps.get(Component.of(pdbccId));\n            for (Component comp : unionComponentSet(ligandsWildCard, comps)) {\n                Set<Group> gs = saveTo.get(comp);\n                if (gs == null) {\n                    gs = new LinkedHashSet<Group>();\n                    saveTo.put(comp, gs);\n                }\n                gs.add(group);\n            }\n        }\n    }\n    {\n        // residues\n        if (residues.isEmpty()) {\n            return;\n        }\n        Set<Component> residuesWildCard = mapSingleMultiComps.get(Component.of(\"*\"));\n        // for all residues\n        for (Group group : residues) {\n            String pdbccId = group.getPDBName().trim();\n            Set<Component> comps = mapSingleMultiComps.get(Component.of(pdbccId));\n            for (Component comp : unionComponentSet(residuesWildCard, comps)) {\n                Set<Group> gs = saveTo.get(comp);\n                if (gs == null) {\n                    gs = new LinkedHashSet<Group>();\n                    saveTo.put(comp, gs);\n                }\n                gs.add(group);\n            }\n        }\n        // for N-terminal\n        int nRes = residues.size();\n        int iRes = 0;\n        Group res;\n        do {\n            // for all ligands on N terminal and the first residue\n            res = residues.get(iRes++);\n            Set<Component> nTermWildCard = mapSingleMultiComps.get(Component.of(\"*\", true, false));\n            Set<Component> comps = mapSingleMultiComps.get(Component.of(res.getPDBName(), true, false));\n            for (Component comp : unionComponentSet(nTermWildCard, comps)) {\n                Set<Group> gs = saveTo.get(comp);\n                if (gs == null) {\n                    gs = new LinkedHashSet<Group>();\n                    saveTo.put(comp, gs);\n                }\n                gs.add(res);\n            }\n        } while (iRes < nRes && ligands.contains(res));\n        // for C-terminal\n        iRes = residues.size() - 1;\n        do {\n            // for all ligands on C terminal and the last residue\n            res = residues.get(iRes--);\n            Set<Component> cTermWildCard = mapSingleMultiComps.get(Component.of(\"*\", false, true));\n            Set<Component> comps = mapSingleMultiComps.get(Component.of(res.getPDBName(), false, true));\n            for (Component comp : unionComponentSet(cTermWildCard, comps)) {\n                Set<Group> gs = saveTo.get(comp);\n                if (gs == null) {\n                    gs = new LinkedHashSet<Group>();\n                    saveTo.put(comp, gs);\n                }\n                gs.add(res);\n            }\n        } while (iRes >= 0 && ligands.contains(res));\n    }\n}","repo_id":"9","comment":"/**\n * @param modifications a set of {@link ProteinModification}s.\n * @param residues\n * @param ligands\n * @param saveTo save result to\n * @return map from component to list of corresponding residues\n *  in the chain.\n */\n","repo_name":"biojava-master/","id":302,"method_signature":"void addModificationGroups(Set, List, List, Map)"}