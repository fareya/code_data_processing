{"callee_method_ids":[489,490,487],"callee_method_names":["StringWriter.append","StringWriter.append","AFPChain.getName1","StringWriter.append","StringWriter.append","StringWriter.append","AFPChain.getName2","StringWriter.append","StringWriter.append","AFPChain.getOptAln","AFPChain.getOptLen","AFPChain.getBlockNum","StringWriter.append","Atom.getGroup","StringWriter.append","StringWriter.append","Atom.getGroup","StringWriter.append","StringWriter.append","Atom.getGroup","StringWriter.append","StringWriter.append","Atom.getGroup","StringWriter.append","StringWriter.append","Atom.getGroup","StringWriter.append","StringWriter.append","Atom.getGroup","StringWriter.append","StringWriter.toString"],"method_name":"AfpChainWriter.toAlignedPairs","method_implementation":"{\n    StringWriter pairs = new StringWriter();\n    //Write structure names & PDB codes\n    pairs.append(\"#Struct1:\\t\");\n    pairs.append(afpChain.getName1());\n    pairs.append(\"\\n\");\n    pairs.append(\"#Struct2:\\t\");\n    pairs.append(afpChain.getName2());\n    pairs.append(\"\\n\");\n    //Write optimally aligned pairs\n    pairs.append(\"#Num1\\tChain1\\tAA1\\tNum2\\tChain2\\tAA2\\n\");\n    int[][][] optAln = afpChain.getOptAln();\n    int[] blockLen = afpChain.getOptLen();\n    for (int block = 0; block < afpChain.getBlockNum(); block++) {\n        for (int i = 0; i < blockLen[block]; i++) {\n            Atom atom1 = ca1[optAln[block][0][i]];\n            Atom atom2 = ca2[optAln[block][1][i]];\n            pairs.append(atom1.getGroup().getResidueNumber().toString());\n            pairs.append('\\t');\n            pairs.append(atom1.getGroup().getChain().getName());\n            pairs.append('\\t');\n            pairs.append(atom1.getGroup().getPDBName());\n            pairs.append('\\t');\n            pairs.append(atom2.getGroup().getResidueNumber().toString());\n            pairs.append('\\t');\n            pairs.append(atom2.getGroup().getChain().getName());\n            pairs.append('\\t');\n            pairs.append(atom2.getGroup().getPDBName());\n            pairs.append('\\n');\n        }\n    }\n    return pairs.toString();\n}","repo_id":"9","comment":"/**\n * Prints the alignment in the simplest form: a list of aligned residues.\n * Format is one line per residue pair, tab delimited:\n * <ul><li>1. PDB number. Includes insertion code<\/li>\n * <li>1. Chain.<\/li>\n * <li>1. Amino Acid. Three letter code.<\/li>\n * <li>2. PDB number.<\/li>\n * <li>2. Chain.<\/li>\n * <li>2. Amino Acid.<\/li>\n * <\/ul>\n * example:\n * <code>152\tA\tALA\t161S\tA\tVAL<\/code>\n * <p>Note that this format loses information about blocks.\n * @param afpChain\n * @param ca1\n * @param ca2\n * @return a String representation of the aligned pairs.\n */\n","repo_name":"biojava-master/","id":515,"method_signature":"String toAlignedPairs(AFPChain, Atom[], Atom[])"}