{"callee_method_names":["List<Atom[]>.size","List<Integer>.size","List<Atom[]>.size","List<Atom[]>.size","List<Atom[]>.get","List<Atom[]>.get","List<Atom[]>.get","List<Atom[]>.get","List<Atom[]>.get","List<Integer>.get","List<Integer>.get"],"method_name":"MultipleAlignmentScorer.getAvgTMScore","method_implementation":"{\n    if (transformed.size() != lengths.size())\n        throw new IllegalArgumentException(\"Input sizes differ.\");\n    double sumTM = 0;\n    int comparisons = 0;\n    for (int r1 = 0; r1 < transformed.size(); r1++) {\n        for (int r2 = r1 + 1; r2 < transformed.size(); r2++) {\n            int len = transformed.get(r1).length;\n            // Remove nulls from both arrays\n            Atom[] ref = new Atom[len];\n            Atom[] aln = new Atom[len];\n            int nonNullLen = 0;\n            for (int c = 0; c < len; c++) {\n                if (transformed.get(r1)[c] != null && transformed.get(r2)[c] != null) {\n                    ref[nonNullLen] = transformed.get(r1)[c];\n                    aln[nonNullLen] = transformed.get(r2)[c];\n                    nonNullLen++;\n                }\n            }\n            // Truncate nulls\n            if (nonNullLen < len) {\n                ref = Arrays.copyOf(ref, nonNullLen);\n                aln = Arrays.copyOf(aln, nonNullLen);\n            }\n            sumTM += Calc.getTMScore(ref, aln, lengths.get(r1), lengths.get(r2));\n            comparisons++;\n        }\n    }\n    return sumTM / comparisons;\n}","repo_id":"9","comment":"/**\n * Calculates the average TMScore all the possible pairwise structure\n * comparisons of the given a set of superimposed Atoms and the original\n * structure lengths.\n * <p>\n * Complexity: T(n,l) = O(l*n^2), if n=number of structures and l=alignment\n * length.\n *\n * @param transformed\n *            aligned Atoms transformed\n * @param lengths\n *            lengths of the structures in residue number\n * @return double Average TMscore\n * @throws StructureException\n */\n","repo_name":"biojava-master/","id":683,"method_signature":"double getAvgTMScore(List, List)"}