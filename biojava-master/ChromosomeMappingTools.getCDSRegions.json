{"callee_method_names":["List<Integer>.size","List<Integer>.get","List<Integer>.get","List<Integer>.remove","List<Integer>.remove","List<Integer>.size","List<Integer>.remove","List<Integer>.add","List<Integer>.remove","List<Integer>.add","List<Integer>.get","List<Integer>.get","List<Range<Integer>>.add"],"method_name":"ChromosomeMappingTools.getCDSRegions","method_implementation":"{\n    // remove exons that are fully landed in UTRs\n    List<Integer> exonStarts = new ArrayList<>(origExonStarts);\n    List<Integer> exonEnds = new ArrayList<>(origExonEnds);\n    int j = 0;\n    for (int i = 0; i < origExonStarts.size(); i++) {\n        if ((origExonEnds.get(i) < cdsStart) || (origExonStarts.get(i) > cdsEnd)) {\n            exonStarts.remove(j);\n            exonEnds.remove(j);\n        } else {\n            j++;\n        }\n    }\n    // remove untranslated regions from exons\n    int nExons = exonStarts.size();\n    exonStarts.remove(0);\n    exonStarts.add(0, cdsStart);\n    exonEnds.remove(nExons - 1);\n    exonEnds.add(cdsEnd);\n    List<Range<Integer>> cdsRegion = new ArrayList<>();\n    for (int i = 0; i < nExons; i++) {\n        Range<Integer> r = Range.closed(exonStarts.get(i), exonEnds.get(i));\n        cdsRegion.add(r);\n    }\n    return cdsRegion;\n}","repo_id":"9","comment":"/**\n * Extracts the exons boundaries in CDS coordinates corresponding to the forward DNA strand.\n *\n * @param origExonStarts The list holding the genetic coordinates pointing to the start positions of the exons (including UTR regions)\n * @param origExonEnds The list holding the genetic coordinates pointing to the end positions of the exons (including UTR regions)\n * @param cdsStart The start position of a coding region\n * @param cdsEnd The end position of a coding region\n *\n * @return the list of genetic positions corresponding to the exons boundaries in CDS coordinates\n */\n","repo_name":"biojava-master/","id":2490,"method_signature":"List<Range<Integer>> getCDSRegions(List, List, int, int)"}