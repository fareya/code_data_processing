{"callee_method_ids":[484],"callee_method_names":["AFPChain.getAfpSet","AFPChain.setAfpIndex","AFPChain.setAfpAftIndex","AFPChain.setAfpBefIndex","AFPChain.getAfpIndex","AFPChain.getAfpAftIndex","AFPChain.getAfpBefIndex","List<AFP>.size","List<AFP>.get","List<AFP>.get","List<AFP>.get","List<AFP>.get","List<AFP>.get","List<AFP>.get"],"method_name":"AFPCalculator.sortAfps","method_implementation":"{\n    List<AFP> afpSet = afpChain.getAfpSet();\n    if (debug)\n        System.err.println(\"entering sortAfps\");\n    int pro1Len = ca1.length;\n    int pro2Len = ca2.length;\n    //the index of (i,j) pair in AFP list, otherwise -1\n    afpChain.setAfpIndex(new int[pro1Len][pro2Len]);\n    //the index of AFP (i,j*) nearest to (i,j), j*<j. if a AFP exits for (i,j), it equals to afpIndex\n    afpChain.setAfpAftIndex(new int[pro1Len][pro2Len]);\n    //the index of AFP (i,j*) nearest to (i,j), j*>j. if a AFP exits for (i,j), it equals to afpIndex\n    afpChain.setAfpBefIndex(new int[pro1Len][pro2Len]);\n    int[][] afpIndex = afpChain.getAfpIndex();\n    int[][] afpAftIndex = afpChain.getAfpAftIndex();\n    int[][] afpBefIndex = afpChain.getAfpBefIndex();\n    for (int i = 0; i < pro1Len; i++) {\n        for (int j = 0; j < pro2Len; j++) {\n            afpIndex[i][j] = afpAftIndex[i][j] = afpBefIndex[i][j] = -1;\n        }\n    }\n    //index the AFP for easy extraction of compatible AFPs\n    int afpNum = afpSet.size();\n    int b0 = 0;\n    for (int a = 0; a < afpNum; a++) {\n        if (a == afpNum - 1 || afpSet.get(a).getP1() != afpSet.get(a + 1).getP1()) {\n            int i = afpSet.get(a).getP1();\n            for (int b = b0; b <= a; b++) {\n                int j = afpSet.get(b).getP2();\n                afpIndex[i][j] = b;\n                afpBefIndex[i][j] = b;\n                afpAftIndex[i][j] = b;\n                if (afpSet.get(b).getP1() != i) {\n                    System.err.println(String.format(\"Warning: wrong afp index %d %d\\n\", i, afpSet.get(b).getP1()));\n                    return;\n                }\n            }\n            for (int k = 1; k < pro2Len; k++) {\n                if (afpBefIndex[i][k] == -1) {\n                    afpBefIndex[i][k] = afpBefIndex[i][k - 1];\n                }\n            }\n            for (int k = pro2Len - 2; k >= 0; k--) {\n                if (afpAftIndex[i][k] == -1) {\n                    afpAftIndex[i][k] = afpAftIndex[i][k + 1];\n                }\n            }\n            b0 = a + 1;\n        }\n    }\n    if (debug)\n        System.err.println(\"done sortAfps\");\n}","repo_id":"9","comment":"//------------------------------------------------------------------\n","repo_name":"biojava-master/","id":428,"method_signature":"void sortAfps(AFPChain, Atom[], Atom[])"}