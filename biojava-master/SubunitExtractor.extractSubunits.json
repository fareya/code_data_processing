{"callee_method_names":["Structure.getPolyChains","char.isProtein","Logger.debug","char.getId","char.getSeqResSequence","List<Subunit>.add","char.getId","Logger.debug","List<Subunit>.size","List<Subunit>.get","List<Subunit>.remove"],"method_name":"SubunitExtractor.extractSubunits","method_implementation":"{\n    // The extracted subunit container\n    List<Subunit> subunits = new ArrayList<Subunit>();\n    for (Chain c : structure.getPolyChains()) {\n        // Only take protein chains\n        if (c.isProtein()) {\n            Atom[] ca = StructureTools.getRepresentativeAtomArray(c);\n            logger.debug(\"Chain \" + c.getId() + \"; CA Atoms: \" + ca.length + \"; SEQRES: \" + c.getSeqResSequence());\n            if (ca.length == 0)\n                continue;\n            subunits.add(new Subunit(ca, c.getId(), null, structure));\n        }\n    }\n    // Calculate the minimum length of a Subunit\n    int adjustedMinLen = calcAdjustedMinimumSequenceLength(subunits, absMinLen, fraction, minLen);\n    logger.debug(\"Adjusted minimum sequence length: {}\", adjustedMinLen);\n    // Filter out short Subunits\n    for (int s = subunits.size() - 1; s >= 0; s--) {\n        if (subunits.get(s).size() < adjustedMinLen)\n            subunits.remove(s);\n    }\n    return subunits;\n}","repo_id":"9","comment":"/**\n * Extract the information of each protein Chain in a Structure and converts\n * them into a List of Subunit. The name of the Subunits is set to\n * {@link Chain#getId()}.\n *\n * @param structure\n *            Structure object with protein Chains\n * @param absMinLen\n *            {@link SubunitClustererParameters#getAbsoluteMinimumSequenceLength()}\n * @param fraction\n *            {@link SubunitClustererParameters#getMinimumSequenceLengthFraction()}\n * @param minLen\n *            {@link SubunitClustererParameters#getMinimumSequenceLength()}\n * @return List of Subunits\n */\n","repo_name":"biojava-master/","id":1653,"method_signature":"List<Subunit> extractSubunits(Structure, int, double, int)"}