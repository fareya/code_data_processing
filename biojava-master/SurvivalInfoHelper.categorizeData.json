{"callee_method_names":["SurvivalInfo.keySet","LinkedHashMap<String, LinkedHashMap<String, Double>>.get","LinkedHashMap<String, LinkedHashMap<String, Double>>.put","LinkedHashMap<String, Double>.put","SurvivalInfo.get","LinkedHashMap<String, LinkedHashMap<String, Double>>.keySet","LinkedHashMap<String, LinkedHashMap<String, Double>>.get","LinkedHashMap<String, Double>.keySet","ArrayList<String>.size","LinkedHashMap<String, Double>.keySet","ArrayList<String>.indexOf","LinkedHashMap<String, Double>.put","LinkedHashMap<String, Double>.keySet","ArrayList<String>.indexOf","LinkedHashMap<String, Double>.put","LinkedHashMap<String, Double>.keySet","LinkedHashMap<String, Double>.put","SurvivalInfo.keySet","LinkedHashMap<String, LinkedHashMap<String, Double>>.get","SurvivalInfo.get","LinkedHashMap<String, Double>.get","SurvivalInfo.put","SurvivalInfo.clear"],"method_name":"SurvivalInfoHelper.categorizeData","method_implementation":"{\n    //Go through and get all variable value pairs\n    LinkedHashMap<String, LinkedHashMap<String, Double>> valueMap = new LinkedHashMap<String, LinkedHashMap<String, Double>>();\n    for (SurvivalInfo si : DataT) {\n        for (String key : si.unknownDataType.keySet()) {\n            LinkedHashMap<String, Double> map = valueMap.get(key);\n            if (map == null) {\n                map = new LinkedHashMap<String, Double>();\n                valueMap.put(key, map);\n            }\n            map.put(si.unknownDataType.get(key), null);\n        }\n    }\n    for (String variable : valueMap.keySet()) {\n        LinkedHashMap<String, Double> values = valueMap.get(variable);\n        if (isCategorical(values)) {\n            ArrayList<String> categories = new ArrayList<String>(values.keySet());\n            //go ahead and put in alphabetical order\n            Collections.sort(categories);\n            if (categories.size() == 2) {\n                for (String value : values.keySet()) {\n                    int index = categories.indexOf(value);\n                    values.put(value, index + 0.0);\n                }\n            } else {\n                for (String value : values.keySet()) {\n                    int index = categories.indexOf(value);\n                    values.put(value, index + 1.0);\n                }\n            }\n        } else {\n            for (String value : values.keySet()) {\n                Double d = Double.parseDouble(value);\n                values.put(value, d);\n            }\n        }\n    }\n    for (SurvivalInfo si : DataT) {\n        for (String key : si.unknownDataType.keySet()) {\n            LinkedHashMap<String, Double> map = valueMap.get(key);\n            String value = si.unknownDataType.get(key);\n            Double d = map.get(value);\n            si.data.put(key, d);\n        }\n    }\n    for (SurvivalInfo si : DataT) {\n        si.unknownDataType.clear();\n    }\n}","repo_id":"9","comment":"/**\n * Take a collection of categorical data and convert it to numeric to be used in cox calculations\n * @param DataT\n */\n","repo_name":"biojava-master/","id":3687,"method_signature":"void categorizeData(ArrayList)"}