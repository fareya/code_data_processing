{"callee_method_names":[],"method_name":"CeCPMain.calculateMinCP","method_implementation":"{\n    CPRange range = new CPRange();\n    // Find the cut point within the alignment.\n    // Either returns the index i of the alignment such that block[i] == ca2len,\n    // or else returns -i-1 where block[i] is the first element > ca2len.\n    int middle = Arrays.binarySearch(block, ca2len);\n    if (middle < 0) {\n        middle = -middle - 1;\n    }\n    // Middle is now the first res after the duplication\n    range.mid = middle;\n    int minCPntermIndex = middle - minCPlength;\n    if (minCPntermIndex >= 0) {\n        range.n = block[minCPntermIndex];\n    } else {\n        range.n = -1;\n    }\n    int minCPctermIndex = middle + minCPlength - 1;\n    if (minCPctermIndex < blockLen) {\n        range.c = block[minCPctermIndex];\n    } else {\n        range.c = ca2len * 2;\n    }\n    // Stub:\n    // Best-case: assume all residues in the termini are aligned\n    //range.n = ca2len - minCPlength;\n    //range.c = ca2len + minCPlength-1;\n    return range;\n}","repo_id":"9","comment":"/**\n * Finds the alignment index of the residues minCPlength before and after\n * the duplication.\n *\n * @param block The permuted block being considered, generally optAln[0][1]\n * @param blockLen The length of the block (in case extra memory was allocated in block)\n * @param ca2len The length, in residues, of the protein specified by block\n * @param minCPlength The minimum number of residues allowed for a CP\n * @return a CPRange with the following components:\n *  <dl><dt>n<\/dt><dd>Index into <code>block<\/code> of the residue such that\n *  \t<code>minCPlength<\/code> residues remain to the end of <code>ca2len<\/code>,\n *  \tor -1 if no residue fits that criterium.<\/dd>\n *  <dt>mid<\/dt><dd>Index of the first residue higher than <code>ca2len<\/code>.<\/dd>\n *  <dt>c<\/dt><dd>Index of <code>minCPlength<\/code>-th residue after ca2len,\n *  \tor ca2len*2 if no residue fits that criterium.<\/dd>\n *  <\/dl>\n */\n","repo_name":"biojava-master/","id":779,"method_signature":"CPRange calculateMinCP(int[], int, int, int)"}