{"callee_method_ids":[1349],"callee_method_names":["Structure.clone","Structure.resetModels","Structure.setEntityInfos","Structure.getChain","Matrix4d.getChainId","List<Chain>.add","Structure.getPolyChainByPDB","Matrix4d.getChainId","Structure.getNonPolyChainsByPDB","Matrix4d.getChainId","Structure.getWaterChainByPDB","Matrix4d.getChainId","List<Chain>.add","List<Chain>.isEmpty","List<Chain>.addAll","List<Chain>.add","Chain.clone","Matrix4d.getTransformationMatrix","Matrix4d.getId","Map<Integer, EntityInfo>.containsKey","Chain.getEntityInfo","Chain.getEntityInfo","Map<Integer, EntityInfo>.put","Chain.getEntityInfo","Structure.addEntityInfo","Map<Integer, EntityInfo>.get","Chain.getEntityInfo","Chain.setEntityInfo","EntityInfo.addChain","Structure.setBiologicalAssembly"],"method_name":"BiologicalAssemblyBuilder.rebuildQuaternaryStructure","method_implementation":"{\n    // ensure that new chains are build in the same order as they appear in the asymmetric unit\n    orderTransformationsByChainId(asymUnit, transformations);\n    Structure s = asymUnit.clone();\n    Map<Integer, EntityInfo> entityInfoMap = new HashMap<>();\n    // this resets all models (not only the first one): this is important for NMR (multi-model)\n    // like that we can be sure we start with an empty structures and we add models or chains to it\n    s.resetModels();\n    s.setEntityInfos(new ArrayList<>());\n    for (BiologicalAssemblyTransformation transformation : transformations) {\n        List<Chain> chainsToTransform = new ArrayList<>();\n        // note: for NMR structures (or any multi-model) we use the first model only and throw away the rest\n        if (useAsymIds) {\n            Chain c = asymUnit.getChain(transformation.getChainId());\n            chainsToTransform.add(c);\n        } else {\n            Chain polyC = asymUnit.getPolyChainByPDB(transformation.getChainId());\n            List<Chain> nonPolyCs = asymUnit.getNonPolyChainsByPDB(transformation.getChainId());\n            Chain waterC = asymUnit.getWaterChainByPDB(transformation.getChainId());\n            if (polyC != null)\n                chainsToTransform.add(polyC);\n            if (!nonPolyCs.isEmpty())\n                chainsToTransform.addAll(nonPolyCs);\n            if (waterC != null)\n                chainsToTransform.add(waterC);\n        }\n        for (Chain c : chainsToTransform) {\n            Chain chain = (Chain) c.clone();\n            Calc.transform(chain, transformation.getTransformationMatrix());\n            String transformId = transformation.getId();\n            // note that the Structure.addChain/Structure.addModel methods set the parent reference to the new Structure\n            if (multiModel)\n                addChainMultiModel(s, chain, transformId);\n            else\n                addChainFlattened(s, chain, transformId);\n            EntityInfo entityInfo;\n            if (!entityInfoMap.containsKey(chain.getEntityInfo().getMolId())) {\n                entityInfo = new EntityInfo(chain.getEntityInfo());\n                entityInfoMap.put(chain.getEntityInfo().getMolId(), entityInfo);\n                s.addEntityInfo(entityInfo);\n            } else {\n                entityInfo = entityInfoMap.get(chain.getEntityInfo().getMolId());\n            }\n            chain.setEntityInfo(entityInfo);\n            entityInfo.addChain(chain);\n        }\n    }\n    s.setBiologicalAssembly(true);\n    return s;\n}","repo_id":"9","comment":"/**\n * Builds a Structure object containing the quaternary structure built from given asymUnit and transformations,\n * by adding symmetry partners as new models.\n * The output Structure will be different depending on the multiModel parameter:\n * <li>\n * the symmetry-expanded chains are added as new models, one per transformId. All original models but\n * the first one are discarded.\n * <\/li>\n * <li>\n * as original with symmetry-expanded chains added with renamed chain ids and names (in the form\n * originalAsymId_transformId and originalAuthId_transformId)\n * <\/li>\n * @param asymUnit\n * @param transformations\n * @param useAsymIds if true use {@link Chain#getId()} to match the ids in the BiologicalAssemblyTransformation (needed if data read from mmCIF),\n * if false use {@link Chain#getName()} for the chain matching (needed if data read from PDB).\n * @param multiModel if true the output Structure will be a multi-model one with one transformId per model,\n * if false the outputStructure will be as the original with added chains with renamed asymIds (in the form originalAsymId_transformId and originalAuthId_transformId).\n * @return\n */\n","repo_name":"biojava-master/","id":970,"method_signature":"Structure rebuildQuaternaryStructure(Structure, List, boolean, boolean)"}