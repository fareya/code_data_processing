{"callee_method_ids":[3381],"callee_method_names":["JmolSymmetryScriptGenerator.getInstantaneousOrientation","JmolSymmetryScriptGenerator.drawPolyhedron","JmolSymmetryScriptGenerator.drawAxes"],"method_name":"SymmetryDisplay.printSymmetryGroup","method_implementation":"{\n    QuatSymmetryResults gSymmetry = SymmetryTools.getQuaternarySymmetry(symm);\n    AxisAligner axes = AxisAligner.getInstance(gSymmetry);\n    // Draw the axes as in the quaternary symmetry\n    JmolSymmetryScriptGenerator scriptGenerator = JmolSymmetryScriptGeneratorPointGroup.getInstance(axes, \"g\");\n    String script = \"save selection; set measurementUnits ANGSTROMS;\" + \"select all; set antialiasDisplay true; autobond=false; \";\n    script += scriptGenerator.getInstantaneousOrientation(0);\n    script += \"restore selection; \";\n    script += scriptGenerator.drawPolyhedron();\n    script += scriptGenerator.drawAxes();\n    script += \"draw axes* on; draw poly* on; \";\n    return script;\n}","repo_id":"9","comment":"/**\n * Given a symmetry alignment, it draws the symmetry group axes and the\n * polyhedron box around the structure. It uses the quaternary symmetry\n * detection code, but tries to factor out the alignment and detection\n * steps.\n *\n * @param symm\n *            CeSymmResult\n * @return\n * @throws StructureException\n */\n","repo_name":"biojava-master/","id":3434,"method_signature":"String printSymmetryGroup(CeSymmResult)"}