{"callee_method_ids":[3637,3659,3657,3609,3609,3607,3659,3657,3659,3606,3632,3634],"callee_method_names":["CoxInfo.getCoefficientsList","ArrayList<SurvivalInfo>.size","ArrayList<SurvivalInfo>.size","ArrayList<SurvivalInfo>.size","ArrayList<SurvivalInfo>.get","ArrayList<Integer>.add","SurvivalInfo.getStrata","SurvivalInfo.getWeight","CoxInfo.getNaiveVariance","CoxInfo.getNaiveVariance","CoxInfo.getVariance","LinkedHashMap<Integer, Double>.get","LinkedHashMap<Integer, Double>.put","ArrayList<SurvivalInfo>.size","ArrayList<SurvivalInfo>.get","SurvivalInfo.getStrata","SurvivalInfo.getWeight","LinkedHashMap<Integer, Double>.get","LinkedHashMap<Integer, Double>.put","LinkedHashMap<Integer, Double>.values","LinkedHashMap<Integer, Double>.keySet","LinkedHashMap<Integer, Double>.get","LinkedHashMap<Integer, Double>.get","LinkedHashMap<Integer, Double>.put","ArrayList<String>.size","ArrayList<String>.size","LinkedHashMap<Integer, Double>.keySet","LinkedHashMap<Integer, Double>.get","ArrayList<SurvivalInfo>.size","ArrayList<SurvivalInfo>.get","SurvivalInfo.getStrata","ArrayList<String>.size","ArrayList<String>.get","LinkedHashMap<String, DescriptiveStatistics>.get","LinkedHashMap<String, DescriptiveStatistics>.put","DescriptiveStatistics.addValue","ArrayList<String>.size","ArrayList<String>.size","ArrayList<String>.size","ArrayList<String>.get","ArrayList<String>.size","ArrayList<String>.get","LinkedHashMap<String, DescriptiveStatistics>.get","DescriptiveStatistics.getVariance","LinkedHashMap<String, DescriptiveStatistics>.get","LinkedHashMap<String, DescriptiveStatistics>.get","Covariance.covariance","DescriptiveStatistics.getValues","DescriptiveStatistics.getValues","LinkedHashMap<Integer, Double>.get","CoxInfo.setVariance","CoxInfo.setScoreLogrankTest","CoxInfo.setScoreLogrankTestpvalue"],"method_name":"CoxCC.process","method_implementation":"{\n    ArrayList<SurvivalInfo> survivalInfoList = ci.survivalInfoList;\n    //r\n    ArrayList<String> variables = new ArrayList<String>(ci.getCoefficientsList().keySet());\n    ArrayList<Integer> strataClass = new ArrayList<Integer>(survivalInfoList.size());\n    double[] wt = new double[survivalInfoList.size()];\n    for (int i = 0; i < survivalInfoList.size(); i++) {\n        SurvivalInfo si = survivalInfoList.get(i);\n        strataClass.add(si.getStrata());\n        wt[i] = si.getWeight();\n    }\n    // dn not use weighted\n    double[][] r = ResidualsCoxph.process(ci, ResidualsCoxph.Type.score, false, null);\n    // ArrayList<String> variables = ci.survivalInfoList.get(0).getDataVariables();\n    //        if (false) {\n    //            for (int i = 0; i < survivalInfoList.size(); i++) {\n    //                SurvivalInfo si = survivalInfoList.get(i);\n    //                System.out.print(\"Cox cc \" + si.getOrder());\n    //                for (int j = 0; j < variables.size(); j++) {\n    //                    System.out.print(\" \" + r[i][j]);\n    //                }\n    //                System.out.println();\n    //            }\n    //        }\n    double[][] rvar = null;\n    if (ci.getNaiveVariance() != null) {\n        rvar = ci.getNaiveVariance();\n    } else {\n        rvar = ci.getVariance();\n    }\n    //nj\n    LinkedHashMap<Integer, Double> nj = new LinkedHashMap<Integer, Double>();\n    Collections.sort(strataClass);\n    for (Integer value : strataClass) {\n        Double count = nj.get(value);\n        if (count == null) {\n            count = 0.0;\n        }\n        count++;\n        nj.put(value, count);\n    }\n    //Nj\n    LinkedHashMap<Integer, Double> Nj = new LinkedHashMap<Integer, Double>();\n    //N = N + Nj[key];\n    double N = 0;\n    for (int i = 0; i < survivalInfoList.size(); i++) {\n        SurvivalInfo si = survivalInfoList.get(i);\n        Integer strata = si.getStrata();\n        Double weight = si.getWeight();\n        Double sum = Nj.get(strata);\n        if (sum == null) {\n            sum = 0.0;\n        }\n        sum = sum + weight;\n        Nj.put(strata, sum);\n    }\n    for (Double value : Nj.values()) {\n        N = N + value;\n    }\n    LinkedHashMap<Integer, Double> k1j = new LinkedHashMap<Integer, Double>();\n    for (Integer key : nj.keySet()) {\n        //trying to copy what R is doing on precision\n        double _nj = (nj.get(key));\n        double _Nj = (Nj.get(key));\n        //         System.out.println(\"nj=\" + _nj + \" Nj=\" + _Nj);\n        k1j.put(key, _Nj * ((_Nj / _nj) - 1));\n    }\n    double[][] V = new double[variables.size()][variables.size()];\n    for (Integer i : k1j.keySet()) {\n        //          System.out.println(\"Strata=\" + i + \" \" + k1j.get(i) + \" \" + Nj.get(i) + \" \" + nj.get(i));\n        if (nj.get(i) > 1) {\n            LinkedHashMap<String, DescriptiveStatistics> variableStatsMap = new LinkedHashMap<String, DescriptiveStatistics>();\n            for (int p = 0; p < survivalInfoList.size(); p++) {\n                SurvivalInfo si = survivalInfoList.get(p);\n                if (si.getStrata() != i) {\n                    continue;\n                }\n                //              System.out.print(si.order + \" \");\n                for (int col = 0; col < variables.size(); col++) {\n                    String v = variables.get(col);\n                    DescriptiveStatistics ds = variableStatsMap.get(v);\n                    if (ds == null) {\n                        ds = new DescriptiveStatistics();\n                        variableStatsMap.put(v, ds);\n                    }\n                    ds.addValue(r[p][col]);\n                    //                  System.out.print(si.getResidualVariable(v) + \"  \");\n                }\n                //              System.out.println();\n            }\n            //calculate variance covariance matrix var(r[class==levels(class)[i],],use='comp')\n            double[][] var_covar = new double[variables.size()][variables.size()];\n            for (int m = 0; m < variables.size(); m++) {\n                String var_m = variables.get(m);\n                for (int n = 0; n < variables.size(); n++) {\n                    String var_n = variables.get(n);\n                    if (m == n) {\n                        DescriptiveStatistics ds = variableStatsMap.get(var_m);\n                        var_covar[m][n] = ds.getVariance();\n                    } else {\n                        DescriptiveStatistics ds_m = variableStatsMap.get(var_m);\n                        DescriptiveStatistics ds_n = variableStatsMap.get(var_n);\n                        Covariance cv = new Covariance();\n                        double covar = cv.covariance(ds_m.getValues(), ds_n.getValues(), true);\n                        var_covar[m][n] = covar;\n                    }\n                }\n            }\n            //              System.out.println();\n            //              System.out.println(\"sstrat=\" + i);\n            //              StdArrayIO.print(var_covar);\n            V = Matrix.add(V, Matrix.scale(var_covar, k1j.get(i)));\n            //       for (int m = 0; m < V.length; m++) {\n            //           for (int n = 0; n < V.length; n++) {\n            //               V[m][n] = V[m][n] + (k1j.get(i) * var_covar[m][n]);\n            //\n            //           }\n            //      }\n        }\n    }\n    //     System.out.println(\"V\");\n    //     StdArrayIO.print(V);\n    //     System.out.println();\n    //z$var <- rvar + rvar %*% V %*% rvar # replace variance in z\n    double[][] imat1 = Matrix.multiply(rvar, V);\n    imat1 = Matrix.multiply(imat1, rvar);\n    imat1 = Matrix.add(rvar, imat1);\n    //  System.out.println(\"New var\");\n    //  StdArrayIO.print(imat1);\n    ci.setVariance(imat1);\n    //need to update walsh stats for overall model\n    CoxR.calculateWaldTestInfo(ci);\n    //per Bob/Kathryn email on 4/23/2014 in a weighted model LogRank p-value is no longer valid so should erase it\n    ci.setScoreLogrankTest(Double.NaN);\n    ci.setScoreLogrankTestpvalue(Double.NaN);\n}","repo_id":"9","comment":"/**\n * @param ci\n * @throws Exception\n */\n","repo_name":"biojava-master/","id":3596,"method_signature":"void process(CoxInfo)"}