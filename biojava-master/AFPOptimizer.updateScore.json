{"callee_method_ids":[487,484],"callee_method_names":["AFPChain.setConn","AFPChain.setDVar","AFPChain.getBlockNum","AFPChain.getBlockScore","AFPChain.getBlockGap","AFPChain.getBlockSize","AFPChain.getAfpChainList","AFPChain.getAfpSet","AFPChain.getBlock2Afp","FatCatParameters.getTorsionPenalty","List<AFP>.get","AFPChain.getConn","List<AFP>.get","List<AFP>.get","List<AFP>.get","List<AFP>.get","List<AFP>.get","List<AFP>.get","List<AFP>.get","AFPChain.setBlockGap","AFPChain.setAlignScoreUpdate","AFPChain.setBlockScore","AFPChain.setBlockSize","AFPChain.setAfpChainList","AFPChain.setBlock2Afp"],"method_name":"AFPOptimizer.updateScore","method_implementation":"{\n    int i, j, bknow, bkold, g1, g2;\n    afpChain.setConn(0d);\n    afpChain.setDVar(0d);\n    int blockNum = afpChain.getBlockNum();\n    int alignScoreUpdate = 0;\n    double[] blockScore = afpChain.getBlockScore();\n    int[] blockGap = afpChain.getBlockGap();\n    int[] blockSize = afpChain.getBlockSize();\n    int[] afpChainList = afpChain.getAfpChainList();\n    List<AFP> afpSet = afpChain.getAfpSet();\n    int[] block2Afp = afpChain.getBlock2Afp();\n    double torsionPenalty = params.getTorsionPenalty();\n    bkold = 0;\n    for (i = 0; i < blockNum; i++) {\n        blockScore[i] = 0;\n        blockGap[i] = 0;\n        for (j = 0; j < blockSize[i]; j++) {\n            bknow = afpChainList[block2Afp[i] + j];\n            if (j == 0) {\n                blockScore[i] = afpSet.get(bknow).getScore();\n            } else {\n                //note: j, i\n                AFPChainer.afpPairConn(bkold, bknow, params, afpChain);\n                Double conn = afpChain.getConn();\n                blockScore[i] += afpSet.get(bknow).getScore() + conn;\n                g1 = afpSet.get(bknow).getP1() - afpSet.get(bkold).getP1() - afpSet.get(bkold).getFragLen();\n                g2 = afpSet.get(bknow).getP2() - afpSet.get(bkold).getP2() - afpSet.get(bkold).getFragLen();\n                blockGap[i] += (g1 > g2) ? g1 : g2;\n            }\n            bkold = bknow;\n        }\n        alignScoreUpdate += blockScore[i];\n    }\n    if (blockNum >= 2) {\n        alignScoreUpdate += (blockNum - 1) * torsionPenalty;\n    }\n    afpChain.setBlockGap(blockGap);\n    afpChain.setAlignScoreUpdate(alignScoreUpdate);\n    afpChain.setBlockScore(blockScore);\n    afpChain.setBlockSize(blockSize);\n    afpChain.setAfpChainList(afpChainList);\n    afpChain.setBlock2Afp(block2Afp);\n}","repo_id":"9","comment":"/**\n * to update the chaining score after block delete and merge processed\n * the blockScore value is important for significance evaluation\n */\n","repo_name":"biojava-master/","id":421,"method_signature":"void updateScore(FatCatParameters, AFPChain)"}