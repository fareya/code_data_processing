{"callee_method_ids":[487,484],"callee_method_names":["AFPChain.getBlockNum","AFPChain.getAfpSet","AFPChain.getAfpChainList","AFPChain.getBlock2Afp","AFPChain.getBlockSize","AFPChain.getBlockRmsd","FatCatParameters.getFragLen","List<AFP>.get","List<AFP>.get","AFPChain.setBlock2Afp","AFPChain.setBlockSize","AFPChain.setAfpChainList","AFPChain.setBlockNum","AFPChain.setBlockRmsd"],"method_name":"AFPPostProcessor.deleteBlock","method_implementation":"{\n    int blockNum = afpChain.getBlockNum();\n    List<AFP> afpSet = afpChain.getAfpSet();\n    int[] afpChainList = afpChain.getAfpChainList();\n    int[] block2Afp = afpChain.getBlock2Afp();\n    int[] blockSize = afpChain.getBlockSize();\n    double[] blockRmsd = afpChain.getBlockRmsd();\n    int fragLen = params.getFragLen();\n    //remove those blocks (both in terminals and in the middle) with only a AFP\n    //but still keep those small blocks spaning large regions\n    if (blockNum <= 1)\n        return;\n    int blockNumOld = blockNum;\n    int i, j, b1, b2, e1, e2, len;\n    e1 = e2 = 0;\n    for (i = 0; i < blockNum; i++) {\n        b1 = e1;\n        b2 = e2;\n        if (i < blockNum - 1) {\n            e1 = afpSet.get(afpChainList[block2Afp[i + 1]]).getP1();\n            e2 = afpSet.get(afpChainList[block2Afp[i + 1]]).getP2();\n        } else {\n            e1 = ca1.length;\n            e2 = ca2.length;\n        }\n        if (blockSize[i] > 1)\n            continue;\n        len = (e1 - b1) < (e2 - b2) ? (e1 - b1) : (e2 - b2);\n        //if(i == blockNum - 1) blockNum --;\n        if (len < 2 * fragLen) {\n            for (j = i; j < blockNum - 1; j++) {\n                blockRmsd[j] = blockRmsd[j + 1];\n                blockSize[j] = blockSize[j + 1];\n                block2Afp[j] = block2Afp[j + 1];\n            }\n            blockNum--;\n            i--;\n        }\n        //delete a block\n    }\n    if (blockNumOld > blockNum)\n        if (debug)\n            System.out.println(String.format(\"Delete %d small blocks\\n\", blockNumOld - blockNum));\n    if (debug)\n        System.err.println(\"deleteBlock: end blockNum:\" + blockNum);\n    afpChain.setBlock2Afp(block2Afp);\n    afpChain.setBlockSize(blockSize);\n    afpChain.setAfpChainList(afpChainList);\n    afpChain.setBlockNum(blockNum);\n    afpChain.setBlockRmsd(blockRmsd);\n}","repo_id":"9","comment":"/**\n *  remove the artifical small rigid-body superimpose in the middle\n * \t clust the similar superimpositions (caused by the small flexible\n * \t region, which is detected as a seperate rigid superimposing region by adding\n * \t two twists before and after it(artifically!)\n * \t one possible solution: allowing long enough loops in the chaining process,\n * \t which however increase the calculation complexity\n */\n","repo_name":"biojava-master/","id":422,"method_signature":"void deleteBlock(FatCatParameters, AFPChain, Atom[], Atom[])"}