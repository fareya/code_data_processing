{"callee_method_names":[],"method_name":"BondImpl.getOther","method_implementation":"{\n    if (exclude != atomA && exclude != atomB) {\n        throw new IllegalArgumentException(\"Atom to exclude is not in bond.\");\n    }\n    if (exclude == atomA) {\n        return atomB;\n    } else {\n        return atomA;\n    }\n}","repo_id":"9","comment":"/**\n * A utility method to get the other atom in a bond, given one of its atoms.\n * If the atom passed is one of the atoms in this bond, then this method is\n * essentially equivalent to saying\n * <code>atom == bond.getAtomA() ? bond.getAtomB() : bond.getAtomA()<\/code>.\n * <p>\n * <i>Note:<\/i> Comparison of atoms in this method is done with\n * <code>==<\/code>, not <code>equals<\/code>.\n *\n * @param exclude the atom of the bond to not return\n * @throws IllegalArgumentException if the passed atom is not in this bond\n * @return the atom in this bond that was not passed as an argument\n */\n","repo_name":"biojava-master/","id":1709,"method_signature":"Atom getOther(Atom)"}