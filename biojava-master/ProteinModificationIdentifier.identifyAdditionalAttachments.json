{"callee_method_names":["List<Group>.isEmpty","ModifiedCompound.getGroups","ResidueNumber.setChainName","ResidueNumber.setSeqNum","ResidueNumber.setInsCode","Logger.error","List<Group>.add","List<Group>.size","List<Group>.get","List<Group>.contains","List<Atom[]>.isEmpty","ModifiedCompound.addAtomLinkage","List<Group>.add","List<Group>.size"],"method_name":"ProteinModificationIdentifier.identifyAdditionalAttachments","method_implementation":"{\n    if (ligands.isEmpty()) {\n        return;\n    }\n    // TODO: should the additional groups only be allowed to the identified\n    // ligands or both amino acids and ligands? Currently only on ligands\n    // ligands to amino acid bonds for same modification of unknown category\n    // will be combined in mergeModComps()\n    // TODO: how about chain-chain links?\n    List<Group> identifiedGroups = new ArrayList<Group>();\n    for (StructureGroup num : mc.getGroups(false)) {\n        Group group;\n        try {\n            //String numIns = \"\" + num.getResidueNumber();\n            //if (num.getInsCode() != null) {\n            //\tnumIns += num.getInsCode();\n            //}\n            ResidueNumber resNum = new ResidueNumber();\n            resNum.setChainName(num.getChainId());\n            resNum.setSeqNum(num.getResidueNumber());\n            resNum.setInsCode(num.getInsCode());\n            //group = chain.getGroupByPDB(numIns);\n            group = getGroup(num, chains);\n            //group = mapChainIdChain.get(num.getChainId()).getGroupByPDB(resNum);\n        } catch (StructureException e) {\n            logger.error(\"Exception: \", e);\n            // should not happen\n            continue;\n        }\n        identifiedGroups.add(group);\n    }\n    int start = 0;\n    int n = identifiedGroups.size();\n    while (n > start) {\n        for (Group group1 : ligands) {\n            for (int i = start; i < n; i++) {\n                Group group2 = identifiedGroups.get(i);\n                if (!identifiedGroups.contains(group1)) {\n                    List<Atom[]> linkedAtoms = StructureUtil.findAtomLinkages(group1, group2, false, bondLengthTolerance);\n                    if (!linkedAtoms.isEmpty()) {\n                        for (Atom[] atoms : linkedAtoms) {\n                            mc.addAtomLinkage(StructureUtil.getStructureAtomLinkage(atoms[0], false, atoms[1], false));\n                        }\n                        identifiedGroups.add(group1);\n                        break;\n                    }\n                }\n            }\n        }\n        start = n;\n        n = identifiedGroups.size();\n    }\n}","repo_id":"9","comment":"/**\n * identify additional groups that are not directly attached to amino acids.\n * @param mc {@link ModifiedCompound}\n * @param ligands {@link Group}\n * @param chains List of {@link Chain}s\n * @return a list of added groups\n */\n","repo_name":"biojava-master/","id":299,"method_signature":"void identifyAdditionalAttachments(ModifiedCompound, List, List)"}