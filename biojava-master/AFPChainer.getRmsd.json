{"callee_method_names":[],"method_name":"AFPChainer.getRmsd","method_implementation":"{\n    Matrix4d trans = SuperPositions.superpose(Calc.atomsToPoints(catmp1), Calc.atomsToPoints(catmp2));\n    Calc.transform(catmp2, trans);\n    //   if ( showAlig) {\n    //      StructureAlignmentJmol jmol = new StructureAlignmentJmol();\n    //      jmol.setTitle(\"AFPCHainer: getRmsd\" + rmsd);\n    //\n    //      Chain c1 = new ChainImpl();\n    //      c1.setName(\"A\");\n    //      for ( Atom a : catmp1){\n    //         c1.addGroup(a.getParent());\n    //      }\n    //\n    //      Chain c2 = new ChainImpl();\n    //      c2.setName(\"B\");\n    //      for ( Atom a : catmp2){\n    //         c2.addGroup(a.getParent());\n    //      }\n    //\n    //      Structure fake = new StructureImpl();\n    //      fake.setPDBCode(\"AFPCHainer: getRmsd\" + rmsd);\n    //      List<Chain> model1 = new ArrayList<Chain>();\n    //      model1.add(c1);\n    //      List<Chain> model2 = new ArrayList<Chain>();\n    //      model2.add(c2);\n    //      fake.addModel(model1);\n    //      fake.addModel(model2);\n    //      fake.setNmr(true);\n    //\n    //      jmol.setStructure(fake);\n    //      jmol.evalString(\"select *; backbone 0.4; wireframe off; spacefill off; \" +\n    //      \"select not protein and not solvent; spacefill on;\");\n    //      jmol.evalString(\"select */1 ; color red; model 1; \");\n    //\n    //      // now show both models again.\n    //      jmol.evalString(\"model 0;\");\n    //   }\n    return Calc.rmsd(catmp1, catmp2);\n}","repo_id":"9","comment":"/**\n * Calculate the RMSD for two sets of atoms. Rotates the 2nd atom set so make sure this does not cause problems later\n *\n * @param catmp1\n * @return\n */\n","repo_name":"biojava-master/","id":419,"method_signature":"double getRmsd(Atom[], Atom[])"}