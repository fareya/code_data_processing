{"callee_method_names":["Map<String, Integer>.get","Pair<Group>.getFirst","Map<String, Integer>.get","Pair<Group>.getSecond","PDBFileReader.getStructure","String[].getBytes","PDBFileReader.getStructure","String[].getBytes","Element.printStackTrace","Structure.getChain","Structure.getChain","Group.getAtoms","Group.getAtoms","Group.getAtoms","Pair<Group>.getFirst","Atom.getName","Atom.getCoordsAsPoint3d","Pair<Group>.getFirst","Atom.getName","Group.getAtoms","SuperPosition.superposeAndTransform","Group.getAtoms","Group.getAtoms","Group.getAtoms","Pair<Group>.getSecond","Atom.getName","Atom.getCoordsAsPoint3d","Pair<Group>.getSecond","Atom.getName","Group.getAtoms","Matrix4d.clone","Matrix4d.clone","SuperPosition.superposeAndTransform","Matrix4d.getColumn","Matrix4d.getColumn","Matrix4d.getColumn","Matrix4d.setColumn","Matrix4d.setColumn","Matrix4d.add","Matrix4d.mul","Matrix4d.getColumn","Matrix4d.getColumn","Matrix4d.getColumn","Matrix4d.setColumn","Matrix4d.setColumn","Matrix4d.setColumn","Matrix4d.getColumn","Matrix4d.setColumn","Matrix4d.invert","Matrix4d.mul"],"method_name":"BasePairParameters.basePairReferenceFrame","method_implementation":"{\n    Integer type1 = BASE_MAP.get(pair.getFirst().getPDBName());\n    Integer type2 = BASE_MAP.get(pair.getSecond().getPDBName());\n    SuperPosition sp = new SuperPositionQCP(true);\n    if (type1 == null || type2 == null)\n        return null;\n    PDBFileReader pdbFileReader = new PDBFileReader();\n    Structure s1, s2;\n    try {\n        s1 = pdbFileReader.getStructure(new ByteArrayInputStream(STANDARD_BASES[type1].getBytes()));\n        s2 = pdbFileReader.getStructure(new ByteArrayInputStream(STANDARD_BASES[type2].getBytes()));\n    } catch (IOException e) {\n        e.printStackTrace();\n        return null;\n    }\n    Group std1 = s1.getChain(\"A\").getAtomGroup(0);\n    Group std2 = s2.getChain(\"A\").getAtomGroup(0);\n    Point3d[] pointref = new Point3d[std1.getAtoms().size()];\n    Point3d[] pointact = new Point3d[std1.getAtoms().size()];\n    int count = 0;\n    for (Atom a : std1.getAtoms()) {\n        if (pair.getFirst().getAtom(a.getName()) == null)\n            return null;\n        pointref[count] = a.getCoordsAsPoint3d();\n        pointact[count] = pair.getFirst().getAtom(a.getName()).getCoordsAsPoint3d();\n        count++;\n    }\n    assert count == std1.getAtoms().size();\n    Matrix4d ref1 = (Matrix4d) sp.superposeAndTransform(pointact, pointref).clone();\n    pointref = new Point3d[std2.getAtoms().size()];\n    pointact = new Point3d[std2.getAtoms().size()];\n    count = 0;\n    for (Atom a : std2.getAtoms()) {\n        if (pair.getSecond().getAtom(a.getName()) == null)\n            return null;\n        pointref[count] = a.getCoordsAsPoint3d();\n        pointact[count] = pair.getSecond().getAtom(a.getName()).getCoordsAsPoint3d();\n        count++;\n    }\n    assert count == std2.getAtoms().size();\n    Matrix4d temp = (Matrix4d) ref1.clone();\n    Matrix4d temp2 = (Matrix4d) temp.clone();\n    Matrix4d ref2 = sp.superposeAndTransform(pointact, pointref);\n    double[][] v = new double[3][4];\n    double[] y3 = new double[4];\n    double[] z3 = new double[4];\n    ref2.getColumn(1, y3);\n    ref2.getColumn(2, z3);\n    double[] z31 = new double[4];\n    ref1.getColumn(2, z31);\n    if (z3[0] * z31[0] + z3[1] * z31[1] + z3[2] * z31[2] < 0.0) {\n        for (int i = 0; i < 3; i++) {\n            y3[i] *= -1.0;\n            z3[i] *= -1.0;\n        }\n    }\n    ref2.setColumn(1, y3);\n    ref2.setColumn(2, z3);\n    temp.add(ref2);\n    temp.mul(0.5);\n    double[] x3 = new double[4];\n    temp.getColumn(0, x3);\n    temp.getColumn(1, y3);\n    temp.getColumn(2, z3);\n    x3 = removeComponent(x3, z3);\n    x3 = removeComponent(x3, y3);\n    y3 = removeComponent(y3, z3);\n    temp.setColumn(0, x3);\n    temp.setColumn(1, y3);\n    temp.setColumn(2, z3);\n    // normalize the short, long, and normal axes\n    for (int i = 0; i < 3; i++) {\n        temp.getColumn(i, v[i]);\n        double r = Math.sqrt(v[i][0] * v[i][0] + v[i][1] * v[i][1] + v[i][2] * v[i][2]);\n        for (int j = 0; j < 3; j++) {\n            v[i][j] /= r;\n        }\n        temp.setColumn(i, v[i]);\n    }\n    // calculate pairing parameters: buckle, propeller, opening, shear, stretch, stagger\n    temp2.invert();\n    temp2.mul(ref2);\n    pairParameters = calculateTp(temp2);\n    for (int i = 0; i < 6; i++) pairParameters[i] *= -1;\n    // return the central frame of the base pair\n    return temp;\n}","repo_id":"9","comment":"/**\n * This method calculates the central frame (4x4 transformation matrix) of a single base pair.\n * @param pair An array of the two groups that make a hypothetical pair\n * @return The middle frame of the center of the base-pair formed\n */\n","repo_name":"biojava-master/","id":1738,"method_signature":"Matrix4d basePairReferenceFrame(Pair)"}