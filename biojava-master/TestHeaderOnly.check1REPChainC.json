{"callee_method_names":["String.length","String.length","Structure.getPolyChainByPDB","Chain.getSeqResGroups","String.length","List<Group>.size","Chain.getSeqResSequence","String.length","List<Group>.get"],"method_name":"TestHeaderOnly.check1REPChainC","method_implementation":"{\n    String sequence = \"MAETAVINHKKRKNSPRIVQSNDLTEAAYSLSRDQKRMLYLFVDQIRK\" + \"SDGTLQEHDGICEIHVAKYAEIFGLTSAEASKDIRQALKSFAGKEVVFYRPEEDAGDE\" + \"KGYESFPWFIKPAHSPSRGLYSVHINPYLIPFFIGLQNRFTQFRLSETKEITNPYAMR\" + \"LYESLCQYRKPDGSGIVSLKIDWIIERYQLPQSYQRMPDFRRRFLQVCVNEINSRTPM\" + \"RLSYIEKKKGRQTTHIVFSFRDITSMTTG\";\n    boolean[] shouldMatch = new boolean[sequence.length()];\n    for (int i = 0; i < sequence.length(); i++) shouldMatch[i] = true;\n    // 1-14 is gap\n    for (int i = 0; i < 14; i++) shouldMatch[i] = false;\n    // 50-55 is gap\n    for (int i = 49; i < 55; i++) shouldMatch[i] = false;\n    // 98-109 is gap\n    for (int i = 97; i < 109; i++) shouldMatch[i] = false;\n    // 247-251 is gap\n    for (int i = 246; i < 251; i++) shouldMatch[i] = false;\n    Chain c = s.getPolyChainByPDB(\"C\");\n    List<Group> seqres = c.getSeqResGroups();\n    // Check lengths\n    Assert.assertEquals(sequence.length(), seqres.size());\n    // Check sequences.\n    Assert.assertEquals(sequence, c.getSeqResSequence());\n    for (int i = 0; i < sequence.length(); i++) {\n        Assert.assertEquals(shouldMatch[i], hasAtoms(seqres.get(i)));\n    }\n}","repo_id":"9","comment":"/**\n * Check that the gapped residues have no atoms, but that ungapped residues\n * have atoms.\n *\n * @param s: Structure to test.\n */\n","repo_name":"biojava-master/","id":2281,"method_signature":"void check1REPChainC(Structure)"}