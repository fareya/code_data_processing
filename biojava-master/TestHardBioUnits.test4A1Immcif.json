{"callee_method_ids":[641],"callee_method_names":["AtomCache.setFiletype","Structure.nrModels","Structure.getPolyChains","Structure.getPolyChainByPDB","Structure.getPolyChainByPDB"],"method_name":"TestHardBioUnits.test4A1Immcif","method_implementation":"{\n    String pdbId = \"4A1I\";\n    int biolAssemblyNr = 2;\n    AtomCache cache = new AtomCache();\n    cache.setFiletype(StructureFiletype.CIF);\n    StructureIO.setAtomCache(cache);\n    Structure bioAssembly = StructureIO.getBiologicalAssembly(pdbId, biolAssemblyNr);\n    if (bioAssembly == null) {\n        System.err.println(\"Could not generate the biological assembly \" + pdbId + \" nr \" + biolAssemblyNr);\n    }\n    /*\n\t\t * loop_\n\t\t\t\t_pdbx_struct_assembly_gen.assembly_id\n\t\t\t\t_pdbx_struct_assembly_gen.oper_expression\n\t\t\t\t_pdbx_struct_assembly_gen.asym_id_list\n\t\t\t\t1 1 A,I,J,K,L,M,N,UA,H,PA,QA,RA,SA,TA,BB\n\t\t\t\t2 1 G,KA,LA,MA,NA,OA,AB\n\t\t\t\t2 2 B,O,P,Q,R,VA\n\t\t\t\t3 1 B,O,P,Q,R,VA\n\t\t\t\t3 3 G,KA,LA,MA,NA,OA,AB\n\t\t\t\t4 1 C,S,T,U,V,W,WA,F,FA,GA,HA,IA,JA,ZA\n\t\t\t\t5 1 D,X,Y,Z,XA,E,AA,BA,CA,DA,EA,YA\n\t\t */\n    //System.out.println(bioAssembly.toPDB());\n    assertEquals(1, bioAssembly.nrModels());\n    assertEquals(2, bioAssembly.getPolyChains().size());\n    // this tests checks that the operator ids are exactly those read from mmcif, it doesn't necessarily work in mmtf where there are no ids\n    Chain g = bioAssembly.getPolyChainByPDB(\"G_1\");\n    Chain b = bioAssembly.getPolyChainByPDB(\"B_2\");\n    assertNotNull(g);\n    assertNotNull(b);\n}","repo_id":"9","comment":"/**\n * This tests that the biounit and operator ids are the right ones when parsing from mmcif\n * @throws IOException\n * @throws StructureException\n */\n","repo_name":"biojava-master/","id":2220,"method_signature":"void test4A1Immcif()"}