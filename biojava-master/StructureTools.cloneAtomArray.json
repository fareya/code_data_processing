{"callee_method_names":["Atom.getGroup","Group.getChain","Chain.getName","Chain.getName","Chain.setId","Chain.getId","Chain.setName","Chain.getName","List<Chain>.add","Group.clone","Group.getAtom","Atom.getName","Chain.getGroupByPDB","Group.getResidueNumber","Chain.addGroup"],"method_name":"StructureTools.cloneAtomArray","method_implementation":"{\n    Atom[] newCA = new Atom[ca.length];\n    List<Chain> model = new ArrayList<Chain>();\n    int apos = -1;\n    for (Atom a : ca) {\n        apos++;\n        Group parentG = a.getGroup();\n        Chain parentC = parentG.getChain();\n        Chain newChain = null;\n        for (Chain c : model) {\n            if (c.getName().equals(parentC.getName())) {\n                newChain = c;\n                break;\n            }\n        }\n        if (newChain == null) {\n            newChain = new ChainImpl();\n            newChain.setId(parentC.getId());\n            newChain.setName(parentC.getName());\n            model.add(newChain);\n        }\n        Group parentN = (Group) parentG.clone();\n        newCA[apos] = parentN.getAtom(a.getName());\n        try {\n            // if the group doesn't exist yet, this produces a StructureException\n            newChain.getGroupByPDB(parentN.getResidueNumber());\n        } catch (StructureException e) {\n            // the group doesn't exist yet in the newChain, let's add it\n            newChain.addGroup(parentN);\n        }\n    }\n    return newCA;\n}","repo_id":"9","comment":"/**\n * Provides an equivalent copy of Atoms in a new array. Clones everything,\n * starting with parent groups and chains. The chain will only contain\n * groups that are part of the input array.\n *\n * @param ca\n *            array of representative atoms, e.g. CA atoms\n * @return Atom array\n * @since Biojava 4.1.0\n */\n","repo_name":"biojava-master/","id":1036,"method_signature":"Atom[] cloneAtomArray(Atom[])"}