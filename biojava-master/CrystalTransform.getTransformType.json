{"callee_method_ids":[1456],"callee_method_names":["SpaceGroup.getAxisFoldType"],"method_name":"CrystalTransform.getTransformType","method_implementation":"{\n    // if no SG, that means a non-crystallographic entry (e.g. NMR). We return AU as type\n    if (sg == null)\n        return TransformType.AU;\n    int foldType = sg.getAxisFoldType(this.transformId);\n    boolean isScrewOrGlide = false;\n    Vector3d translScrewComponent = getTranslScrewComponent();\n    if (Math.abs(translScrewComponent.x - 0.0) > SpaceGroup.DELTA || Math.abs(translScrewComponent.y - 0.0) > SpaceGroup.DELTA || Math.abs(translScrewComponent.z - 0.0) > SpaceGroup.DELTA) {\n        isScrewOrGlide = true;\n    }\n    if (foldType > 1) {\n        if (isScrewOrGlide) {\n            switch(foldType) {\n                case 2:\n                    return TransformType.TWOFOLDSCREW;\n                case 3:\n                    return TransformType.THREEFOLDSCREW;\n                case 4:\n                    return TransformType.FOURFOLDSCREW;\n                case 6:\n                    return TransformType.SIXFOLDSCREW;\n                default:\n                    throw new NullPointerException(\"This transformation did not fall into any of the known types! This is most likely a bug.\");\n            }\n        } else {\n            switch(foldType) {\n                case 2:\n                    return TransformType.TWOFOLD;\n                case 3:\n                    return TransformType.THREEFOLD;\n                case 4:\n                    return TransformType.FOURFOLD;\n                case 6:\n                    return TransformType.SIXFOLD;\n                default:\n                    throw new NullPointerException(\"This transformation did not fall into any of the known types! This is most likely a bug.\");\n            }\n        }\n    } else if (foldType < 0) {\n        switch(foldType) {\n            case -1:\n                return TransformType.ONEBAR;\n            case -2:\n                if (isScrewOrGlide) {\n                    return TransformType.GLIDE;\n                }\n                return TransformType.TWOBAR;\n            case -3:\n                return TransformType.THREEBAR;\n            case -4:\n                return TransformType.FOURBAR;\n            case -6:\n                return TransformType.SIXBAR;\n            default:\n                throw new NullPointerException(\"This transformation did not fall into any of the known types! This is most likely a bug.\");\n        }\n    } else {\n        if (isIdentity()) {\n            return TransformType.AU;\n        }\n        if (isPureCrystalTranslation()) {\n            return TransformType.XTALTRANSL;\n        }\n        if (isFractionalTranslation()) {\n            return TransformType.CELLTRANSL;\n        }\n        throw new NullPointerException(\"This transformation did not fall into any of the known types! This is most likely a bug.\");\n    }\n}","repo_id":"9","comment":"/**\n * Returns the TransformType of this transformation: AU, crystal translation, fractional translation\n * , 2 3 4 6-fold rotations, 2 3 4 6-fold screw rotations, -1 -3 -2 -4 -6 inversions/rotoinversions.\n * @return\n */\n","repo_name":"biojava-master/","id":1431,"method_signature":"TransformType getTransformType()"}