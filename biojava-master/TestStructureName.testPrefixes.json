{"callee_method_ids":[465,465,465,465,465,465,465,468,465,468,465,465,465,465,465],"callee_method_names":["StructureName.isPdbId","StructureName.getSource","StructureName.getPdbId","StructureName.isPdbId","StructureName.getSource","StructureName.getPdbId","StructureName.isPdbId","StructureName.getSource","StructureName.getPdbId","StructureName.isScopName","StructureName.getSource","StructureName.getPdbId","StructureName.isCathID","StructureName.getSource","StructureName.getPdbId","StructureName.isURL","StructureName.getSource","StructureName.getPdbId","StructureName.isURL","StructureName.getSource","StructureName.getPdbId","StructureName.isFile","StructureName.getSource","StructureName.getPdbId","StructureName.isFile","StructureName.getSource","StructureName.getPdbId","StructureName.isURL","StructureName.getSource","StructureName.getPdbId","StructureName.isEcodDomain","StructureName.getSource","StructureName.getPdbId","StructureName.isBioAssembly","StructureName.getSource","StructureName.getPdbId","StructureName.isPdbId","StructureName.getSource","StructureName.getPdbId"],"method_name":"TestStructureName.testPrefixes","method_implementation":"{\n    StructureName sn;\n    // Basic case\n    sn = new StructureName(\"PDB:4hhb\");\n    assertTrue(sn.isPdbId());\n    assertTrue(sn.getSource() == PDB);\n    assertEquals(new PdbId(\"4HHB\"), sn.getPdbId());\n    sn = new StructureName(\"PDB:4hhb.A:1-50\");\n    assertTrue(sn.isPdbId());\n    assertTrue(sn.getSource() == PDB);\n    assertEquals(new PdbId(\"4HHB\"), sn.getPdbId());\n    // Invalid strings work too, they just don't load\n    sn = new StructureName(\"PDB:x\");\n    assertTrue(sn.isPdbId());\n    assertTrue(sn.getSource() == PDB);\n    assertEquals(null, sn.getPdbId());\n    // SCOP\n    sn = new StructureName(\"SCOP:d2gs2a_\");\n    assertTrue(sn.isScopName());\n    assertTrue(sn.getSource() == SCOP);\n    assertEquals(new PdbId(\"2GS2\"), sn.getPdbId());\n    // CATH\n    sn = new StructureName(\"CATH:1qvrC03\");\n    assertTrue(sn.isCathID());\n    assertTrue(sn.getSource() == CATH);\n    assertEquals(new PdbId(\"1QVR\"), sn.getPdbId());\n    // URL\n    sn = new StructureName(\"URL:http://www.rcsb.org/pdb/files/1B8G.pdb.gz\");\n    assertTrue(sn.isURL());\n    assertTrue(sn.getSource() == URL);\n    assertEquals(new PdbId(\"1B8G\"), sn.getPdbId());\n    sn = new StructureName(\"URL:file:///4hhb.pdb\");\n    assertTrue(sn.isURL());\n    assertTrue(sn.getSource() == URL);\n    assertEquals(new PdbId(\"4HHB\"), sn.getPdbId());\n    // File: expand home directory (invalid URL)\n    sn = new StructureName(\"FILE:~/4hhb.pdb\");\n    assertTrue(sn.isFile());\n    assertTrue(sn.getSource() == FILE);\n    assertEquals(new PdbId(\"4HHB\"), sn.getPdbId());\n    // Relative file (invalid URL)\n    sn = new StructureName(\"file:4hhb.pdb\");\n    assertTrue(sn.isFile());\n    assertTrue(sn.getSource() == FILE);\n    assertEquals(new PdbId(\"4HHB\"), sn.getPdbId());\n    // Absolute paths are valid URLs\n    sn = new StructureName(\"file:/4hhb_other.pdb\");\n    assertTrue(sn.isURL());\n    assertTrue(sn.getSource() == URL);\n    assertEquals(new PdbId(\"4HHB\"), sn.getPdbId());\n    // ECOD\n    sn = new StructureName(\"e1lyw.1\");\n    assertTrue(sn.isEcodDomain());\n    assertTrue(sn.getSource() == ECOD);\n    assertEquals(new PdbId(\"1LYW\"), sn.getPdbId());\n    // BIO\n    sn = new StructureName(\"BIO:2ehz:1\");\n    assertTrue(sn.isBioAssembly());\n    assertTrue(sn.getSource() == BIO);\n    assertEquals(new PdbId(\"2EHZ\"), sn.getPdbId());\n    // Invalid prefix\n    sn = new StructureName(\"XXX:2ehz\");\n    assertTrue(sn.isPdbId());\n    assertTrue(sn.getSource() == PDB);\n    //\t\tassertEquals(\"XXX:2ehz\",sn.getPdbId());\n    // As long as it is EXPLICITLY defined to wrong type, it should NOT be recognized.\n    assertEquals(null, sn.getPdbId());\n}","repo_id":"9","comment":"/**\n * Test explicit prefixes\n * @throws StructureException\n */\n","repo_name":"biojava-master/","id":2175,"method_signature":"void testPrefixes()"}