{"callee_method_names":["Pattern.matcher","Matcher.matches","Matcher.group","Matcher.group","Matcher.group","Matcher.group","ResidueNumber.setChainName","Matcher.group","Matcher.group","Matcher.group","Matcher.group","ResidueNumber.setChainName","Pattern.matcher"],"method_name":"ResidueRange.parse","method_implementation":"{\n    Matcher matcher = RANGE_REGEX.matcher(s);\n    if (matcher.matches()) {\n        ResidueNumber start = null, end = null;\n        String chain = null;\n        try {\n            chain = matcher.group(1);\n            if (matcher.group(2) != null) {\n                // ^ indicates first res (start==null)\n                if (!\"^\".equals(matcher.group(2))) {\n                    start = ResidueNumber.fromString(matcher.group(2));\n                    start.setChainName(chain);\n                }\n            }\n            if (matcher.group(3) == null) {\n                // single-residue range\n                end = start;\n            } else // $ indicates last res (end==null)\n            if (matcher.group(4) != null && !\"$\".equals(matcher.group(4))) {\n                end = ResidueNumber.fromString(matcher.group(4));\n                end.setChainName(chain);\n            }\n            return new ResidueRange(chain, start, end);\n        } catch (IllegalStateException e) {\n            throw new IllegalArgumentException(\"Range \" + s + \" was not valid\", e);\n        }\n    } else if (CHAIN_REGEX.matcher(s).matches()) {\n        return new ResidueRange(s, (ResidueNumber) null, null);\n    }\n    throw new IllegalArgumentException(\"Illegal ResidueRange format:\" + s);\n}","repo_id":"9","comment":"/**\n * Parse the residue range from a string. Several formats are accepted:\n * <ul>\n *   <li> chainName.start-end\n *   <li> chainName.residue\n *   <li> chain_start-end (for better filename compatibility)\n * <\/ul>\n *\n * <p>Residues can be positive or negative and may include insertion codes.\n * See {@link ResidueNumber#fromString(String)}.\n *\n * <p>Examples:\n * <ul>\n * <li><code>A:5-100<\/code>\n * <li><code>A_5-100<\/code>\n * <li><code>A_-5<\/code>\n * <li><code>A:-12I-+12I<\/code>\n * <li><code>A:^-$<\/code>\n * <\/ul>\n *\n * @param s   residue string to parse\n * @return The unique ResidueRange corresponding to {@code s}\n */\n","repo_name":"biojava-master/","id":1677,"method_signature":"ResidueRange parse(String)"}