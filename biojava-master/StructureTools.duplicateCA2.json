{"callee_method_names":["Atom.getGroup","Atom.getGroup","Chain.setId","Chain.getId","Chain.setName","Chain.getName","Atom.getGroup","Chain.getId","Chain.setId","Chain.getId","Chain.setName","Chain.getName","Chain.addGroup","Group.getAtom","Atom.getName","Atom.getGroup","Atom.getGroup","Chain.setId","Chain.getId","Chain.setName","Chain.getName","Atom.getGroup","Chain.getId","Chain.setId","Chain.getId","Chain.setName","Chain.getName","Chain.addGroup","Group.getAtom","Atom.getName"],"method_name":"StructureTools.duplicateCA2","method_implementation":"{\n    // we don't want to rotate input atoms, do we?\n    Atom[] ca2clone = new Atom[ca2.length * 2];\n    int pos = 0;\n    Chain c = null;\n    String prevChainId = \"\";\n    for (Atom a : ca2) {\n        // works because each group\n        Group g = (Group) a.getGroup().clone();\n        // has only a single atom\n        if (c == null) {\n            c = new ChainImpl();\n            Chain orig = a.getGroup().getChain();\n            c.setId(orig.getId());\n            c.setName(orig.getName());\n        } else {\n            Chain orig = a.getGroup().getChain();\n            if (!orig.getId().equals(prevChainId)) {\n                c = new ChainImpl();\n                c.setId(orig.getId());\n                c.setName(orig.getName());\n            }\n        }\n        c.addGroup(g);\n        ca2clone[pos] = g.getAtom(a.getName());\n        pos++;\n    }\n    // Duplicate ca2!\n    c = null;\n    prevChainId = \"\";\n    for (Atom a : ca2) {\n        Group g = (Group) a.getGroup().clone();\n        if (c == null) {\n            c = new ChainImpl();\n            Chain orig = a.getGroup().getChain();\n            c.setId(orig.getId());\n            c.setName(orig.getName());\n        } else {\n            Chain orig = a.getGroup().getChain();\n            if (!orig.getId().equals(prevChainId)) {\n                c = new ChainImpl();\n                c.setId(orig.getId());\n                c.setName(orig.getName());\n            }\n        }\n        c.addGroup(g);\n        ca2clone[pos] = g.getAtom(a.getName());\n        pos++;\n    }\n    return ca2clone;\n}","repo_id":"9","comment":"/**\n * Utility method for working with circular permutations. Creates a\n * duplicated and cloned set of Calpha atoms from the input array.\n *\n * @param ca2\n *            atom array\n * @return cloned and duplicated set of input array\n */\n","repo_name":"biojava-master/","id":1038,"method_signature":"Atom[] duplicateCA2(Atom[])"}