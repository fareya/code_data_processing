{"callee_method_ids":[1716],"callee_method_names":["ResidueRangeAndLength.getChainName","ResidueRangeAndLength.getStart","ResidueRangeAndLength.getEnd","ResidueRangeAndLength.getLength","List<ResidueRangeAndLength>.add"],"method_name":"ResidueRangeTest.testWithLengths","method_implementation":"{\n    // more:\n    String[] ids = new String[] { \"1w0p\", \"3qq3\", \"3chc\", \"2ei7\" };\n    // ,\n    // \"2qbr\"\n    String[] chains = new String[] { \"A\", \"B\", \"A\", \"L\" };\n    ResidueNumber[] starts = new ResidueNumber[] { new ResidueNumber(\"A\", 5, ' '), new ResidueNumber(\"B\", 10, 's'), new ResidueNumber(\"A\", 15, 'm'), new ResidueNumber(\"L\", 44, ' ') };\n    ResidueNumber[] ends = new ResidueNumber[] { new ResidueNumber(\"A\", 117, ' '), new ResidueNumber(\"B\", 200, 's'), new ResidueNumber(\"A\", 464, 'q'), new ResidueNumber(\"L\", 254, 't') };\n    int[] lengths = new int[] { 117 - 5, 200 - 10, 111, 55 };\n    int totalLength = 0;\n    List<ResidueRangeAndLength> ranges = new ArrayList<ResidueRangeAndLength>(ids.length);\n    for (int i = 0; i < ids.length; i++) {\n        ResidueRangeAndLength rr = new ResidueRangeAndLength(chains[i], starts[i], ends[i], lengths[i]);\n        assertEquals(\"The chain is incorrect\", chains[i], rr.getChainName());\n        assertEquals(\"The start is incorrect\", starts[i], rr.getStart());\n        assertEquals(\"The end is incorrect\", ends[i], rr.getEnd());\n        assertEquals(\"The length is incorrect\", lengths[i], rr.getLength());\n        ranges.add(rr);\n        totalLength += lengths[i];\n        assertEquals(\"Total length is wrong\", totalLength, ResidueRangeAndLength.calcLength(ranges));\n    }\n}","repo_id":"9","comment":"/**\n * Tests creating ResidueRanges and calculating their lengths.\n */\n","repo_name":"biojava-master/","id":2170,"method_signature":"void testWithLengths()"}