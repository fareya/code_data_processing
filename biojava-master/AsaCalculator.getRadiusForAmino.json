{"callee_method_names":["Atom.getElement","Atom.getElement","Atom.getName","AminoAcid.getAminoType","Atom.getElement","Atom.getElement","Atom.getElement","Atom.getElement","Logger.info","Logger.debug","AminoAcid.getPDBName","Atom.getElement"],"method_name":"AsaCalculator.getRadiusForAmino","method_implementation":"{\n    if (atom.getElement().equals(Element.H))\n        return Element.H.getVDWRadius();\n    // some unusual entries (e.g. 1tes) contain Deuterium atoms in standard aminoacids\n    if (atom.getElement().equals(Element.D))\n        return Element.D.getVDWRadius();\n    String atomCode = atom.getName();\n    char aa = amino.getAminoType();\n    // here we use the values that Chothia gives in his paper (as NACCESS does)\n    if (atom.getElement() == Element.O) {\n        return OXIGEN_VDW;\n    } else if (atom.getElement() == Element.S) {\n        return SULFUR_VDW;\n    } else if (atom.getElement() == Element.N) {\n        // tetrahedral Nitrogen\n        if (\"NZ\".equals(atomCode))\n            return TETRAHEDRAL_NITROGEN_VDW;\n        // trigonal Nitrogen\n        return TRIGONAL_NITROGEN_VDW;\n    } else if (atom.getElement() == Element.C) {\n        // it must be a carbon\n        if (\"C\".equals(atomCode) || \"CE1\".equals(atomCode) || \"CE2\".equals(atomCode) || \"CE3\".equals(atomCode) || \"CH2\".equals(atomCode) || \"CZ\".equals(atomCode) || \"CZ2\".equals(atomCode) || \"CZ3\".equals(atomCode)) {\n            // trigonal Carbon\n            return TRIGONAL_CARBON_VDW;\n        } else if (\"CA\".equals(atomCode) || \"CB\".equals(atomCode) || \"CE\".equals(atomCode) || \"CG1\".equals(atomCode) || \"CG2\".equals(atomCode)) {\n            // tetrahedral Carbon\n            return TETRAHEDRAL_CARBON_VDW;\n        } else // the rest of the cases (CD, CD1, CD2, CG) depend on amino acid\n        {\n            switch(aa) {\n                case 'F':\n                case 'W':\n                case 'Y':\n                case 'H':\n                case 'D':\n                case 'N':\n                    return TRIGONAL_CARBON_VDW;\n                case 'P':\n                case 'K':\n                case 'R':\n                case 'M':\n                case 'I':\n                case 'L':\n                    return TETRAHEDRAL_CARBON_VDW;\n                case 'Q':\n                case 'E':\n                    if (\"CD\".equals(atomCode))\n                        return TRIGONAL_CARBON_VDW;\n                    else if (\"CG\".equals(atomCode))\n                        return TETRAHEDRAL_CARBON_VDW;\n                default:\n                    logger.info(\"Unexpected carbon atom {} for aminoacid {}, assigning its standard vdw radius\", atomCode, aa);\n                    return Element.C.getVDWRadius();\n            }\n        }\n        // not any of the expected atoms\n    } else {\n        // non standard aas, (e.g. MSE, LLP) will always have this problem,\n        logger.debug(\"Unexpected atom {} for aminoacid {} ({}), assigning its standard vdw radius\", atomCode, aa, amino.getPDBName());\n        return atom.getElement().getVDWRadius();\n    }\n}","repo_id":"9","comment":"/**\n * Gets the radius for given amino acid and atom\n * @param amino\n * @param atom\n * @return\n */\n","repo_name":"biojava-master/","id":837,"method_signature":"double getRadiusForAmino(AminoAcid, Atom)"}