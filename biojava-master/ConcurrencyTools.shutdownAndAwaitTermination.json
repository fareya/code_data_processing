{"callee_method_names":["ThreadPoolExecutor.awaitTermination","ThreadPoolExecutor.shutdownNow","ThreadPoolExecutor.awaitTermination","Logger.warn","ThreadPoolExecutor.shutdownNow"],"method_name":"ConcurrencyTools.shutdownAndAwaitTermination","method_implementation":"{\n    shutdown();\n    if (pool != null) {\n        try {\n            // wait a while for existing tasks to terminate\n            if (!pool.awaitTermination(60L, TimeUnit.SECONDS)) {\n                // cancel currently executing tasks\n                pool.shutdownNow();\n                // wait a while for tasks to respond to being canceled\n                if (!pool.awaitTermination(60L, TimeUnit.SECONDS)) {\n                    logger.warn(\"BioJava ConcurrencyTools thread pool did not terminate\");\n                }\n            }\n        } catch (InterruptedException ie) {\n            // (re-)cancel if current thread also interrupted\n            pool.shutdownNow();\n            // preserve interrupt status\n            Thread.currentThread().interrupt();\n        }\n    }\n}","repo_id":"9","comment":"/**\n * Closes the thread pool.  Waits 1 minute for a clean exit; if necessary, waits another minute for cancellation.\n */\n","repo_name":"biojava-master/","id":2615,"method_signature":"void shutdownAndAwaitTermination()"}