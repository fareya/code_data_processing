{"callee_method_names":["Chain.getAtomGroups","Group.getAtom","Logger.debug","Group.getResidueNumber","Group.getPDBName","List<Atom>.add","List<Atom>.addAll","List<Atom>.toArray"],"method_name":"StructureTools.getAtomArray","method_implementation":"{\n    List<Atom> atoms = new ArrayList<>();\n    for (Group g : c.getAtomGroups()) {\n        // a temp container for the atoms of this group\n        List<Atom> thisGroupAtoms = new ArrayList<>();\n        // flag to check if this group contains all the requested atoms.\n        boolean thisGroupAllAtoms = true;\n        for (String atomName : atomNames) {\n            Atom a = g.getAtom(atomName);\n            if (a == null) {\n                logger.debug(\"Group {} ({}) does not have the required atom '{}'\", g.getResidueNumber(), g.getPDBName(), atomName);\n                // this group does not have a required atom, skip it...\n                thisGroupAllAtoms = false;\n                break;\n            }\n            thisGroupAtoms.add(a);\n        }\n        if (thisGroupAllAtoms) {\n            // add the atoms of this group to the array.\n            atoms.addAll(thisGroupAtoms);\n        }\n    }\n    return atoms.toArray(new Atom[0]);\n}","repo_id":"9","comment":"/**\n * Returns an array of the requested Atoms from the Chain object. Iterates\n * over all groups and checks if the requested atoms are in this group, no\n * matter if this is a AminoAcid or Hetatom group. If the group does not\n * contain all requested atoms then no atoms are added for that group.\n *\n * @param c\n *            the Chain to get the atoms from\n *\n * @param atomNames\n *            contains the atom names to be used.\n * @return an Atom[] array\n */\n","repo_name":"biojava-master/","id":1033,"method_signature":"Atom[] getAtomArray(Chain, String[])"}