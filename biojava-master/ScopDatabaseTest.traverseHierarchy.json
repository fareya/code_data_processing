{"callee_method_ids":[1556,1556,1556,1556,1556,1556,1556],"callee_method_names":["ScopDatabase.getDomainsForPDB","List<ScopDomain>.size","List<ScopDomain>.get","List<ScopDomain>.get","List<ScopDomain>.get","List<ScopDomain>.get","ScopDatabase.getScopNode","List<ScopDomain>.get","ScopDatabase.getScopDescriptionBySunid","ScopNode.getSunid","ScopNode.getSunid","ScopDescription.getName","ScopDescription.getDescription","ScopDescription.getClassificationId","ScopDatabase.getScopNode","ScopNode.getParentSunid","ScopDatabase.getScopDescriptionBySunid","ScopNode.getSunid","ScopNode.getSunid","ScopDescription.getName","ScopDescription.getDescription","ScopDescription.getClassificationId","ScopDatabase.getScopNode","ScopNode.getParentSunid","ScopDatabase.getScopDescriptionBySunid","ScopNode.getSunid","ScopNode.getSunid","ScopDescription.getName","ScopDescription.getDescription","ScopDescription.getClassificationId","ScopDatabase.getScopNode","ScopNode.getParentSunid","ScopDatabase.getScopDescriptionBySunid","ScopNode.getSunid","ScopNode.getSunid","ScopDescription.getName","ScopDescription.getDescription","ScopDescription.getClassificationId","ScopDatabase.getScopNode","ScopNode.getParentSunid","ScopDatabase.getScopDescriptionBySunid","ScopNode.getSunid","ScopNode.getSunid","ScopDescription.getName","ScopDescription.getDescription","ScopDescription.getClassificationId","ScopDatabase.getScopNode","ScopNode.getParentSunid","ScopDatabase.getScopDescriptionBySunid","ScopNode.getSunid","ScopNode.getSunid","ScopDescription.getName","ScopDescription.getDescription","ScopDescription.getClassificationId","ScopDatabase.getScopNode","ScopNode.getParentSunid","ScopDatabase.getScopDescriptionBySunid","ScopNode.getSunid","ScopNode.getSunid","ScopDescription.getName","ScopDescription.getDescription","ScopDescription.getClassificationId","ScopDatabase.getScopNode","ScopNode.getParentSunid","ScopDatabase.getScopDescriptionBySunid","ScopNode.getSunid","ScopNode.getSunid"],"method_name":"ScopDatabaseTest.traverseHierarchy","method_implementation":"{\n    String pdbId = \"4HHB\";\n    List<ScopDomain> domains = scop.getDomainsForPDB(pdbId);\n    assertEquals(tag + \"Wrong number of domains\", 4, domains.size());\n    // Check domains (order doesn't matter)\n    assertEquals(tag + \"Wrong domain\", \"d4hhba_\", domains.get(0).getScopId());\n    assertEquals(tag + \"Wrong domain\", \"d4hhbb_\", domains.get(2).getScopId());\n    assertEquals(tag + \"Wrong domain\", \"d4hhbc_\", domains.get(1).getScopId());\n    assertEquals(tag + \"Wrong domain\", \"d4hhbd_\", domains.get(3).getScopId());\n    // Check the heirarchy\n    ScopNode node = scop.getScopNode(domains.get(0).getSunid());\n    ScopDescription desc = scop.getScopDescriptionBySunid(node.getSunid());\n    assertEquals(tag, 15251, node.getSunid());\n    assertEquals(tag, \"d4hhba_\", desc.getName());\n    assertEquals(tag, \"4hhb A:\", desc.getDescription());\n    assertEquals(tag, \"a.1.1.2\", desc.getClassificationId());\n    node = scop.getScopNode(node.getParentSunid());\n    desc = scop.getScopDescriptionBySunid(node.getSunid());\n    assertEquals(tag, 46487, node.getSunid());\n    assertEquals(tag, \"-\", desc.getName());\n    assertTrue(tag, Pattern.matches(\"Human \\\\(Homo sapiens\\\\)( \\\\[TaxId: 9606\\\\])?\", desc.getDescription()));\n    assertEquals(tag, \"a.1.1.2\", desc.getClassificationId());\n    node = scop.getScopNode(node.getParentSunid());\n    desc = scop.getScopDescriptionBySunid(node.getSunid());\n    assertEquals(tag, 46486, node.getSunid());\n    assertEquals(tag, \"-\", desc.getName());\n    assertEquals(tag, \"Hemoglobin, alpha-chain\", desc.getDescription());\n    assertEquals(tag, \"a.1.1.2\", desc.getClassificationId());\n    node = scop.getScopNode(node.getParentSunid());\n    desc = scop.getScopDescriptionBySunid(node.getSunid());\n    assertEquals(tag, 46463, node.getSunid());\n    assertEquals(tag, \"-\", desc.getName());\n    assertEquals(tag, \"Globins\", desc.getDescription());\n    assertEquals(tag, \"a.1.1.2\", desc.getClassificationId());\n    node = scop.getScopNode(node.getParentSunid());\n    desc = scop.getScopDescriptionBySunid(node.getSunid());\n    assertEquals(tag, 46458, node.getSunid());\n    assertEquals(tag, \"-\", desc.getName());\n    assertEquals(tag, \"Globin-like\", desc.getDescription());\n    assertEquals(tag, \"a.1.1\", desc.getClassificationId());\n    node = scop.getScopNode(node.getParentSunid());\n    desc = scop.getScopDescriptionBySunid(node.getSunid());\n    assertEquals(tag, 46457, node.getSunid());\n    assertEquals(tag, \"-\", desc.getName());\n    assertEquals(tag, \"Globin-like\", desc.getDescription());\n    assertEquals(tag, \"a.1\", desc.getClassificationId());\n    node = scop.getScopNode(node.getParentSunid());\n    desc = scop.getScopDescriptionBySunid(node.getSunid());\n    assertEquals(tag, 46456, node.getSunid());\n    assertEquals(tag, \"-\", desc.getName());\n    assertEquals(tag, \"All alpha proteins\", desc.getDescription());\n    assertEquals(tag, \"a\", desc.getClassificationId());\n    // root node\n    node = scop.getScopNode(node.getParentSunid());\n    desc = scop.getScopDescriptionBySunid(node.getSunid());\n    assertEquals(tag, 0, node.getSunid());\n    assertNull(tag + \"Root should not have a description\", desc);\n}","repo_id":"9","comment":"/**\n * Traverse through the SCOP hierarchy\n */\n","repo_name":"biojava-master/","id":167,"method_signature":"void traverseHierarchy()"}