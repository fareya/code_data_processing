{"callee_method_names":["FastaHeaderFormatInterface<GeneSequence, NucleotideCompound>.getHeader","OutputStream.write","OutputStream.write","String.getBytes","OutputStream.write","String.getSequence5PrimeTo3Prime","String.toLowerCase","String.getBioBegin","String.getBioEnd","String.getExonSequences","String.getStrand","ExonSequence.getBioBegin","ExonSequence.getBioEnd","ExonSequence.getBioEnd","ExonSequence.getBioBegin","StringBuilder.length","StringBuilder.length","Logger.warn","String.getAccession","String.getStrand","ExonSequence.getBioBegin","ExonSequence.getBioEnd","StringBuilder.charAt","String.toUpperCase","StringBuilder.setCharAt","StringBuilder.toString","String.length","OutputStream.write","String.charAt","OutputStream.write","String.getLength","OutputStream.write"],"method_name":"FastaGeneWriter.process","method_implementation":"{\n    byte[] lineSep = System.getProperty(\"line.separator\").getBytes();\n    for (GeneSequence sequence : sequences) {\n        String header = headerFormat.getHeader(sequence);\n        os.write('>');\n        os.write(header.getBytes());\n        os.write(lineSep);\n        int compoundCount = 0;\n        String seq = \"\";\n        //GeneSequence currently has a strand attribute to indicate direction\n        seq = sequence.getSequence5PrimeTo3Prime().getSequenceAsString();\n        if (showExonUppercase) {\n            StringBuilder sb = new StringBuilder(seq.toLowerCase());\n            int geneBioBegin = sequence.getBioBegin();\n            int geneBioEnd = sequence.getBioEnd();\n            for (ExonSequence exonSequence : sequence.getExonSequences()) {\n                int featureBioBegin = 0;\n                int featureBioEnd = 0;\n                if (sequence.getStrand() != Strand.NEGATIVE) {\n                    featureBioBegin = exonSequence.getBioBegin() - geneBioBegin;\n                    featureBioEnd = exonSequence.getBioEnd() - geneBioBegin;\n                } else {\n                    featureBioBegin = geneBioEnd - exonSequence.getBioEnd();\n                    featureBioEnd = geneBioEnd - exonSequence.getBioBegin();\n                }\n                if (featureBioBegin < 0 || featureBioEnd < 0 || featureBioEnd > sb.length() || featureBioBegin > sb.length()) {\n                    logger.warn(\"Bad Feature, Accession: {}, Sequence Strand: {}, Gene Begin: {}, Gene End: {}, Exon Begin: {}, Exon End: {}\", sequence.getAccession().toString(), sequence.getStrand(), geneBioBegin, geneBioEnd, exonSequence.getBioBegin(), exonSequence.getBioEnd());\n                } else {\n                    for (int i = featureBioBegin; i <= featureBioEnd; i++) {\n                        char ch = sb.charAt(i);\n                        //probably not the fastest but the safest way if language is not standard ASCII\n                        String temp = String.valueOf(ch);\n                        ch = temp.toUpperCase().charAt(0);\n                        sb.setCharAt(i, ch);\n                    }\n                }\n            }\n            seq = sb.toString();\n        }\n        for (int i = 0; i < seq.length(); i++) {\n            os.write(seq.charAt(i));\n            compoundCount++;\n            if (compoundCount == lineLength) {\n                os.write(lineSep);\n                compoundCount = 0;\n            }\n        }\n        //If we had sequence which was a reciprocal of line length\n        //then don't write the line terminator as this has already written\n        //it\n        if ((sequence.getLength() % getLineLength()) != 0) {\n            os.write(lineSep);\n        }\n    }\n}","repo_id":"9","comment":"/**\n * @throws Exception\n */\n","repo_name":"biojava-master/","id":2725,"method_signature":"void process()"}