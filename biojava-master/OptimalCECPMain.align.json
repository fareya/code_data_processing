{"callee_method_names":["ConfigStrucAligParams.isTryAllCPs","ConfigStrucAligParams.getCPPoint"],"method_name":"OptimalCECPMain.align","method_implementation":"{\n    if (params.isTryAllCPs()) {\n        return alignOptimal(ca1, ca2, param, null);\n    } else {\n        int cpPoint = params.getCPPoint();\n        return alignPermuted(ca1, ca2, param, cpPoint);\n    }\n}","repo_id":"9","comment":"/**\n * Finds the optimal alignment between two proteins allowing for a circular\n * permutation (CP).\n *\n * The precise algorithm is controlled by the\n * {@link OptimalCECPParameters parameters}. If the parameter\n * {@link OptimalCECPParameters#isTryAllCPs() tryAllCPs} is true, all possible\n * CP sites are tried and the optimal site is returned. Otherwise, the\n * {@link OptimalCECPParameters#getCPPoint() cpPoint} parameter is used to\n * determine the CP point, greatly reducing the computation required.\n *\n * @param ca1 CA atoms of the first protein\n * @param ca2 CA atoms of the second protein\n * @param param {@link CeParameters} object\n * @return The best-scoring alignment\n * @throws StructureException\n *\n * @see #alignOptimal(Atom[], Atom[], Object, AFPChain[])\n */\n","repo_name":"biojava-master/","id":789,"method_signature":"AFPChain align(Atom[], Atom[], Object)"}