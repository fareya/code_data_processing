{"callee_method_ids":[619],"callee_method_names":["List<Atom[]>.add","AtomCache.getAtoms","MultipleAlignmentEnsemble.setAtomArrays","MultipleAlignmentEnsemble.getDistanceMatrix","MultipleAlignmentEnsemble.setStructureIdentifiers","MultipleAlignmentEnsemble.setAlgorithmName","MultipleAlignmentEnsemble.setVersion","MultipleAlignmentEnsemble.setIoTime","MultipleAlignmentEnsemble.setCalculationTime","Block.setAlignRes","Block.setAlignRes","Block.setAlignRes","Block.getAlignRes","Block.getAlignRes","Block.getAlignRes","Block.getAlignRes","Block.getAlignRes","Block.getAlignRes","Block.getAlignRes","Block.getAlignRes","Block.getAlignRes","Block.getAlignRes","Block.getAlignRes","Block.getAlignRes","MultipleSuperimposer.superimpose","MultipleAlignment.length","MultipleAlignment.getCoreLength"],"method_name":"TestSampleGenerator.testAlignment2","method_implementation":"{\n    //Download the globin structures\n    List<StructureIdentifier> names = Arrays.<StructureIdentifier>asList(new StructureName(\"1mbc\"), new StructureName(\"1hlb\"), new StructureName(\"1thb.A\"), new StructureName(\"1ith.A\"));\n    AtomCache cache = new AtomCache();\n    List<Atom[]> atomArrays = new ArrayList<Atom[]>();\n    for (StructureIdentifier name : names) atomArrays.add(cache.getAtoms(name));\n    MultipleAlignmentEnsemble ensemble = new MultipleAlignmentEnsembleImpl();\n    MultipleAlignment alignment = new MultipleAlignmentImpl(ensemble);\n    //Set the ensemble properties (all filled)\n    ensemble.setAtomArrays(atomArrays);\n    ensemble.getDistanceMatrix();\n    ensemble.setStructureIdentifiers(names);\n    ensemble.setAlgorithmName(\"testAlignment\");\n    ensemble.setVersion(\"2.0\");\n    ensemble.setIoTime((long) 1000000000);\n    ensemble.setCalculationTime((long) 1000000000);\n    //Build the aligned positions: 2 BlockSets, 3 Blocks\n    BlockSet blockSet1 = new BlockSetImpl(alignment);\n    BlockSet blockSet2 = new BlockSetImpl(alignment);\n    Block block1 = new BlockImpl(blockSet1);\n    Block block2 = new BlockImpl(blockSet1);\n    Block block3 = new BlockImpl(blockSet2);\n    block1.setAlignRes(new ArrayList<List<Integer>>());\n    block2.setAlignRes(new ArrayList<List<Integer>>());\n    block3.setAlignRes(new ArrayList<List<Integer>>());\n    List<Integer> aligned11 = Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21);\n    List<Integer> aligned12 = Arrays.asList(29, 30, 31, 32, 33, 34, 35, 36, 38);\n    List<Integer> aligned13 = Arrays.asList(123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134);\n    List<Integer> aligned21 = Arrays.asList(10, 11, 12, 13, null, 15, 16, 17, null, 19, 20, 21, 22, 23, 24, 25, null, 27, 28, 29, 30, null);\n    List<Integer> aligned22 = Arrays.asList(39, 40, 41, 42, 43, 44, 45, 46, 48);\n    List<Integer> aligned23 = Arrays.asList(133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144);\n    List<Integer> aligned31 = Arrays.asList(0, 1, 2, 3, null, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21);\n    List<Integer> aligned32 = Arrays.asList(29, 30, 31, 32, 33, 34, 35, 36, 38);\n    List<Integer> aligned33 = Arrays.asList(117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128);\n    List<Integer> aligned41 = Arrays.asList(0, 1, 2, 3, null, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, null, 17, 18, 19, 20, 21);\n    List<Integer> aligned42 = Arrays.asList(30, 31, 32, 33, 34, 35, 36, 37, 39);\n    List<Integer> aligned43 = Arrays.asList(121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132);\n    block1.getAlignRes().add(aligned11);\n    block1.getAlignRes().add(aligned21);\n    block1.getAlignRes().add(aligned31);\n    block1.getAlignRes().add(aligned41);\n    block2.getAlignRes().add(aligned12);\n    block2.getAlignRes().add(aligned22);\n    block2.getAlignRes().add(aligned32);\n    block2.getAlignRes().add(aligned42);\n    block3.getAlignRes().add(aligned13);\n    block3.getAlignRes().add(aligned23);\n    block3.getAlignRes().add(aligned33);\n    block3.getAlignRes().add(aligned43);\n    //Superposition and scores\n    MultipleSuperimposer imposer = new ReferenceSuperimposer();\n    imposer.superimpose(alignment);\n    MultipleAlignmentScorer.calculateScores(alignment);\n    alignment.length();\n    alignment.getCoreLength();\n    return alignment;\n}","repo_id":"9","comment":"/**\n * Method that builds a MultipleAlignment of 4 structures with 2 BlockSets,\n * with 2 and 1 Blocks respectively. The alignment contains gaps\n * and non-consecutive residues, ideal to test for all possible cases.\n * The alignment is manually constructed. All ensemble fields are filled,\n * so that no one is null.<p>\n * Atoms of four structures (globins) are downloaded.\n *\n * @return MultipleAlignment the test multiple alignment\n * @throws StructureException\n * @throws IOException\n */\n","repo_name":"biojava-master/","id":2193,"method_signature":"MultipleAlignment testAlignment2()"}