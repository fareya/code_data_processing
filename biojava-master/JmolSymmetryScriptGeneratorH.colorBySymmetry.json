{"callee_method_ids":[1971,1885,1884],"callee_method_names":["HelixAxisAligner.getHelixLayers","HelixAxisAligner.getSubunits","QuatSymmetrySubunits.getModelNumbers","QuatSymmetrySubunits.getChainIds","QuatSymmetrySubunits.getClusterIds","QuatSymmetrySubunits.getSubunitCount","List<List<Integer>>.size","List<List<Integer>>.get","List<List<Integer>>.get","List<Integer>.get","Color4f.scale","Map<Color4f, List<String>>.get","Map<Color4f, List<String>>.put","List<String>.add"],"method_name":"JmolSymmetryScriptGeneratorH.colorBySymmetry","method_implementation":"{\n    List<List<Integer>> units = helixAxisAligner.getHelixLayers().getByLargestContacts().getLayerLines();\n    units = orientLayerLines(units);\n    QuatSymmetrySubunits subunits = helixAxisAligner.getSubunits();\n    List<Integer> modelNumbers = subunits.getModelNumbers();\n    List<String> chainIds = subunits.getChainIds();\n    List<Integer> clusterIds = subunits.getClusterIds();\n    int clusterCount = Collections.max(clusterIds) + 1;\n    Map<Color4f, List<String>> colorMap = new HashMap<Color4f, List<String>>();\n    int maxLen = 0;\n    for (List<Integer> unit : units) {\n        maxLen = Math.max(maxLen, unit.size());\n    }\n    //\t\tColor4f[] colors = getSymmetryColors(permutation.size());\n    Color4f[] colors = getSymmetryColors(subunits.getSubunitCount());\n    int count = 0;\n    for (int i = 0; i < maxLen; i++) {\n        for (int j = 0; j < units.size(); j++) {\n            int m = units.get(j).size();\n            if (i < m) {\n                int subunit = units.get(j).get(i);\n                int cluster = clusterIds.get(subunit);\n                float scale = 0.3f + 0.7f * (cluster + 1) / clusterCount;\n                Color4f c = new Color4f(colors[count]);\n                count++;\n                c.scale(scale);\n                List<String> ids = colorMap.get(c);\n                if (ids == null) {\n                    ids = new ArrayList<String>();\n                    colorMap.put(c, ids);\n                }\n                String id = getChainSpecification(modelNumbers, chainIds, subunit);\n                ids.add(id);\n            }\n        }\n    }\n    String coloring = defaultColoring + getJmolColorScript(colorMap);\n    return coloring;\n}","repo_id":"9","comment":"/**\n * Returns a Jmol script that colors subunits to highlight the symmetry within a structure\n * Different subunits should have a consistent color scheme or different shade of the same colors\n * @return Jmol script\n */\n","repo_name":"biojava-master/","id":3420,"method_signature":"String colorBySymmetry()"}