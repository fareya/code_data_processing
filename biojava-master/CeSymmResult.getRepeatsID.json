{"callee_method_names":["StructureIdentifier.toCanonical","MultipleAlignment.getBlocks","Atom[].getGroup","Block.getStartResidue","Atom[].getGroup","Block.getFinalResidue","ResidueNumber.getChainName","List<StructureIdentifier>.add"],"method_name":"CeSymmResult.getRepeatsID","method_implementation":"{\n    if (!isRefined())\n        return null;\n    List<StructureIdentifier> repeats = new ArrayList<StructureIdentifier>(numRepeats);\n    PdbId pdbId = structureId.toCanonical().getPdbId();\n    Block align = multipleAlignment.getBlocks().get(0);\n    for (int su = 0; su < numRepeats; su++) {\n        // Get the start and end residues of the repeat\n        ResidueNumber res1 = atoms[align.getStartResidue(su)].getGroup().getResidueNumber();\n        ResidueNumber res2 = atoms[align.getFinalResidue(su)].getGroup().getResidueNumber();\n        ResidueRange range = new ResidueRange(res1.getChainName(), res1, res2);\n        StructureIdentifier id = new SubstructureIdentifier(pdbId, Arrays.asList(range));\n        repeats.add(id);\n    }\n    return repeats;\n}","repo_id":"9","comment":"/**\n * Return the symmetric repeats as structure identifiers, if the result is\n * symmetric and it was refined, return null otherwise.\n *\n * @return List of StructureIdentifiers or null if not defined\n * @throws StructureException\n */\n","repo_name":"biojava-master/","id":2054,"method_signature":"List<StructureIdentifier> getRepeatsID()"}