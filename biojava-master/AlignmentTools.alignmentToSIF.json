{"callee_method_ids":[487,490,489,1334,1334,1334,1334,1334,1334],"callee_method_names":["AFPChain.getName1","AFPChain.getName2","AFPChain.getBlockNum","AFPChain.getOptLen","AFPChain.getOptAln","Atom[].getGroup","Atom[].getGroup","ResidueNumber.getChainName","ResidueNumber.toString","ResidueNumber.getChainName","ResidueNumber.toString","Writer.write","Atom[].getGroup","ResidueNumber.getChainName","ResidueNumber.toString","Atom[].getGroup","ResidueNumber.getChainName","ResidueNumber.toString","Writer.write","String.equals","Atom[].getGroup","Atom[].getGroup","Atom[].getGroup","Atom[].getGroup","Atom[].getGroup","ResidueNumber.getChainName","ResidueNumber.toString","Atom[].getGroup","ResidueNumber.getChainName","ResidueNumber.toString","Writer.write"],"method_name":"AlignmentTools.alignmentToSIF","method_implementation":"{\n    //out.write(\"Res1\\tInteraction\\tRes2\\n\");\n    String name1 = afpChain.getName1();\n    String name2 = afpChain.getName2();\n    if (name1 == null)\n        name1 = \"\";\n    else\n        name1 += \":\";\n    if (name2 == null)\n        name2 = \"\";\n    else\n        name2 += \":\";\n    // Print alignment edges\n    int nblocks = afpChain.getBlockNum();\n    int[] blockLen = afpChain.getOptLen();\n    int[][][] optAlign = afpChain.getOptAln();\n    for (int b = 0; b < nblocks; b++) {\n        for (int r = 0; r < blockLen[b]; r++) {\n            int res1 = optAlign[b][0][r];\n            int res2 = optAlign[b][1][r];\n            ResidueNumber rn1 = ca1[res1].getGroup().getResidueNumber();\n            ResidueNumber rn2 = ca2[res2].getGroup().getResidueNumber();\n            String node1 = name1 + rn1.getChainName() + rn1.toString();\n            String node2 = name2 + rn2.getChainName() + rn2.toString();\n            out.write(String.format(\"%s\\t%s\\t%s\\n\", node1, alignmentInteraction, node2));\n        }\n    }\n    // Print first backbone edges\n    ResidueNumber rn = ca1[0].getGroup().getResidueNumber();\n    String last = name1 + rn.getChainName() + rn.toString();\n    for (int i = 1; i < ca1.length; i++) {\n        rn = ca1[i].getGroup().getResidueNumber();\n        String curr = name1 + rn.getChainName() + rn.toString();\n        out.write(String.format(\"%s\\t%s\\t%s\\n\", last, backboneInteraction, curr));\n        last = curr;\n    }\n    // Print second backbone edges, if the proteins differ\n    // Do some quick checks for whether the proteins differ\n    // (Not perfect, but should detect major differences and CPs.)\n    if (!name1.equals(name2) || ca1.length != ca2.length || (ca1.length > 0 && ca1[0].getGroup() != null && ca2[0].getGroup() != null && !ca1[0].getGroup().getResidueNumber().equals(ca2[0].getGroup().getResidueNumber()))) {\n        rn = ca2[0].getGroup().getResidueNumber();\n        last = name2 + rn.getChainName() + rn.toString();\n        for (int i = 1; i < ca2.length; i++) {\n            rn = ca2[i].getGroup().getResidueNumber();\n            String curr = name2 + rn.getChainName() + rn.toString();\n            out.write(String.format(\"%s\\t%s\\t%s\\n\", last, backboneInteraction, curr));\n            last = curr;\n        }\n    }\n}","repo_id":"9","comment":"/**\n * Creates a simple interaction format (SIF) file for an alignment.\n *\n * The SIF file can be read by network software (eg Cytoscape) to analyze\n * alignments as graphs.\n *\n * This function creates a graph with residues as nodes and two types of edges:\n *   1. backbone edges, which connect adjacent residues in the aligned protein\n *   2. alignment edges, which connect aligned residues\n *\n * @param out Stream to write to\n * @param afpChain alignment to write\n * @param ca1 First protein, used to generate node names\n * @param ca2 Second protein, used to generate node names\n * @param backboneInteraction Two-letter string used to identify backbone edges\n * @param alignmentInteraction Two-letter string used to identify alignment edges\n * @throws IOException\n */\n","repo_name":"biojava-master/","id":600,"method_signature":"void alignmentToSIF(Writer, AFPChain, Atom[], Atom[], String, String)"}