{"callee_method_names":["Map<Integer,Integer>.size","Map<Integer,Double>.clear","Map<Integer,Integer>.keySet","Map<Integer,Integer>.keySet","Map<Integer, Integer>.get","Map<Integer,Double>.put"],"method_name":"SequenceFunctionRefiner.initializeScores","method_implementation":"{\n    if (scores == null) {\n        scores = new HashMap<Integer, Double>(alignment.size());\n    } else {\n        scores.clear();\n    }\n    Map<Integer, Integer> alignK = AlignmentTools.applyAlignment(alignment, k);\n    // calculate input range\n    int maxPre = Integer.MIN_VALUE;\n    int minPre = Integer.MAX_VALUE;\n    for (Integer pre : alignment.keySet()) {\n        if (pre > maxPre)\n            maxPre = pre;\n        if (pre < minPre)\n            minPre = pre;\n    }\n    for (Integer pre : alignment.keySet()) {\n        Integer image = alignK.get(pre);\n        // Use the absolute error score, |x - f^k(x)|\n        double score = scoreAbsError(pre, image, minPre, maxPre);\n        scores.put(pre, score);\n    }\n    return scores;\n}","repo_id":"9","comment":"/**\n * Calculates all scores for an alignment\n * @param alignment\n * @param scores A mapping from residues to scores, which will be updated or\n * \tcreated if null\n * @return scores\n */\n","repo_name":"biojava-master/","id":2066,"method_signature":"Map<Integer,Double> initializeScores(Map, Map, int)"}