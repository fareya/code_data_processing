{"callee_method_names":["String.length","String.substring","ArrayList.size","String.length","String.length","String.length","String.substring","String.substring","String.substring","String.length","String.substring","String.length","String.substring"],"method_name":"Stoichiometry.generateAlpha","method_implementation":"{\n    String key;\n    int alphabetInd;\n    switch(strategy) {\n        case CYCLE:\n            alphabetInd = clusterInd % alphabet.length();\n            key = alphabet.substring(alphabetInd, alphabetInd + 1);\n            break;\n        case DOUBLE:\n            if (orderedClusters.size() > alphabet.length()) {\n                int alphabetInd1 = clusterInd / alphabet.length();\n                int alphabetInd2 = clusterInd % alphabet.length();\n                key = alphabet.substring(alphabetInd1, alphabetInd1 + 1);\n                key += alphabet.substring(alphabetInd2, alphabetInd2 + 1);\n            } else {\n                key = alphabet.substring(clusterInd, clusterInd + 1);\n            }\n            break;\n        case QUESTIONMARK:\n            key = \"?\";\n            if (clusterInd < alphabet.length()) {\n                key = alphabet.substring(clusterInd, clusterInd + 1);\n            }\n            break;\n        case CUSTOM:\n            throw new IllegalStateException(\"Alphas should be handled by the custom generator function.\");\n        default:\n            key = \"?\";\n            if (clusterInd < alphabet.length()) {\n                key = alphabet.substring(clusterInd, clusterInd + 1);\n            }\n            break;\n    }\n    return key;\n}","repo_id":"9","comment":"/**\n * Produce a string (\"alpha\") that describes each component depending on the current strategy.\n * @param clusterInd\n *          component index\n * @return alphanumeric string.\n */\n","repo_name":"biojava-master/","id":1888,"method_signature":"String generateAlpha(int)"}