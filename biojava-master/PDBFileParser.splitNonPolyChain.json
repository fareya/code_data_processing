{"callee_method_names":["Chain.getAtomGroups","List<Chain>.add","Chain.setName","Chain.getName","Group.isWater","List<Chain>.add","Chain.setName","Chain.getName","Group.isWater","Chain.addGroup","List<Chain>.add","List<Chain>.add","List<List<Chain>>.add","List<List<Chain>>.add"],"method_name":"PDBFileParser.splitNonPolyChain","method_implementation":"{\n    List<Chain> splitNonPolys = new ArrayList<>();\n    List<Chain> waterChains = new ArrayList<>();\n    Chain split = null;\n    boolean previousGroupIsWater = false;\n    for (Group g : chain.getAtomGroups()) {\n        if (!previousGroupIsWater) {\n            // add last one if there's one\n            if (split != null) {\n                splitNonPolys.add(split);\n            }\n            split = new ChainImpl();\n            split.setName(chain.getName());\n        } else if (!g.isWater()) {\n            // previous group is water and this group is not water: we change from a water chain to a non-poly\n            // we'll need to add now the water chain to the list of water chains\n            waterChains.add(split);\n            split = new ChainImpl();\n            split.setName(chain.getName());\n        }\n        if (g.isWater()) {\n            previousGroupIsWater = true;\n        } else {\n            previousGroupIsWater = false;\n        }\n        // this should include alt locs (referenced from the main group)\n        split.addGroup(g);\n    }\n    // adding the last split chain: either to water or non-poly depending on what was the last seen group\n    if (split != null) {\n        if (previousGroupIsWater)\n            waterChains.add(split);\n        else\n            splitNonPolys.add(split);\n    }\n    List<List<Chain>> all = new ArrayList<>(2);\n    all.add(splitNonPolys);\n    all.add(waterChains);\n    return all;\n}","repo_id":"9","comment":"/**\n * Split the given chain (containing non-polymer groups and water groups only)\n * into individual chains per non-polymer group and individual chains per contiguous sets of water groups.\n * @param chain\n * @return a list of lists of size 2: first list is the split non-poly chains, second list is the split water chains\n */\n","repo_name":"biojava-master/","id":1196,"method_signature":"List<List<Chain>> splitNonPolyChain(Chain)"}