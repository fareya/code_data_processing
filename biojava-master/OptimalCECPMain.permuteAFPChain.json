{"callee_method_ids":[487,504,506,505],"callee_method_names":["AFPChain.getCa2Length","AFPChain.getBlockNum","AFPChain.setSequentialAlignment","AFPChain.setDistanceMatrix","AFPChain.getDistanceMatrix","AFPChain.setDisTable2","AFPChain.getDisTable2"],"method_name":"OptimalCECPMain.permuteAFPChain","method_implementation":"{\n    int ca2len = afpChain.getCa2Length();\n    //fix up cp to be positive\n    if (cp == 0) {\n        return;\n    }\n    if (cp < 0) {\n        cp = ca2len + cp;\n    }\n    if (cp < 0 || cp >= ca2len) {\n        throw new ArrayIndexOutOfBoundsException(\"Permutation point (\" + cp + \") must be between -ca2.length and ca2.length-1\");\n    }\n    // Fix up optAln\n    permuteOptAln(afpChain, cp);\n    if (afpChain.getBlockNum() > 1)\n        afpChain.setSequentialAlignment(false);\n    // fix up matrices\n    // ca1 corresponds to row indices, while ca2 corresponds to column indices.\n    afpChain.setDistanceMatrix(permuteMatrix(afpChain.getDistanceMatrix(), 0, -cp));\n    // this is square, so permute both\n    afpChain.setDisTable2(permuteMatrix(afpChain.getDisTable2(), -cp, -cp));\n    //TODO fix up other AFP parameters?\n}","repo_id":"9","comment":"/**\n * Permute the second protein of afpChain by the specified number of residues.\n * @param afpChain Input alignment\n * @param cp Amount leftwards (or rightward, if negative) to shift the\n * @return A new alignment equivalent to afpChain after the permutations\n */\n","repo_name":"biojava-master/","id":785,"method_signature":"void permuteAFPChain(AFPChain, int)"}