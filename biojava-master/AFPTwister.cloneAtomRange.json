{"callee_method_names":["Logger.debug","Atom[].getGroup","Group.clone","Group.getAtom","Atom[].getName","Group.getChain","int.getName","Chain.getName","Chain.setName","Chain.getName","List<Chain>.add","Chain.addGroup"],"method_name":"AFPTwister.cloneAtomRange","method_implementation":"{\n    logger.debug(\"modifyCod from: {} to: {}\", r1, r2);\n    // special clone method, can;t use StructureTools.cloneCAArray, since we\n    // access the data\n    // slightly differently here.\n    List<Chain> model = new ArrayList<>();\n    for (int i = r1; i < r2; i++) {\n        Group g = p2[i].getGroup();\n        Group newG = (Group) g.clone();\n        p1[i] = newG.getAtom(p2[i].getName());\n        Chain parentC = g.getChain();\n        Chain newChain = null;\n        for (Chain c : model) {\n            if (c.getName().equals(parentC.getName())) {\n                newChain = c;\n                break;\n            }\n        }\n        if (newChain == null) {\n            newChain = new ChainImpl();\n            newChain.setName(parentC.getName());\n            model.add(newChain);\n        }\n        newChain.addGroup(newG);\n    }\n    // modify caCod\n}","repo_id":"9","comment":"// orig name: modifyCod\n","repo_name":"biojava-master/","id":542,"method_signature":"void cloneAtomRange(Atom[], Atom[], int, int)"}