{"callee_method_ids":[3530,3539,3540,3679,3681,3680],"callee_method_names":["LinkedHashMap.values","CoxCoefficient.getName","CoxCoefficient.getMean","CoxCoefficient.getStandardDeviation","LinkedHashMap.size","LinkedHashMap.keySet","LinkedHashMap.get","WaldTestInfo.getTest","WaldTestInfo.getDf","WaldTestInfo.getPvalue","CoxMethod.name"],"method_name":"CoxInfo.toString","method_implementation":"{\n    String o = beginLine + fmtpl(\"\", 9) + fmtpl(\"Avg\", 9) + fmtpl(\"SD\", 9) + endLine;\n    for (CoxCoefficient coe : coefficientsList.values()) {\n        o = o + beginLine + fmtpr(coe.getName(), 9) + fmt(coe.getMean(), 4, 9) + fmt(coe.getStandardDeviation(), 4, 9) + endLine;\n    }\n    o = o + beginLine + endLine;\n    o = o + beginLine + \"n= \" + this.numSamples + \", number of events=\" + this.numEvents + endLine;\n    o = o + getCoefficientText(true, beginLine, del, \"\", endLine);\n    o = o + beginLine + endLine;\n    if (baselineSurvivorFunction.size() > 0) {\n        o = o + beginLine + \"Baseline Survivor Function (at predictor means)\" + endLine;\n        for (Double time : baselineSurvivorFunction.keySet()) {\n            Double mean = baselineSurvivorFunction.get(time);\n            o = o + beginLine + fmt(time, 4, 10) + fmt(mean, 4, 10) + endLine;\n        }\n    }\n    o = o + beginLine + endLine;\n    o = o + beginLine + \"Overall Model Fit\" + endLine;\n    o = o + beginLine + \"Iterations=\" + iterations + endLine;\n    o = o + beginLine + \"Likelihood ratio test = \" + fmt(this.logTest, 2, 0) + \" df=\" + this.degreeFreedom + \" p-value=\" + fmt(this.logTestpval, 7, 0) + endLine;\n    o = o + beginLine + \"Wald test             = \" + fmt(waldTestInfo.getTest(), 2, 0) + \" df=\" + waldTestInfo.getDf() + \" p-value=\" + fmt(waldTestInfo.getPvalue(), 7, 0) + endLine;\n    o = o + beginLine + \"Score (logrank) test  = \" + fmt(scoreLogrankTest, 2, 0) + \" df=\" + ((int) (this.degreeFreedom)) + \" p-value=\" + fmt(this.scoreLogrankTestpvalue, 7, 0);\n    if (this.rscore != null) {\n        o = o + \",  Robust = \" + fmt(rscore, 2, 0) + \" p-value=\" + fmt(rscoreLogrankTestpvalue, 7, 0);\n    }\n    o = o + endLine;\n    //       o = o + \"Rank of solution flag=\" + flag + \"\\r\\n\";\n    //       o = o + \"Log lik Initial=\" + loglikInit + \"\\r\\n\";\n    //       o = o + \"Log lik Final=\" + loglikFinal + \"\\r\\n\";\n    o = o + beginLine + \"Method=\" + method.name() + endLine;\n    return o;\n}","repo_id":"9","comment":"/**\n * @param beginLine\n * @param del\n * @param endLine\n * @return\n */\n","repo_name":"biojava-master/","id":3623,"method_signature":"String toString(String, String, String)"}