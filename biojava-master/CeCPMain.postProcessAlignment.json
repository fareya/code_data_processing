{"callee_method_ids":[505,506],"callee_method_names":["AFPChain.getDistanceMatrix","Matrix.getRowDimension","Matrix.getColumnDimension","Matrix.getMatrix","Matrix.getRowDimension","Matrix.getColumnDimension","AFPChain.setDistanceMatrix","AFPChain.getOptLength"],"method_name":"CeCPMain.postProcessAlignment","method_implementation":"{\n    // remove bottom half of the matrix\n    Matrix doubledMatrix = afpChain.getDistanceMatrix();\n    // the matrix can be null if the alignment is too short.\n    if (doubledMatrix != null) {\n        assert (doubledMatrix.getRowDimension() == ca1.length);\n        assert (doubledMatrix.getColumnDimension() == ca2m.length);\n        Matrix singleMatrix = doubledMatrix.getMatrix(0, ca1.length - 1, 0, (ca2m.length / 2) - 1);\n        assert (singleMatrix.getRowDimension() == ca1.length);\n        assert (singleMatrix.getColumnDimension() == (ca2m.length / 2));\n        afpChain.setDistanceMatrix(singleMatrix);\n    }\n    // Check for circular permutations\n    int alignLen = afpChain.getOptLength();\n    if (alignLen > 0) {\n        afpChain = filterDuplicateAFPs(afpChain, calculator, ca1, ca2m, param);\n    }\n    return afpChain;\n}","repo_id":"9","comment":"/**\n * Circular permutation specific code to be run after the standard CE alignment\n *\n * @param afpChain The finished alignment\n * @param ca1 CA atoms of the first protein\n * @param ca2m A duplicated copy of the second protein\n * @param calculator The CECalculator used to create afpChain\n * @param param Parameters\n * @throws StructureException\n */\n","repo_name":"biojava-master/","id":776,"method_signature":"AFPChain postProcessAlignment(AFPChain, Atom[], Atom[], CECalculator, CECPParameters)"}