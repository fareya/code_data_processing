{"callee_method_ids":[487,487,489,489],"callee_method_names":["AFPChain.getBlockNum","AFPChain.getBlockNum","AFPChain.getOptAln","AFPChain.getBlockSize","AFPChain.getOptAln"],"method_name":"AlignmentTools.deleteColumn","method_implementation":"{\n    // Check validity of the inputs\n    if (afpChain.getBlockNum() <= block) {\n        throw new IndexOutOfBoundsException(String.format(\"Block index requested (%d) is higher than the total number of AFPChain blocks (%d).\", block, afpChain.getBlockNum()));\n    }\n    if (afpChain.getOptAln()[block][0].length <= pos) {\n        throw new IndexOutOfBoundsException(String.format(\"Position index requested (%d) is higher than the total number of aligned position in the AFPChain block (%d).\", block, afpChain.getBlockSize()[block]));\n    }\n    int[][][] optAln = afpChain.getOptAln();\n    int[] newPos0 = new int[optAln[block][0].length - 1];\n    int[] newPos1 = new int[optAln[block][1].length - 1];\n    int position = 0;\n    for (int p = 0; p < optAln[block][0].length; p++) {\n        if (p == pos)\n            continue;\n        newPos0[position] = optAln[block][0][p];\n        newPos1[position] = optAln[block][1][p];\n        position++;\n    }\n    optAln[block][0] = newPos0;\n    optAln[block][1] = newPos1;\n    return AlignmentTools.replaceOptAln(optAln, afpChain, ca1, ca2);\n}","repo_id":"9","comment":"/**\n * Delete an alignment position from the original alignment object.\n *\n * @param afpChain\n *            original alignment, will be modified\n * @param ca1\n *            atom array, will not be modified\n * @param ca2\n *            atom array, will not be modified\n * @param block\n *            block of the alignment position\n * @param pos\n *            position index in the block\n * @return the original alignment, with the alignment position removed\n * @throws StructureException\n */\n","repo_name":"biojava-master/","id":607,"method_signature":"AFPChain deleteColumn(AFPChain, Atom[], Atom[], int, int)"}