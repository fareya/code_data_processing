{"callee_method_names":["String.length","String.charAt","CompoundSet<NucleotideCompound>.getCompoundForString","StringBuilder.append","NucleotideCompound.getComplement","StringBuilder.toString","String.toUpperCase","DNASequence.setAccession","Logger.error","Enumeration<JarEntry>.getMessage"],"method_name":"GeneSequence.getSequence5PrimeTo3Prime","method_implementation":"{\n    String sequence = getSequenceAsString(this.getBioBegin(), this.getBioEnd(), this.getStrand());\n    if (getStrand() == Strand.NEGATIVE) {\n        //need to take complement of sequence because it is negative and we are returning the gene sequence from the opposite strand\n        StringBuilder b = new StringBuilder(getLength());\n        CompoundSet<NucleotideCompound> compoundSet = this.getCompoundSet();\n        for (int i = 0; i < sequence.length(); i++) {\n            String nucleotide = String.valueOf(sequence.charAt(i));\n            NucleotideCompound nucleotideCompound = compoundSet.getCompoundForString(nucleotide);\n            b.append(nucleotideCompound.getComplement().getShortName());\n        }\n        sequence = b.toString();\n    }\n    DNASequence dnaSequence = null;\n    try {\n        dnaSequence = new DNASequence(sequence.toUpperCase());\n        dnaSequence.setAccession(new AccessionID(this.getAccession().getID()));\n    } catch (CompoundNotFoundException e) {\n        // this should not happen, the sequence is DNA originally, if it does, there's a bug somewhere\n        logger.error(\"Could not create new DNA sequence in getSequence5PrimeTo3Prime(). Error: {}\", e.getMessage());\n    }\n    return dnaSequence;\n}","repo_id":"9","comment":"/**\n * Try to give method clarity where you want a DNASequence coding in the 5' to 3' direction\n * Returns the DNASequence representative of the 5' and 3' reading based on strand\n * @return dna sequence or null if sequence could not be generated.\n */\n","repo_name":"biojava-master/","id":3074,"method_signature":"DNASequence getSequence5PrimeTo3Prime()"}