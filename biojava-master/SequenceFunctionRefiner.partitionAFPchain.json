{"callee_method_ids":[487,490,489],"callee_method_names":["AFPChain.getOptLength","AFPChain.getBlockNum","AFPChain.getOptLen","List<Integer>.add","AFPChain.getOptAln","List<Integer>.get","List<Integer>.get","List<Integer>.size"],"method_name":"SequenceFunctionRefiner.partitionAFPchain","method_implementation":"{\n    int[][][] newAlgn = new int[order][][];\n    int repeatLen = afpChain.getOptLength() / order;\n    //Extract all the residues considered in the first chain of the alignment\n    List<Integer> alignedRes = new ArrayList<Integer>();\n    for (int su = 0; su < afpChain.getBlockNum(); su++) {\n        for (int i = 0; i < afpChain.getOptLen()[su]; i++) {\n            alignedRes.add(afpChain.getOptAln()[su][0][i]);\n        }\n    }\n    //Build the new alignment\n    for (int su = 0; su < order; su++) {\n        newAlgn[su] = new int[2][];\n        newAlgn[su][0] = new int[repeatLen];\n        newAlgn[su][1] = new int[repeatLen];\n        for (int i = 0; i < repeatLen; i++) {\n            newAlgn[su][0][i] = alignedRes.get(repeatLen * su + i);\n            newAlgn[su][1][i] = alignedRes.get((repeatLen * (su + 1) + i) % alignedRes.size());\n        }\n    }\n    return AlignmentTools.replaceOptAln(newAlgn, afpChain, ca1, ca2);\n}","repo_id":"9","comment":"/**\n *  Partitions an afpChain alignment into order blocks of aligned residues.\n *\n * @param afpChain\n * @param ca1\n * @param ca2\n * @param order\n * @return\n * @throws StructureException\n */\n","repo_name":"biojava-master/","id":2068,"method_signature":"AFPChain partitionAFPchain(AFPChain, Atom[], Atom[], int)"}