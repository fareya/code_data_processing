{"callee_method_names":["Matrix.get","Matrix.get","Random.nextDouble","List<List<Integer>>.get","List<List<Integer>>.get","List<Integer>.add"],"method_name":"SymmOptimizer.shrinkBlock","method_implementation":"{\n    // Let shrink moves only if the repeat is larger enough\n    if (repeatCore <= Lmin)\n        return false;\n    // Select column by maximum distance\n    updateMultipleAlignment();\n    Matrix residueDistances = MultipleAlignmentTools.getAverageResidueDistances(msa);\n    double maxDist = Double.MIN_VALUE;\n    double[] colDistances = new double[length];\n    int res = 0;\n    for (int col = 0; col < length; col++) {\n        int normalize = 0;\n        for (int s = 0; s < order; s++) {\n            if (residueDistances.get(s, col) != -1) {\n                colDistances[col] += residueDistances.get(s, col);\n                normalize++;\n            }\n        }\n        colDistances[col] /= normalize;\n        if (colDistances[col] > maxDist) {\n            // geometric distribution\n            if (rnd.nextDouble() > 0.5) {\n                maxDist = colDistances[col];\n                res = col;\n            }\n        }\n    }\n    for (int su = 0; su < order; su++) {\n        Integer residue = block.get(su).get(res);\n        block.get(su).remove(res);\n        if (residue != null)\n            freePool.add(residue);\n        Collections.sort(freePool);\n    }\n    length--;\n    checkGaps();\n    return true;\n}","repo_id":"9","comment":"/**\n * Deletes an alignment column at a randomly selected position.\n *\n * @throws StructureException\n * @throws RefinerFailedException\n */\n","repo_name":"biojava-master/","id":2081,"method_signature":"boolean shrinkBlock()"}