{"callee_method_ids":[1322,1330,641],"callee_method_names":["FileParsingParameters.setAlignSeqRes","FileParsingParameters.setCreateAtomBonds","AtomCache.setFileParsingParams","AtomCache.setFiletype","Structure.getChains","Chain.getAtomGroups","Group.getAltLocs","Block.getBonds","Block.getBonds","Group.getAtoms","Block.getGroup","Block.getGroup","Block.getName","List<Atom>.add","Group.hasAtom","List<Atom>.size"],"method_name":"TestAltLocs.test4CUPBonds","method_implementation":"{\n    AtomCache cache = new AtomCache();\n    FileParsingParameters params = new FileParsingParameters();\n    params.setAlignSeqRes(true);\n    params.setCreateAtomBonds(true);\n    cache.setFileParsingParams(params);\n    StructureIO.setAtomCache(cache);\n    cache.setFiletype(StructureFiletype.PDB);\n    Structure structure = StructureIO.getStructure(\"4CUP\");\n    assertNotNull(structure);\n    Atom[] ca = StructureTools.getAtomCAArray(structure);\n    List<Atom> caList = new ArrayList<Atom>();\n    for (Chain c : structure.getChains()) {\n        for (Group g : c.getAtomGroups()) {\n            for (Group altLocGroup : g.getAltLocs()) {\n                ensureAllAtomsSameAltCode(altLocGroup, g);\n                for (Atom a : altLocGroup.getAtoms()) {\n                    // Check the atomsall have bonds\n                    assertNotEquals(a.getBonds(), null);\n                    assertNotEquals(a.getBonds().size(), 0);\n                }\n            }\n            List<Atom> atoms = g.getAtoms();\n            boolean caInMain = false;\n            for (Atom a : atoms) {\n                assertNotNull(a.getGroup());\n                assertNotNull(a.getGroup().getChain());\n                if (a.getName().equals(StructureTools.CA_ATOM_NAME)) {\n                    caList.add(a);\n                    caInMain = true;\n                    break;\n                }\n            }\n            if (!caInMain && g.hasAtom(StructureTools.CA_ATOM_NAME)) {\n                // g.hasAtom checks altLocs\n                fail(\"CA is not in main group, but in altLoc\");\n            }\n        }\n    }\n    assertEquals(ca.length, caList.size());\n}","repo_id":"9","comment":"/**\n * A test to see that alternate location bonds are being generated\n * @throws IOException\n * @throws StructureException\n */\n","repo_name":"biojava-master/","id":2215,"method_signature":"void test4CUPBonds()"}