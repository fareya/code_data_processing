{"callee_method_names":["Map<String, String>.containsKey","Map<String, String>.get","Map<String, String>.containsKey","Map<String, String>.get","Map<String, String>.containsKey","Map<String, String>.get","Logger.error","URL.getPath","String.substring","String.lastIndexOf"],"method_name":"URLIdentifier.toCanonical","method_implementation":"{\n    String pdbId = null;\n    List<ResidueRange> ranges = Collections.emptyList();\n    try {\n        Map<String, String> params = parseQuery(url);\n        if (params.containsKey(PDBID_PARAM)) {\n            pdbId = params.get(PDBID_PARAM);\n        }\n        if (params.containsKey(RESIDUES_PARAM)) {\n            ranges = ResidueRange.parseMultiple(params.get(RESIDUES_PARAM));\n        } else if (params.containsKey(CHAINID_PARAM)) {\n            ranges = Collections.singletonList(new ResidueRange(params.get(CHAINID_PARAM), (ResidueNumber) null, (ResidueNumber) null));\n        }\n    } catch (UnsupportedEncodingException e) {\n        logger.error(\"Unable to decode URL {}\", url, e);\n    }\n    if (pdbId == null) {\n        String path = url.getPath();\n        pdbId = guessPDBID(path.substring(path.lastIndexOf(\"/\") + 1));\n    }\n    return new SubstructureIdentifier((pdbId == null ? (PdbId) null : new PdbId(pdbId)), ranges);\n}","repo_id":"9","comment":"/**\n * @return A SubstructureIdentifier without ranges (e.g. including all residues)\n */\n","repo_name":"biojava-master/","id":1069,"method_signature":"SubstructureIdentifier toCanonical()"}