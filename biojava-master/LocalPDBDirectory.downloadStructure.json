{"callee_method_ids":[1400],"callee_method_names":["PdbId.getId","String.endsWith","String.endsWith","String.endsWith","String.substring","String.length","String.length","File.lastModified","Date.getTime","Logger.warn","Date.toString","Logger.warn","Logger.info","Logger.info"],"method_name":"LocalPDBDirectory.downloadStructure","method_implementation":"{\n    String id = pdbId.getId().toLowerCase();\n    File dir = getDir(id, obsolete);\n    File realFile = new File(dir, getFilename(id));\n    String ftp;\n    String filename = getFilename(id);\n    if (filename.endsWith(\".mmtf.gz\")) {\n        ftp = CodecUtils.getMmtfEntryUrl(id, true, false);\n    } else if (filename.endsWith(\".bcif\") || filename.endsWith(\".bcif.gz\")) {\n        // TODO this should be configurable\n        ftp = DEFAULT_BCIF_FILE_SERVER + filename;\n    } else {\n        ftp = String.format(\"%s%s/%s/%s\", serverName, pathOnServer, id.substring(id.length() - 3, id.length() - 1), getFilename(id));\n    }\n    URL url = new URL(ftp);\n    Date serverFileDate = null;\n    if (existingFile != null) {\n        serverFileDate = getLastModifiedTime(url);\n        if (serverFileDate != null) {\n            if (existingFile.lastModified() >= serverFileDate.getTime()) {\n                return existingFile;\n            } else {\n                // otherwise we go ahead and download, warning about it first\n                logger.warn(\"File {} is outdated, will download new one from PDB (updated on {})\", existingFile, serverFileDate.toString());\n            }\n        } else {\n            logger.warn(\"Could not determine if file {} is outdated (could not get timestamp from server). Will force redownload\", existingFile);\n        }\n    }\n    logger.info(\"Fetching \" + ftp);\n    logger.info(\"Writing to \" + realFile);\n    FileDownloadUtils.createValidationFiles(url, realFile, null, FileDownloadUtils.Hash.UNKNOWN);\n    FileDownloadUtils.downloadFile(url, realFile);\n    if (!FileDownloadUtils.validateFile(realFile))\n        throw new IOException(\"Downloaded file invalid: \" + realFile);\n    return realFile;\n}","repo_id":"9","comment":"/**\n * Download a file from the ftp server +/- its validation metadata, replacing any existing files if needed\n * @param pdbId PDB ID\n * @param pathOnServer Path on the FTP server, e.g. data/structures/divided/pdb\n * @param obsolete Whether or not file should be saved to the obsolete location locally\n * @param existingFile if not null and checkServerFileDate is true, the last modified date of the\n * server file and this file will be compared to decide whether to download or not\n * @return\n * @throws IOException in cases of file I/O, including failure to download a healthy (non-corrupted) file.\n */\n","repo_name":"biojava-master/","id":1137,"method_signature":"File downloadStructure(PdbId, String, boolean, File)"}