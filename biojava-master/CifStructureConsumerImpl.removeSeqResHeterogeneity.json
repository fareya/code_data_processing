{"callee_method_names":["Chain.getAtomGroups","Group.getResidueNumber","Group.getResidueNumber","Group.getResidueNumber","ResidueNumber.equals","Chain.addGroup","Logger.debug"],"method_name":"CifStructureConsumerImpl.removeSeqResHeterogeneity","method_implementation":"{\n    Chain trimmedChain = new ChainImpl();\n    ResidueNumber lastResNum = null;\n    for (Group g : c.getAtomGroups()) {\n        // note we have to deep copy this, otherwise they stay linked and would get altered in addGroup(g)\n        ResidueNumber currentResNum = new ResidueNumber(g.getResidueNumber().getChainName(), g.getResidueNumber().getSeqNum(), g.getResidueNumber().getInsCode());\n        if (lastResNum == null || !lastResNum.equals(currentResNum)) {\n            trimmedChain.addGroup(g);\n        } else {\n            logger.debug(\"Removing seqres group because it seems to be repeated in entity_poly_seq, most likely has hetero='y': {}\", g);\n        }\n        lastResNum = currentResNum;\n    }\n    return trimmedChain;\n}","repo_id":"9","comment":"/**\n * The method will return a new reference to a Chain with any consecutive groups\n * having same residue numbers removed.\n * This is necessary to solve the microheterogeneity issue in entries like 3u7t (see github issue #160)\n */\n","repo_name":"biojava-master/","id":1217,"method_signature":"Chain removeSeqResHeterogeneity(Chain)"}