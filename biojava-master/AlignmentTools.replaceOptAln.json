{"callee_method_ids":[476,491],"callee_method_names":["AFPChain.clone","AFPChain.setOptLength","AFPChain.setBlockSize","AFPChain.setOptLen","AFPChain.setOptAln","AFPChain.setBlockNum"],"method_name":"AlignmentTools.replaceOptAln","method_implementation":"{\n    int optLength = 0;\n    for (int blk = 0; blk < blockNum; blk++) {\n        optLength += optLens[blk];\n    }\n    //set everything\n    AFPChain refinedAFP = (AFPChain) afpChain.clone();\n    refinedAFP.setOptLength(optLength);\n    refinedAFP.setBlockSize(optLens);\n    refinedAFP.setOptLen(optLens);\n    refinedAFP.setOptAln(optAln);\n    refinedAFP.setBlockNum(blockNum);\n    //TODO recalculate properties: superposition, tm-score, etc\n    // don't modify ca2 positions\n    Atom[] ca2clone = StructureTools.cloneAtomArray(ca2);\n    AlignmentTools.updateSuperposition(refinedAFP, ca1, ca2clone);\n    AFPAlignmentDisplay.getAlign(refinedAFP, ca1, ca2clone);\n    return refinedAFP;\n}","repo_id":"9","comment":"/**\n * @param afpChain Input afpchain. UNMODIFIED\n * @param ca1\n * @param ca2\n * @param optLens\n * @param optAln\n * @return A NEW AfpChain based off the input but with the optAln modified\n * @throws StructureException if an error occured during superposition\n */\n","repo_name":"biojava-master/","id":593,"method_signature":"AFPChain replaceOptAln(AFPChain, Atom[], Atom[], int, int[], int[][][])"}