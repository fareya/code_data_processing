{"callee_method_ids":[1328,1225],"callee_method_names":["String.length","String.startsWith","String.startsWith","FileParsingParameters.isParseBioAssembly","PDBBioAssemblyParser.pdb_REMARK_350_Handler","String.startsWith","String.startsWith","Pattern.matcher","Matcher.matches","Matcher.group","Logger.info","Matcher.group","Pattern.matcher","Matcher.matches","Matcher.group","Logger.info","Matcher.group","String.startsWith","String.startsWith"],"method_name":"PDBFileParser.pdb_REMARK_Handler","method_implementation":"{\n    if (line == null || line.length() < 11)\n        return;\n    if (line.startsWith(\"REMARK 800\")) {\n        pdb_REMARK_800_Handler(line);\n    } else if (line.startsWith(\"REMARK 350\")) {\n        if (params.isParseBioAssembly()) {\n            if (bioAssemblyParser == null) {\n                bioAssemblyParser = new PDBBioAssemblyParser();\n            }\n            bioAssemblyParser.pdb_REMARK_350_Handler(line);\n        }\n    } else if (line.startsWith(\"REMARK   2\")) {\n        //REMARK   2 RESOLUTION.\n        Pattern pR = Pattern.compile(\"^REMARK   2 RESOLUTION.\\\\s+(\\\\d+\\\\.\\\\d+)\\\\s+ANGSTROMS\\\\..*\");\n        handleResolutionLine(line, pR);\n        // REMARK 3 (for R free)\n        // note: if more than 1 value present (occurring in hybrid experimental technique entries, e.g. 3ins, 4n9m)\n        // then last one encountered will be taken\n    } else if (line.startsWith(\"REMARK   3   FREE R VALUE\")) {\n        // Rfree annotation is not very consistent in PDB format, it varies depending on the software\n        // Here we follow this strategy:\n        // a) take the '(NO CUTOFF)' value if the only one available (shelx software, e.g. 1x7q)\n        // b) don't take it if also a line without '(NO CUTOFF)' is present (CNX software, e.g. 3lak)\n        Pattern pR = Pattern.compile(\"^REMARK   3   FREE R VALUE\\\\s+(?:\\\\(NO CUTOFF\\\\))?\\\\s+:\\\\s+(\\\\d?\\\\.\\\\d+).*\");\n        Matcher mR = pR.matcher(line);\n        if (mR.matches()) {\n            try {\n                rfreeNoCutoffLine = Float.parseFloat(mR.group(1));\n            } catch (NumberFormatException e) {\n                logger.info(\"Rfree value \" + mR.group(1) + \" does not look like a number, will ignore it\");\n            }\n        }\n        pR = Pattern.compile(\"^REMARK   3   FREE R VALUE\\\\s+:\\\\s+(\\\\d?\\\\.\\\\d+).*\");\n        mR = pR.matcher(line);\n        if (mR.matches()) {\n            try {\n                rfreeStandardLine = Float.parseFloat(mR.group(1));\n            } catch (NumberFormatException e) {\n                logger.info(\"Rfree value '{}' does not look like a number, will ignore it\", mR.group(1));\n            }\n        }\n        // REMARK 3 RESOLUTION (contains more info than REMARK 2, for instance multiple resolutions in hybrid experimental technique entries)\n        // note: if more than 1 value present (occurring in hybrid experimental technique entries, e.g. 3ins, 4n9m)\n        // then last one encountered will be taken\n    } else if (line.startsWith(\"REMARK   3   RESOLUTION RANGE HIGH\")) {\n        Pattern pR = Pattern.compile(\"^REMARK   3   RESOLUTION RANGE HIGH \\\\(ANGSTROMS\\\\) :\\\\s+(\\\\d+\\\\.\\\\d+).*\");\n        handleResolutionLine(line, pR);\n    } else if (line.startsWith(\"REMARK   3   EFFECTIVE RESOLUTION\")) {\n        Pattern pR = Pattern.compile(\"^REMARK   3   EFFECTIVE RESOLUTION \\\\(ANGSTROMS\\\\)\\\\s+:\\\\s+(\\\\d+\\\\.\\\\d+).*\");\n        handleResolutionLine(line, pR);\n    }\n}","repo_id":"9","comment":"/**\n * Handler for REMARK lines\n */\n","repo_name":"biojava-master/","id":1175,"method_signature":"void pdb_REMARK_Handler(String)"}