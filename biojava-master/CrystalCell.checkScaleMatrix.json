{"callee_method_names":["Matrix3d.getElement","Matrix4d.getElement","Matrix4d.getElement"],"method_name":"CrystalCell.checkScaleMatrix","method_implementation":"{\n    Matrix3d mtranspose = getMTranspose();\n    for (int i = 0; i < 3; i++) {\n        for (int j = 0; j < 3; j++) {\n            if (!deltaComp(mtranspose.getElement(i, j), scaleMatrix.getElement(i, j))) {\n                //System.out.println(\"Our value   (\"+i+\",\"+j+\"): \"+getM().getElement(i,j));\n                //System.out.println(\"Their value (\"+i+\",\"+j+\"): \"+scaleMatrix.getElement(i,j));\n                return false;\n            }\n        }\n    }\n    for (int i = 0; i < 3; i++) {\n        if (!deltaComp(scaleMatrix.getElement(i, 3), 0)) {\n            return false;\n        }\n    }\n    return true;\n}","repo_id":"9","comment":"/**\n * Given a scale matrix parsed from a PDB entry (SCALE1,2,3 records),\n * compares it to our calculated Mtranspose matrix to see if they coincide and\n * returns true if they do.\n * If they don't that means that the PDB entry is not in the standard\n * orthogonalisation (NCODE=1 in ccp4).\n * In 2011's remediation only 148 PDB entries were found not to be in\n * a non-standard orthogonalisation. See:\n * http://www.wwpdb.org/documentation/2011remediation_overview-061711.pdf\n * For normal cases the scale matrix is diagonal without a translation component.\n * Additionally the translation component of the SCALE matrix is also checked to\n * make sure it is (0,0,0), if not false is return\n * @param scaleMatrix\n * @return\n */\n","repo_name":"biojava-master/","id":1478,"method_signature":"boolean checkScaleMatrix(Matrix4d)"}