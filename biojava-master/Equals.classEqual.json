{"callee_method_names":["Object.getClass","Object.getClass"],"method_name":"Equals.classEqual","method_implementation":"{\n    return one == two || !(one == null || two == null) && one.getClass() == two.getClass();\n}","repo_id":"9","comment":"/**\n * This method should be called before beginning any equals methods. In order\n * to return true the method:\n *\n * <ol>\n * <li>The two given objects are the same instance using ==. This also means\n * if both Objects are null then this method will return true (well\n * technically they are equal)<\/li>\n * <li>Tests that neither object is null<\/li>\n * <li>The the two classes from the objects are equal using ==<\/li>\n * <\/ol>\n *\n * The boilerplate using this method then becomes:\n *\n * <pre>\n * boolean equals = false;\n * if (EqualsHelper.classEqual(this, obj)) {\n *   TargetClass casted = (TargetClass) obj;\n *   equals = (EqualsHelper.equal(this.getId(), casted.getId()) &amp;&amp; EqualsHelper\n *       .equal(this.getName(), casted.getName()));\n * }\n * return equals;\n * <\/pre>\n *\n * @param one\n *          The first object to test\n * @param two\n *          The second object to test\n * @return A boolean indicating if  these two objects are\n *         equal at the class level\n */\n","repo_name":"biojava-master/","id":2601,"method_signature":"boolean classEqual(Object, Object)"}