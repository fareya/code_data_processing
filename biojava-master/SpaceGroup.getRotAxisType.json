{"callee_method_names":["Matrix3d.determinant"],"method_name":"SpaceGroup.getRotAxisType","method_implementation":"{\n    int axisType = 0;\n    Matrix3d rot = new Matrix3d(m.m00, m.m01, m.m02, m.m10, m.m11, m.m12, m.m20, m.m21, m.m22);\n    double determinant = rot.determinant();\n    if (!deltaComp(determinant, 1.0, DELTA) && !deltaComp(determinant, -1.0, DELTA)) {\n        throw new IllegalArgumentException(\"Given matrix does not seem to be a rotation matrix.\");\n    }\n    int trace = (int) (rot.m00 + rot.m11 + rot.m22);\n    if (determinant > 0) {\n        switch(trace) {\n            case 3:\n                axisType = 1;\n                break;\n            case -1:\n                axisType = 2;\n                break;\n            case 0:\n                axisType = 3;\n                break;\n            case 1:\n                axisType = 4;\n                break;\n            case 2:\n                axisType = 6;\n                break;\n            default:\n                throw new RuntimeException(\"Trace of transform does not correspond to one of the expected types. This is most likely a bug\");\n        }\n    } else {\n        switch(trace) {\n            case -3:\n                axisType = -1;\n                break;\n            case 1:\n                axisType = -2;\n                break;\n            case 0:\n                axisType = -3;\n                break;\n            case -1:\n                axisType = -4;\n                break;\n            case -2:\n                axisType = -6;\n                break;\n            default:\n                throw new RuntimeException(\"Trace of transform does not correspond to one of the expected types. This is most likely a bug\");\n        }\n    }\n    return axisType;\n}","repo_id":"9","comment":"/**\n * Given a transformation matrix containing a rotation returns the type of rotation:\n * 1 for identity, 2 for 2-fold rotation, 3 for 3-fold rotation, 4 for 4-fold rotation,\n * 6 for 6-fold rotation,\n * -1 for inversions, -2 for mirror planes, -3 for 3-fold improper rotation,\n * -4 for 4-fold improper rotation and -6 for 6-fold improper rotation\n * @param m\n * @return\n */\n","repo_name":"biojava-master/","id":1461,"method_signature":"int getRotAxisType(Matrix4d)"}