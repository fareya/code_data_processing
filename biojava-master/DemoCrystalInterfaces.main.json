{"callee_method_ids":[641,1322,1451,1450,1459,1438,903,909,911,901,881,872,872,875,875,1431,1434,1431,1456,887,873,893],"callee_method_names":["AtomCache.setFiletype","FileParsingParameters.setAlignSeqRes","AtomCache.setFileParsingParams","Structure.getPDBCode","Structure.getCrystallographicInfo","SpaceGroup.getShortSymbol","SpaceGroup.getId","SpaceGroup.getNumOperators","CrystalBuilder.getUniqueInterfaces","StructureInterfaceList.calcAsas","StructureInterfaceList.removeInterfacesBelowArea","StructureInterfaceList.getClusters","StructureInterfaceList.size","StructureInterfaceList.size","StructureInterfaceList.get","StructureInterface.isInfinite","StructureInterface.getCrystalIds","StructureInterface.getCrystalIds","StructureInterface.getContacts","List<AtomContact>.size","List<AtomContact>.size","StructureInterface.getTransforms","StructureInterface.getTransforms","CrystalTransform.getMatTransform","CrystalTransform.getMatTransform","CrystalTransform.getTransformType","CrystalTransform.getTranslScrewComponent","CrystalTransform.getTransformType","Structure.isCrystallographic","SpaceGroup.getAxisFoldType","CrystalTransform.getTransformId","SpaceGroup.getRotAxisAngle","CrystalTransform.getTransformId","StructureInterface.getContacts","StructureInterface.getCoreResidues","Pair<List<Group>>.getFirst","Pair<List<Group>>.getSecond","StructureInterface.getTotalArea","StructureInterface.isIsologous"],"method_name":"DemoCrystalInterfaces.main","method_implementation":"{\n    String pdbCode = \"1smt\";\n    AtomCache cache = new AtomCache();\n    cache.setFiletype(StructureFiletype.CIF);\n    FileParsingParameters params = new FileParsingParameters();\n    params.setAlignSeqRes(true);\n    cache.setFileParsingParams(params);\n    StructureIO.setAtomCache(cache);\n    Structure structure = StructureIO.getStructure(pdbCode);\n    System.out.println(structure.getPDBCode());\n    SpaceGroup sg = structure.getCrystallographicInfo().getSpaceGroup();\n    if (sg != null) {\n        System.out.println(sg.getShortSymbol() + \" (\" + sg.getId() + \")\");\n        System.out.println(\"Symmetry operators: \" + sg.getNumOperators());\n    }\n    System.out.println(\"Calculating possible interfaces... (using \" + NTHREADS + \" CPUs for ASA calculation)\");\n    long start = System.currentTimeMillis();\n    CrystalBuilder cb = new CrystalBuilder(structure);\n    StructureInterfaceList interfaces = cb.getUniqueInterfaces(CUTOFF);\n    interfaces.calcAsas(N_SPHERE_POINTS, NTHREADS, CONSIDER_COFACTORS);\n    interfaces.removeInterfacesBelowArea(MIN_AREA_TO_KEEP);\n    List<StructureInterfaceCluster> clusters = interfaces.getClusters();\n    //interfaces.initialiseClusters(pdb, CLUSTERING_CUTOFF, MINATOMS_CLUSTERING, \"CA\");\n    long end = System.currentTimeMillis();\n    long total = (end - start) / 1000;\n    System.out.println(\"Total time for interface calculation: \" + total + \"s\");\n    System.out.println(\"Total number of interfaces found: \" + interfaces.size());\n    for (int i = 0; i < interfaces.size(); i++) {\n        StructureInterface interf = interfaces.get(i + 1);\n        String infiniteStr = \"\";\n        if (interf.isInfinite())\n            infiniteStr = \" -- INFINITE interface\";\n        System.out.println(\"\\n##Interface \" + (i + 1) + \" \" + interf.getCrystalIds().getFirst() + \"-\" + interf.getCrystalIds().getSecond() + infiniteStr);\n        // warning if more than 10 clashes found at interface\n        List<AtomContact> clashing = interf.getContacts().getContactsWithinDistance(CLASH_DISTANCE);\n        if (clashing.size() > 10)\n            System.out.println(clashing.size() + \" CLASHES!!!\");\n        CrystalTransform transf1 = interf.getTransforms().getFirst();\n        CrystalTransform transf2 = interf.getTransforms().getSecond();\n        System.out.println(\"Transf1: \" + SpaceGroup.getAlgebraicFromMatrix(transf1.getMatTransform()) + \". Transf2: \" + SpaceGroup.getAlgebraicFromMatrix(transf2.getMatTransform()));\n        String screwStr = \"\";\n        if (transf2.getTransformType().isScrew()) {\n            Vector3d screwTransl = transf2.getTranslScrewComponent();\n            screwStr = \" -- \" + transf2.getTransformType().getShortName() + \" with translation \" + String.format(\"(%5.2f,%5.2f,%5.2f)\", screwTransl.x, screwTransl.y, screwTransl.z);\n        }\n        if (structure.isCrystallographic()) {\n            int foldType = sg.getAxisFoldType(transf2.getTransformId());\n            AxisAngle4d axisAngle = sg.getRotAxisAngle(transf2.getTransformId());\n            System.out.println(\" \" + foldType + \"-fold on axis \" + String.format(\"(%5.2f,%5.2f,%5.2f)\", axisAngle.x, axisAngle.y, axisAngle.z) + screwStr);\n        }\n        System.out.println(\"Number of contacts: \" + interf.getContacts().size());\n        //System.out.println(\"Number of contacting atoms (from both molecules): \"+interf.getNumAtomsInContact());\n        Pair<List<Group>> cores = interf.getCoreResidues(BSATOASA_CUTOFF, MIN_ASA_FOR_SURFACE);\n        System.out.println(\"Number of core residues at \" + String.format(\"%4.2f\", BSATOASA_CUTOFF) + \" bsa to asa cutoff: \" + cores.getFirst().size() + \" \" + cores.getSecond().size());\n        System.out.printf(\"Interface area: %8.2f\\n\", interf.getTotalArea());\n        if (interf.isIsologous()) {\n            System.out.println(\"Isologous\");\n        } else {\n            System.out.println(\"Heterologous\");\n        }\n    }\n    System.out.println(\"Interface clusters (one per line): \");\n    for (StructureInterfaceCluster cluster : clusters) {\n        System.out.print(cluster.getId() + \": \");\n        for (StructureInterface member : cluster.getMembers()) {\n            System.out.print(member.getId() + \" \");\n        }\n        System.out.println();\n    }\n}","repo_id":"9","comment":"/**\n * @param args\n */\n","repo_name":"biojava-master/","id":342,"method_signature":"void main(String[])"}