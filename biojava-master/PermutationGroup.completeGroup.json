{"callee_method_names":["List<List<Integer>>.size","Set<List<Integer>>.contains","List<List<Integer>>.add","ArrayList.add","Set<List<Integer>>.add"],"method_name":"PermutationGroup.completeGroup","method_implementation":"{\n    // Copy initial set to allow permutations to grow\n    List<List<Integer>> gens = new ArrayList<List<Integer>>(permutations);\n    // Keep HashSet version of permutations for fast lookup.\n    Set<List<Integer>> known = new HashSet<List<Integer>>(permutations);\n    //breadth-first search through the map of all members\n    List<List<Integer>> currentLevel = new ArrayList<List<Integer>>(permutations);\n    while (currentLevel.size() > 0) {\n        List<List<Integer>> nextLevel = new ArrayList<List<Integer>>();\n        for (List<Integer> p : currentLevel) {\n            for (List<Integer> gen : gens) {\n                List<Integer> y = combine(p, gen);\n                if (!known.contains(y)) {\n                    nextLevel.add(y);\n                    //bypass addPermutation(y) for performance\n                    permutations.add(y);\n                    known.add(y);\n                }\n            }\n        }\n        currentLevel = nextLevel;\n    }\n}","repo_id":"9","comment":"/**\n * Starts with an incomplete set of group generators in `permutations` and\n * expands it to include all possible combinations.\n *\n * Ways to complete group:\n * - combinations of permutations pi x pj\n * - combinations with itself p^k\n */\n","repo_name":"biojava-master/","id":1933,"method_signature":"void completeGroup()"}