{"callee_method_names":["Path.getEnd","Path.getEnd"],"method_name":"LocationHelper.detectCicular","method_implementation":"{\n    boolean isCircular = false;\n    if (!consistentAccessions(subLocations))\n        return isCircular;\n    int lastMax = 0;\n    for (Location sub : subLocations) {\n        if (sub.getEnd().getPosition() > lastMax) {\n            lastMax = sub.getEnd().getPosition();\n        } else {\n            isCircular = true;\n            break;\n        }\n    }\n    return isCircular;\n}","repo_id":"9","comment":"/**\n * Loops through the given list of locations and returns true if it looks\n * like they represent a circular location. Detection cannot happen if\n * we do not have consistent accessions\n */\n","repo_name":"biojava-master/","id":3051,"method_signature":"boolean detectCicular(List)"}