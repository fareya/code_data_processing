{"callee_method_names":[],"method_name":"StructureAlignmentOptimizer.defineEquPos","method_implementation":"{\n    int i, r1, r2;\n    int equLenOld = equLen;\n    int[][] equSetOld = new int[2][equLenOld];\n    for (i = 0; i < equLen; i++) {\n        equSetOld[0][i] = equSet[0][i];\n        equSetOld[1][i] = equSet[1][i];\n    }\n    double rmsdOld = rmsd;\n    double dis;\n    equLen = 0;\n    //if (debug)\n    //   System.out.println(String.format(\" OPT: Dc %f, equLenOld %d, rmsdOld %f, alnLen %d\", Dc, equLenOld, rmsdOld, alnLen));\n    for (i = 0; i < alnLen; i++) {\n        r1 = alnList[0][i];\n        r2 = alnList[1][i];\n        dis = Calc.getDistance(cod1[r1], cod2[r2]);\n        if (dis <= Dc) {\n            //System.out.println(r1 + \"-\"  + r2 + \" d:\" + dis);\n            equSet[0][equLen] = r1;\n            equSet[1][equLen] = r2;\n            equLen++;\n        }\n    }\n    superimposeBySet();\n    //if (debug)\n    //   System.out.println(String.format(\" OPT: new equLen %d rmsd %f\", equLen, rmsd));\n    boolean ifstop = false;\n    //      if (debug) {\n    //         System.out.print(\" OPT: rmsd diff: \" + Math.abs(rmsd - rmsdOld) + \" equLens: \" + equLenOld + \":\"+ equLen);\n    //         if ( Math.abs(rmsd - rmsdOld) < 1e-10)\n    //            System.out.println(\" NO DIFF!\");\n    //         else\n    //            System.out.println(\" DIFF!\");\n    //      }\n    if ((Math.abs(rmsd - rmsdOld) < 1e-10) && (equLenOld == equLen))\n        keepStep++;\n    else\n        keepStep = 0;\n    if (keepStep > maxKeepStep) {\n        //converge\n        ifstop = true;\n    } else //allowing up to maxKeepStep instead of 1 is essential for some special cases\n    if (stopRmsd < 0) {\n        //condition 1, continue\n        ifstop = false;\n    } else if ((rmsd <= stopRmsd * stopRmsdPer) || (rmsd < rmsdCut)) {\n        //condition 2, continue\n        ifstop = false;\n    } else //rmsdCut is adopted or not? to be tuned\n    {\n        //get worse\n        ifstop = true;\n    }\n    if ((stopRmsd < 0) && (equLen >= stopLenPer * equLen0)) {\n        //System.err.println(\"stopRmsd: \" + stopRmsd + \" setting to rmsd:\" + rmsd);\n        //condition 1\n        stopRmsd = rmsd;\n    }\n    return ifstop;\n}","repo_id":"9","comment":"/**\n * the equivalent residues: residues where Dij &lt;= Dc and i,j is an aligned pair\n * use the previous superimposing\n */\n","repo_name":"biojava-master/","id":442,"method_signature":"boolean defineEquPos(int, int[][])"}