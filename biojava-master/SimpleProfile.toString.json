{"callee_method_names":["List<AlignedSequence<S, C>>.size","StringBuilder.append","StringBuilder.append","StringBuilder.append","StringBuilder.append","StringBuilder.append","List<AlignedSequence<S, C>>.size","StringBuilder.append","Atom[].getAccession","StringBuilder.append","Atom[].getSequenceIndexAt","StringBuilder.append","Atom[].getSubSequence","StringBuilder.append","Atom[].getSequenceIndexAt","StringBuilder.append","List<AlignedSequence<S, C>>.size","StringBuilder.append","Atom[].getAccession","StringBuilder.append","Atom[].getSequenceIndexAt","StringBuilder.append","Atom[].getSubSequence","StringBuilder.append","Atom[].getSequenceIndexAt","StringBuilder.append","List<AlignedSequence<S, C>>.size","StringBuilder.append","StringBuilder.toString"],"method_name":"SimpleProfile.toString","method_implementation":"{\n    // TODO handle circular alignments\n    StringBuilder s = (header == null) ? new StringBuilder() : new StringBuilder(header);\n    if (webDisplay && list.size() == 2) {\n        s.append(\"<div><pre>\");\n    }\n    width = Math.max(1, width);\n    int seqIndexPad = (int) (Math.floor(Math.log10(getLength())) + 2);\n    String seqIndexFormatPre = \"%\" + seqIndexPad + \"d \", seqIndexFormatPost = \"%\" + seqIndexPad + \"d\";\n    if (interlaced) {\n        String aligIndFormat = \"%-\" + Math.max(1, width / 2) + \"d %\" + Math.max(1, width - (width / 2) - 1) + \"d%n\";\n        for (int i = 0; i < getLength(); i += width) {\n            int start = i + 1, end = Math.min(getLength(), i + width);\n            if (i > 0) {\n                s.append(String.format(\"%n\"));\n            }\n            if (aligIndices) {\n                if (end < i + width) {\n                    int line = end - start + 1;\n                    aligIndFormat = \"%-\" + Math.max(1, line / 2) + \"d %\" + Math.max(1, line - (line / 2) - 1) + \"d%n\";\n                }\n                if (idFormat != null) {\n                    s.append(String.format(idFormat, \"\"));\n                }\n                if (seqIndexPre) {\n                    s.append(String.format(\"%\" + (seqIndexPad + 1) + \"s\", \"\"));\n                }\n                s.append(String.format(aligIndFormat, start, end));\n            }\n            int counter = 0;\n            for (AlignedSequence<S, C> as : list) {\n                counter++;\n                if (webDisplay && list.size() == 2) {\n                    printSequenceAlignmentWeb(s, counter, idFormat, seqIndexPre, seqIndexFormatPre, seqIndexPost, seqIndexFormatPost, start, end);\n                } else {\n                    if (idFormat != null) {\n                        s.append(String.format(idFormat, as.getAccession()));\n                    }\n                    if (seqIndexPre) {\n                        s.append(String.format(seqIndexFormatPre, as.getSequenceIndexAt(start)));\n                    }\n                    s.append(as.getSubSequence(start, end).getSequenceAsString());\n                    if (seqIndexPost) {\n                        s.append(String.format(seqIndexFormatPost, as.getSequenceIndexAt(end)));\n                    }\n                    s.append(String.format(\"%n\"));\n                }\n                if (aligConservation && list.size() == 2 && counter == 1) {\n                    printConservation(s, idFormat, seqIndexPad, seqIndexPre, start, end, webDisplay);\n                }\n            }\n        }\n    } else {\n        for (AlignedSequence<S, C> as : list) {\n            if (idFormat != null) {\n                s.append(String.format(idFormat, as.getAccession()));\n            }\n            for (int i = 0; i < getLength(); i += width) {\n                int start = i + 1, end = Math.min(getLength(), i + width);\n                if (seqIndexPre) {\n                    s.append(String.format(seqIndexFormatPre, as.getSequenceIndexAt(start)));\n                }\n                s.append(as.getSubSequence(start, end).getSequenceAsString());\n                if (seqIndexPost) {\n                    s.append(String.format(seqIndexFormatPost, as.getSequenceIndexAt(end)));\n                }\n                s.append(String.format(\"%n\"));\n            }\n        }\n    }\n    if (webDisplay && aligConservation && list.size() == 2) {\n        s.append(IOUtils.getPDBLegend());\n    }\n    return s.toString();\n}","repo_id":"9","comment":"// creates formatted String\n","repo_name":"biojava-master/","id":2506,"method_signature":"String toString(int, String, String, boolean, boolean, boolean, boolean, boolean, boolean)"}