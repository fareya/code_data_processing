{"callee_method_ids":[493,494,481,487,489,487,505,506,3580,487],"callee_method_names":["AFPChain.getName1","AFPChain.getName2","AFPChain.setName1","AFPChain.setName2","AFPChain.getCa1Length","AFPChain.setCa1Length","AFPChain.getCa2Length","AFPChain.setCa2Length","AFPChain.getAlnbeg1","AFPChain.setAlnbeg1","AFPChain.getAlnbeg2","AFPChain.setAlnbeg2","AFPChain.getAlnseq1","AFPChain.setAlnseq1","AFPChain.getAlnseq2","AFPChain.setAlnseq2","AFPChain.getDisTable1","AFPChain.setDisTable1","AFPChain.getDisTable2","AFPChain.setDisTable2","AFPChain.getFocusRes1","AFPChain.setFocusRes1","AFPChain.getFocusRes2","AFPChain.setFocusRes2","AFPChain.getPdbAln","AFPChain.getBlockNum","AFPChain.getOptAln","AFPChain.getBlockNum","AFPChain.setOptAln","AFPChain.getDistanceMatrix","AFPChain.setDistanceMatrix","Matrix.transpose","AFPChain.getBlockRotationMatrix","AFPChain.getBlockShiftVector","AFPChain.getBlockNum","Matrix[].inverse"],"method_name":"CeCPMain.invertAlignment","method_implementation":"{\n    String name1 = a.getName1();\n    String name2 = a.getName2();\n    a.setName1(name2);\n    a.setName2(name1);\n    int len1 = a.getCa1Length();\n    a.setCa1Length(a.getCa2Length());\n    a.setCa2Length(len1);\n    int beg1 = a.getAlnbeg1();\n    a.setAlnbeg1(a.getAlnbeg2());\n    a.setAlnbeg2(beg1);\n    char[] alnseq1 = a.getAlnseq1();\n    a.setAlnseq1(a.getAlnseq2());\n    a.setAlnseq2(alnseq1);\n    Matrix distab1 = a.getDisTable1();\n    a.setDisTable1(a.getDisTable2());\n    a.setDisTable2(distab1);\n    int[] focusRes1 = a.getFocusRes1();\n    a.setFocusRes1(a.getFocusRes2());\n    a.setFocusRes2(focusRes1);\n    //What are aftIndex and befIndex used for? How are they indexed?\n    //a.getAfpAftIndex()\n    String[][][] pdbAln = a.getPdbAln();\n    if (pdbAln != null) {\n        for (int block = 0; block < a.getBlockNum(); block++) {\n            String[] paln1 = pdbAln[block][0];\n            pdbAln[block][0] = pdbAln[block][1];\n            pdbAln[block][1] = paln1;\n        }\n    }\n    int[][][] optAln = a.getOptAln();\n    if (optAln != null) {\n        for (int block = 0; block < a.getBlockNum(); block++) {\n            int[] aln1 = optAln[block][0];\n            optAln[block][0] = optAln[block][1];\n            optAln[block][1] = aln1;\n        }\n    }\n    // triggers invalidate()\n    a.setOptAln(optAln);\n    Matrix distmat = a.getDistanceMatrix();\n    if (distmat != null)\n        a.setDistanceMatrix(distmat.transpose());\n    // invert the rotation matrices\n    Matrix[] blockRotMat = a.getBlockRotationMatrix();\n    Atom[] shiftVec = a.getBlockShiftVector();\n    if (blockRotMat != null) {\n        for (int block = 0; block < a.getBlockNum(); block++) {\n            if (blockRotMat[block] != null) {\n                // if y=x*A+b, then x=y*inv(A)-b*inv(A)\n                blockRotMat[block] = blockRotMat[block].inverse();\n                Calc.rotate(shiftVec[block], blockRotMat[block]);\n                shiftVec[block] = Calc.invert(shiftVec[block]);\n            }\n        }\n    }\n    return a;\n}","repo_id":"9","comment":"/**\n * Swaps the order of structures in an AFPChain\n * @param a\n * @return\n */\n","repo_name":"biojava-master/","id":777,"method_signature":"AFPChain invertAlignment(AFPChain)"}