{"callee_method_names":["ArrayList<String>.size","ArrayList<String>.size","ArrayList<String>.size","ArrayList<String>.get","LinkedHashMap<String, Double>.get","LinkedHashMap<String, Double>.put","LinkedHashMap<String, Double>.size","LinkedHashMap<String, Double>.keySet","ArrayList<String>.size","ArrayList<String>.get","LinkedHashMap<String, Double>.get","LinkedHashMap<String, Double>.clear"],"method_name":"ResidualsCoxph.rowsum","method_implementation":"{\n    LinkedHashMap<String, Double> sumMap = new LinkedHashMap<String, Double>();\n    if (rr.length != sets.size()) {\n        throw new Exception(\"Cluster value for each sample are not of equal length n=\" + rr.length + \" cluster length=\" + sets.size());\n    }\n    double[][] sum = null;\n    for (int j = 0; j < rr[0].length; j++) {\n        for (int i = 0; i < sets.size(); i++) {\n            String s = sets.get(i);\n            //get in order\n            Double v = sumMap.get(s);\n            if (v == null) {\n                v = 0.0;\n            }\n            v = v + rr[i][j];\n            sumMap.put(s, v);\n        }\n        if (sum == null) {\n            sum = new double[sumMap.size()][rr[0].length];\n        }\n        ArrayList<String> index = new ArrayList<String>(sumMap.keySet());\n        //sorting does seem to make a difference in test cases at the .0000000001\n        //     ArrayList<Integer> in = new ArrayList<Integer>();\n        //     for (String s : index) {\n        //         in.add(Integer.parseInt(s));\n        //     }\n        //     Collections.sort(index);\n        for (int m = 0; m < index.size(); m++) {\n            String key = index.get(m);\n            sum[m][j] = sumMap.get(key);\n        }\n        sumMap.clear();\n    }\n    return sum;\n}","repo_id":"9","comment":"/**\n * From R in residuals.coxph.S rowsum(rr, collapse)\n *\n * @param rr\n * @param sets\n * @return\n */\n","repo_name":"biojava-master/","id":3603,"method_signature":"double[][] rowsum(double[][], ArrayList)"}