{"callee_method_ids":[2054],"callee_method_names":["CeSymmResult.isRefined","CeSymmResult.getMultipleAlignment","CeSymmResult.getAtoms","CeSymmResult.getRepeatsID","Structure.addModel","Structure.setStructureIdentifier","List<StructureIdentifier>.get","CeSymmResult.getMultipleAlignment","Block.getStartResidue","Block.getFinalResidue","Atom[].getGroup","List<Atom>.addAll","Group.getAtoms","List<Atom>.toArray","List<Atom>.size","Logger.warn","List<Group>.size","CeSymmResult.getMultipleAlignment","List<Structure>.add"],"method_name":"SymmetryTools.divideStructure","method_implementation":"{\n    if (!symmetry.isRefined())\n        throw new IllegalArgumentException(\"The symmetry result \" + \"is not refined, repeats cannot be defined\");\n    int order = symmetry.getMultipleAlignment().size();\n    Atom[] atoms = symmetry.getAtoms();\n    Set<Group> allGroups = StructureTools.getAllGroupsFromSubset(atoms, GroupType.HETATM);\n    List<StructureIdentifier> repeatsId = symmetry.getRepeatsID();\n    List<Structure> repeats = new ArrayList<Structure>(order);\n    // Create new structure containing the repeat atoms\n    for (int i = 0; i < order; i++) {\n        Structure s = new StructureImpl();\n        s.addModel(new ArrayList<Chain>(1));\n        s.setStructureIdentifier(repeatsId.get(i));\n        Block align = symmetry.getMultipleAlignment().getBlock(0);\n        // Get the start and end of the repeat\n        // Repeats are always sequential blocks\n        int res1 = align.getStartResidue(i);\n        int res2 = align.getFinalResidue(i);\n        // All atoms from the repeat, used for ligand search\n        // AA have an average of 8.45 atoms, so guess capacity with that\n        List<Atom> repeat = new ArrayList<>(Math.max(9 * (res2 - res1 + 1), 9));\n        // speedy chain lookup\n        Chain prevChain = null;\n        for (int k = res1; k <= res2; k++) {\n            Group g = atoms[k].getGroup();\n            prevChain = StructureTools.addGroupToStructure(s, g, 0, prevChain, true);\n            repeat.addAll(g.getAtoms());\n        }\n        List<Group> ligands = StructureTools.getLigandsByProximity(allGroups, repeat.toArray(new Atom[repeat.size()]), StructureTools.DEFAULT_LIGAND_PROXIMITY_CUTOFF);\n        logger.warn(\"Adding {} ligands to {}\", ligands.size(), symmetry.getMultipleAlignment().getStructureIdentifier(i));\n        for (Group ligand : ligands) {\n            prevChain = StructureTools.addGroupToStructure(s, ligand, 0, prevChain, true);\n        }\n        repeats.add(s);\n    }\n    return repeats;\n}","repo_id":"9","comment":"/**\n * Method that converts the symmetric units of a structure into different\n * structures, so that they can be individually visualized.\n *\n * @param symmetry\n *            CeSymmResult\n * @throws StructureException\n * @result List of structures, by repeat index sequentially\n */\n","repo_name":"biojava-master/","id":2042,"method_signature":"List<Structure> divideStructure(CeSymmResult)"}