{"callee_method_names":["List<Atom[]>.add","List<Integer>.add","List<List<Integer>>.add","MultipleAlignment.getEnsemble","Block.setAlignRes","ReferenceSuperimposer.superimpose"],"method_name":"TestMultipleAlignmentScorer.identityMSTA","method_implementation":"{\n    //Generate the identical Atom arrays\n    List<Atom[]> atomArrays = new ArrayList<Atom[]>(20);\n    for (int i = 0; i < 3; i++) atomArrays.add(makeDummyCA(20));\n    //Generate the identity alignment (1-1-1,2-2-2,etc)\n    List<List<Integer>> alnRes = new ArrayList<List<Integer>>(3);\n    for (int str = 0; str < 3; str++) {\n        List<Integer> chain = new ArrayList<Integer>(20);\n        for (int res = 0; res < 20; res++) chain.add(res);\n        alnRes.add(chain);\n    }\n    //MultipleAlignment generation\n    MultipleAlignment msa = new MultipleAlignmentImpl();\n    msa.getEnsemble().setAtomArrays(atomArrays);\n    BlockSet bs = new BlockSetImpl(msa);\n    Block b = new BlockImpl(bs);\n    b.setAlignRes(alnRes);\n    //Superimpose the alignment (which should give the identity matrices)\n    ReferenceSuperimposer imposer = new ReferenceSuperimposer();\n    imposer.superimpose(msa);\n    return msa;\n}","repo_id":"9","comment":"/**\n * Generates an identity MultipleAlignment: 3 structures with\n * the same Atoms and perfectly aligned, so that TM-score = 1\n * and RMSD = 0.\n * @return MultipleAlignment identity\n * @throws StructureException\n */\n","repo_name":"biojava-master/","id":2188,"method_signature":"MultipleAlignment identityMSTA()"}