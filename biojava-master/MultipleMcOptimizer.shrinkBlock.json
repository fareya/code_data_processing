{"callee_method_names":["MultipleAlignment.length","MultipleAlignment.getBlocks","MultipleAlignment.getBlock","Matrix.get","Matrix.get","Random.nextDouble","MultipleAlignment.getBlock","Block.getCoreLength","Block.getAlignRes","Block.getAlignRes","List<SortedSet<Integer>>.get"],"method_name":"MultipleMcOptimizer.shrinkBlock","method_implementation":"{\n    // Select column by maximum distance\n    Matrix residueDistances = MultipleAlignmentTools.getAverageResidueDistances(msa);\n    double[] colDistances = new double[msa.length()];\n    double maxDist = Double.MIN_VALUE;\n    int position = 0;\n    int block = 0;\n    int column = 0;\n    for (int b = 0; b < msa.getBlocks().size(); b++) {\n        for (int col = 0; col < msa.getBlock(b).length(); col++) {\n            int normalize = 0;\n            for (int s = 0; s < size; s++) {\n                if (residueDistances.get(s, column) != -1) {\n                    colDistances[column] += residueDistances.get(s, column);\n                    normalize++;\n                }\n            }\n            colDistances[column] /= normalize;\n            if (colDistances[column] > maxDist) {\n                if (rnd.nextDouble() > 0.5) {\n                    maxDist = colDistances[column];\n                    position = col;\n                    block = b;\n                }\n            }\n            column++;\n        }\n    }\n    Block currentBlock = msa.getBlock(block);\n    if (currentBlock.getCoreLength() <= Lmin)\n        return false;\n    for (int str = 0; str < size; str++) {\n        Integer residue = currentBlock.getAlignRes().get(str).get(position);\n        currentBlock.getAlignRes().get(str).remove(position);\n        if (residue != null)\n            freePool.get(str).add(residue);\n    }\n    return true;\n}","repo_id":"9","comment":"/**\n * Deletes an alignment column at a randomly selected position.\n */\n","repo_name":"biojava-master/","id":699,"method_signature":"boolean shrinkBlock()"}