{"callee_method_names":["String.substring","String.substring","String.substring","String.substring","String.equals","Chain.setId","Chain.setName","StringTokenizer.hasMoreTokens","StringTokenizer.nextToken","Group.setPDBName","AminoAcid.setRecordType","Chain.addGroup","List<Chain>.add","Group.trimToSize"],"method_name":"PDBFileParser.pdb_SEQRES_Handler","method_implementation":"{\n    /*\n\t\t *          1         2         3         4         5         6         7\n\t\t * 1234567890123456789012345678901234567890123456789012345678901234567890\n\t\t * SEQRES   1 A  376  LYS PRO VAL THR VAL LYS LEU VAL ASP SER GLN ALA THR\n\t\t * SEQRES   1 A   21  GLY ILE VAL GLU GLN CYS CYS THR SER ILE CYS SER LEU\n\t\t * SEQRES   2 A   21  TYR GLN LEU GLU ASN TYR CYS ASN\n\t\t * SEQRES   1 B   30  PHE VAL ASN GLN HIS LEU CYS GLY SER HIS LEU VAL GLU\n\t\t * SEQRES   2 B   30  ALA LEU TYR LEU VAL CYS GLY GLU ARG GLY PHE PHE TYR\n\t\t * SEQRES   3 B   30  THR PRO LYS ALA\n\t\t * SEQRES   1 C   21  GLY ILE VAL GLU GLN CYS CYS THR SER ILE CYS SER LEU\n\t\t * SEQRES   2 C   21  TYR GLN LEU GLU ASN TYR CYS ASN\n\t\t * SEQRES   1 D   30  PHE VAL ASN GLN HIS LEU CYS GLY SER HIS LEU VAL GLU\n\t\t * SEQRES   2 D   30  ALA LEU TYR LEU VAL CYS GLY GLU ARG GLY PHE PHE TYR\n\t\t * SEQRES   3 D   30  THR PRO LYS ALA\n\t\t */\n    String recordName = line.substring(0, 6).trim();\n    String chainID = line.substring(11, 12);\n    String newLength = line.substring(13, 17).trim();\n    String subSequence = line.substring(18);\n    if (lengthCheck == -1) {\n        lengthCheck = Integer.parseInt(newLength);\n    }\n    StringTokenizer subSequenceResidues = new StringTokenizer(subSequence);\n    Character aminoCode1 = null;\n    if (!recordName.equals(AminoAcid.SEQRESRECORD)) {\n        // should not have been called\n        return;\n    }\n    currentChain = isKnownChain(chainID, seqResChains);\n    if (currentChain == null) {\n        currentChain = new ChainImpl();\n        currentChain.setId(chainID);\n        currentChain.setName(chainID);\n    }\n    while (subSequenceResidues.hasMoreTokens()) {\n        String threeLetter = subSequenceResidues.nextToken();\n        aminoCode1 = StructureTools.get1LetterCode(threeLetter);\n        //if (aminoCode1 == null) {\n        // could be a nucleotide...\n        // but getNewGroup takes care of that and converts ATOM records with aminoCode1 == nnull to nucleotide...\n        //}\n        currentGroup = getNewGroup(\"ATOM\", aminoCode1, threeLetter);\n        currentGroup.setPDBName(threeLetter);\n        if (currentGroup instanceof AminoAcid) {\n            AminoAcid aa = (AminoAcid) currentGroup;\n            aa.setRecordType(AminoAcid.SEQRESRECORD);\n        }\n        // add the current resNum to the new chain.\n        currentChain.addGroup(currentGroup);\n    }\n    Chain test = isKnownChain(chainID, seqResChains);\n    if (test == null)\n        seqResChains.add(currentChain);\n    if (currentGroup != null)\n        currentGroup.trimToSize();\n    currentGroup = null;\n    currentChain = null;\n    //\t\t the current chain is finished!\n    //if ( current_chain.getLength() != lengthCheck ){\n    //\tSystem.err.println(\"the length of chain \" + current_chain.getName() + \"(\" +\n    //\t\t\tcurrent_chain.getLength() + \") does not match the expected \" + lengthCheck);\n    //}\n    lengthCheck = Integer.parseInt(newLength);\n}","repo_id":"9","comment":"/**\n * Handler for\n * SEQRES record format\n * SEQRES records contain the amino acid or nucleic acid sequence of residues in each chain of the macromolecule that was studied.\n * <p>\n * Record Format:\n * <p>\n * <pre>\n * COLUMNS        DATA TYPE       FIELD         DEFINITION\n * ---------------------------------------------------------------------------------\n * 1 -  6        Record name     \"SEQRES\"\n * 9 - 10        Integer         serNum        Serial number of the SEQRES record\n * for the current chain.  Starts at 1\n * and increments by one each line.\n * Reset to 1 for each chain.\n * 12             Character       chainID       Chain identifier.  This may be any\n * single legal character, including a\n * blank which is used if there is\n * only one chain.\n * 14 - 17        Integer         numRes        Number of residues in the chain.\n * This value is repeated on every\n * record.\n * 20 - 22        Residue name    resName       Residue name.\n * 24 - 26        Residue name    resName       Residue name.\n * 28 - 30        Residue name    resName       Residue name.\n * 32 - 34        Residue name    resName       Residue name.\n * 36 - 38        Residue name    resName       Residue name.\n * 40 - 42        Residue name    resName       Residue name.\n * 44 - 46        Residue name    resName       Residue name.\n * 48 - 50        Residue name    resName       Residue name.\n * 52 - 54        Residue name    resName       Residue name.\n * 56 - 58        Residue name    resName       Residue name.\n * 60 - 62        Residue name    resName       Residue name.\n * 64 - 66        Residue name    resName       Residue name.\n * 68 - 70        Residue name    resName       Residue name.\n * <\/pre>\n * @author Jules Jacobsen\n */\n","repo_name":"biojava-master/","id":1168,"method_signature":"void pdb_SEQRES_Handler(String)"}