{"callee_method_names":["String.length","Logger.info","String.substring","String.substring","String.substring","String.substring","String.substring","String.length","String.substring","String.substring","Matrix4d.setElement","Matrix4d.setElement","Matrix4d.setElement","Matrix4d.setElement","List<Matrix4d>.add","Logger.info","Element.getMessage"],"method_name":"PDBFileParser.pdb_MTRIXn_Handler","method_implementation":"{\n    // don't process incomplete records\n    if (line.length() < 55) {\n        logger.info(\"MTRIXn record has fewer than 55 columns: will ignore it\");\n        return;\n    }\n    try {\n        int rowIndex = Integer.parseInt(line.substring(5, 6));\n        double col1Value = Double.parseDouble(line.substring(10, 20));\n        double col2Value = Double.parseDouble(line.substring(20, 30));\n        double col3Value = Double.parseDouble(line.substring(30, 40));\n        double translValue = Double.parseDouble(line.substring(45, 55));\n        int iGiven = 0;\n        if (line.length() >= 60 && !line.substring(59, 60).trim().isEmpty()) {\n            iGiven = Integer.parseInt(line.substring(59, 60));\n        }\n        if (iGiven == 1)\n            return;\n        if (ncsOperators == null) {\n            // we initialise on first pass\n            ncsOperators = new ArrayList<Matrix4d>();\n        }\n        if (currentNcsOp == null) {\n            // initialised to identity\n            currentNcsOp = new Matrix4d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n        }\n        currentNcsOp.setElement(rowIndex - 1, 0, col1Value);\n        currentNcsOp.setElement(rowIndex - 1, 1, col2Value);\n        currentNcsOp.setElement(rowIndex - 1, 2, col3Value);\n        currentNcsOp.setElement(rowIndex - 1, 3, translValue);\n        if (rowIndex == 3) {\n            ncsOperators.add(currentNcsOp);\n            // we initialise for next matrix to come\n            // initialised to identity\n            currentNcsOp = new Matrix4d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n        }\n    } catch (NumberFormatException e) {\n        logger.info(\"Could not parse a number in MTRIXn record (\" + e.getMessage() + \") from line: >\" + line + \"<\");\n    }\n}","repo_id":"9","comment":"/**\n * Handler for MTRIXn records. They specify extra NCS operators (usually in virus entries)\n *\n * See http://www.wwpdb.org/documentation/format33/sect8.html#MTRIXn\n * <pre>\n * COLUMNS        DATA TYPE     FIELD         DEFINITION\n * -------------------------------------------------------------\n *\n *  1 -  6        Record name   \"MTRIXn\"      n=1, 2, or 3\n *  8 - 10        Integer       serial        Serial number.\n * 11 - 20        Real(10.6)    m[n][1]       Mn1\n * 21 - 30        Real(10.6)    m[n][2]       Mn2\n * 31 - 40        Real(10.6)    m[n][3]       Mn3\n * 46 - 55        Real(10.5)    v[n]          Vn\n * 60             Integer       iGiven        1\n *\n * <\/pre>\n * Note that we ignore operators with iGiven==1\n *\n * @param line\n */\n","repo_name":"biojava-master/","id":1178,"method_signature":"void pdb_MTRIXn_Handler(String)"}