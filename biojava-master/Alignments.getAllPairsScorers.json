{"callee_method_names":["List<S>.size","List<S>.size","List<PairwiseSequenceScorer<S, C>>.add","List<S>.get","List<S>.get"],"method_name":"Alignments.getAllPairsScorers","method_implementation":"{\n    List<PairwiseSequenceScorer<S, C>> allPairs = new ArrayList<PairwiseSequenceScorer<S, C>>();\n    for (int i = 0; i < sequences.size(); i++) {\n        for (int j = i + 1; j < sequences.size(); j++) {\n            allPairs.add(getPairwiseScorer(sequences.get(i), sequences.get(j), type, gapPenalty, subMatrix));\n        }\n    }\n    return allPairs;\n}","repo_id":"9","comment":"/**\n * Factory method which sets up a sequence pair scorer for all {@link Sequence} pairs in the given {@link List}.\n *\n * @param <S> each {@link Sequence} of a pair is of type S\n * @param <C> each element of a {@link Sequence} is a {@link Compound} of type C\n * @param sequences the {@link List} of {@link Sequence}s to align\n * @param type chosen type from list of pairwise sequence scoring routines\n * @param gapPenalty the gap penalties used during alignment\n * @param subMatrix the set of substitution scores used during alignment\n * @return list of sequence pair scorers\n */\n","repo_name":"biojava-master/","id":40,"method_signature":"List<PairwiseSequenceScorer<S,C>> getAllPairsScorers(List, PairwiseSequenceScorerType, GapPenalty, SubstitutionMatrix)"}