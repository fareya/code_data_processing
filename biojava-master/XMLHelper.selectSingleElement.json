{"callee_method_names":["String.indexOf","Element.getChildNodes","NodeList.getLength","NodeList.item","Element.getNodeType","Element.getNodeName","XPath.evaluate"],"method_name":"XMLHelper.selectSingleElement","method_implementation":"{\n    if (element == null) {\n        return null;\n    }\n    if (xpathExpression.indexOf(\"/\") == -1) {\n        NodeList nodeList = element.getChildNodes();\n        for (int i = 0; i < nodeList.getLength(); i++) {\n            Node node = nodeList.item(i);\n            if (node.getNodeType() == Node.ELEMENT_NODE && node.getNodeName().equals(xpathExpression)) {\n                return (Element) node;\n            }\n        }\n        //  NodeList nodes = element.getElementsByTagName(xpathExpression);\n        //  if (nodes.getLength() > 0) {\n        //      return (Element) nodes.item(0);\n        //  } else {\n        return null;\n        //  }\n    } else {\n        XPath xpath = XPathFactory.newInstance().newXPath();\n        Element node = (Element) xpath.evaluate(xpathExpression, element, XPathConstants.NODE);\n        return node;\n    }\n}","repo_id":"9","comment":"/**\n * If {@code}xpathExpression{@code} is a plain string with no '/' characterr, this is\n * interpreted as a child element name to search for.\n * <b/>\n * If {@code}xpathExpression{@code} is an XPath expression, this is evaluated and is assumed\n * to identify a single element.\n * @param element\n * @param xpathExpression\n * @return A single element or null if no match or the 1st match if matches more than 1\n * @throws XPathExpressionException\n */\n","repo_name":"biojava-master/","id":2590,"method_signature":"Element selectSingleElement(Element, String)"}