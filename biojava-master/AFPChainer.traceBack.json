{"callee_method_ids":[484,486,487],"callee_method_names":["AFPChain.setConn","AFPChain.setDVar","AFPChain.getMinLen","AFPChain.getAfpSet","AFPChain.getDVar","AFPChain.setAfpChainLen","AFPChain.getAfpChainList","AFPChain.getAfpChainTwiBin","AFPChain.getAfpChainTwiList","AFPChain.setAfpChainList","AFPChain.setAfpChainTwiBin","AFPChain.setAfpChainTwiList","AFPChain.getAfpChainTwiNum","AFPChain.getAlignScore","List<AFP>.get","List<AFP>.get","AFPChain.getConn","AFPChain.setChainRmsd","AFPChain.setChainLen","AFPChain.getChainLen","AFPChain.getBlock2Afp","AFPChain.getBlockRmsd","AFPChain.getBlockSize","List<AFP>.get","AFPChain.getMisLen","List<AFP>.get","List<AFP>.get","AFPChain.setMisLen","AFPChain.getGapLen","List<AFP>.get","List<AFP>.get","AFPChain.setGapLen","AFPChain.setBlock2Afp","AFPChain.setChainLen","AFPChain.setBlockSize","AFPChain.setBlockRmsd","AFPChain.getBlockNum","AFPChain.setBlockNum","AFPChain.setAfpChainList","AFPChain.setAfpChainTwiList"],"method_name":"AFPChainer.traceBack","method_implementation":"{\n    afpChain.setConn(0d);\n    afpChain.setDVar(0d);\n    int minLen = afpChain.getMinLen();\n    List<AFP> afpSet = afpChain.getAfpSet();\n    int afpChainLen = 0;\n    //trace-back from currafp (maxsco)\n    int[] afpchain = new int[minLen];\n    int[] afptwibin = new int[minLen];\n    double[] afptwilist = new double[minLen];\n    int currafp = currafp0;\n    int s = 0;\n    afptwibin[s] = 0;\n    afpchain[s++] = currafp;\n    boolean isConnected = false;\n    int prevafp;\n    // int     alnlen = afpSet.get(afpchain[s]).getFragLen();\n    //Double  conn = new Double(0) ;\n    //Double dvar =  new Double(0);\n    while ((prevafp = pre[currafp]) != -1) {\n        isConnected = afpPairConn(prevafp, currafp, params, afpChain);\n        if (isConnected)\n            afptwibin[s - 1] = 1;\n        else\n            afptwibin[s - 1] = 0;\n        Double dvar = afpChain.getDVar();\n        afptwilist[s - 1] = dvar;\n        //note s - 1: the transformation of prevafp-currafp is recorded in currafp\n        currafp = prevafp;\n        // alnlen += afpSet.get(currafp).getFragLen();\n        afpchain[s++] = currafp;\n    }\n    afpChainLen = s;\n    afpChain.setAfpChainLen(afpChainLen);\n    //first afp without transformation\n    if (isConnected)\n        afptwibin[s - 1] = 1;\n    else\n        afptwibin[s - 1] = 0;\n    //if(debug)\n    //   System.out.println(String.format(\"including %d AFPs, %d residues\\n\", afpChainLen, alnlen));\n    //record the optimal alignment in afpChainList (afpChainLen)\n    int[] afpChainList = afpChain.getAfpChainList();\n    double[] afpChainTwiBin = afpChain.getAfpChainTwiBin();\n    double[] afpChainTwiList = afpChain.getAfpChainTwiList();\n    if (afpChainList == null) {\n        afpChainList = new int[s];\n        afpChain.setAfpChainList(afpChainList);\n        afpChainTwiBin = new double[s];\n        afpChain.setAfpChainTwiBin(afpChainTwiBin);\n        afpChainTwiList = new double[s];\n        afpChain.setAfpChainTwiList(afpChainTwiList);\n    }\n    int afpChainTwiNum = afpChain.getAfpChainTwiNum();\n    int i;\n    for (i = 0; i < s; i++) {\n        afpChainList[i] = afpchain[s - 1 - i];\n        afpChainTwiBin[i] = afptwibin[s - 1 - i];\n        afpChainTwiList[i] = afptwilist[s - 1 - i];\n        afpChainTwiNum += afptwibin[s - 1 - i];\n    }\n    if (afpChainTwiNum != twist) {\n        System.err.println(String.format(\"AFPChainer Warning: the twists number is not consistent %d %d\\n\", afpChainTwiNum, twist));\n    }\n    double alignScore = afpChain.getAlignScore();\n    double checkscore = afpSet.get(afpChainList[0]).getScore();\n    for (i = 1; i < afpChainLen; i++) {\n        isConnected = afpPairConn(afpChainList[i - 1], afpChainList[i], params, afpChain);\n        checkscore = checkscore + afpSet.get(afpChainList[i]).getScore() + afpChain.getConn();\n    }\n    if (Math.abs(checkscore - alignScore) > 1e-4) {\n        System.err.println(String.format(\"AFPChainer Warning: fail in alignment score checking %.4f %.4f\\n\", alignScore, checkscore));\n    }\n    if (debug)\n        System.out.println(\"traceBack:\" + afpChainLen + \" \" + afpChainList.length);\n    double rmsd = calAfpRmsd(afpChainLen, afpChainList, 0, afpChain, ca1, ca2);\n    afpChain.setChainRmsd(rmsd);\n    if (debug)\n        System.out.println(\"Chain RMSD: \" + rmsd);\n    int b1 = 0;\n    int bk = 0;\n    int a, b;\n    afpChain.setChainLen(0);\n    int chainLen = afpChain.getChainLen();\n    int[] block2Afp = afpChain.getBlock2Afp();\n    double[] blockRmsd = afpChain.getBlockRmsd();\n    int[] blockSize = afpChain.getBlockSize();\n    block2Afp[0] = 0;\n    for (i = 0; i < afpChainLen; i++) {\n        a = afpChainList[i];\n        chainLen += afpSet.get(a).getFragLen();\n        if (i > 0) {\n            b = afpChainList[i - 1];\n            int misLen = afpChain.getMisLen();\n            misLen += calcMismatch(afpSet.get(a), afpSet.get(b));\n            afpChain.setMisLen(misLen);\n            int gapLen = afpChain.getGapLen();\n            gapLen += calcGap(afpSet.get(a), afpSet.get(b));\n            afpChain.setGapLen(gapLen);\n        }\n        if (afpChainTwiBin[i] == 1) {\n            if (debug)\n                System.out.println(\" ** calAfpTmsd : afpChainWtiBin == 1 : i: \" + i + \" i-b1: \" + (i - b1) + \" b1: \" + b1 + \" afpChainList.len: \" + afpChainList.length);\n            //int len = afpChainList.length - b1 +1;\n            //int[] fakeList = new int[len];\n            //int pos = -1;\n            //for ( int fPos = b1 ; fPos< afpChainList.length ; fPos++){\n            //   pos++;\n            //   fakeList[pos] = afpChainList[fPos];\n            //}\n            if (debug)\n                System.err.println(\"calculation calAfpRmsd \" + i + \" \" + b1 + \" \");\n            rmsd = calAfpRmsd(i - b1, afpChainList, b1, afpChain, ca1, ca2);\n            blockRmsd[bk] = rmsd;\n            blockSize[bk] = i - b1;\n            b1 = i;\n            //System.out.println(\"block2Afp.length:\"+ block2Afp.length + \" \" + bk + \" \" + i + \" \" + afpChain.getMaxTra() );\n            //next-block\n            block2Afp[++bk] = i;\n        }\n    }\n    afpChain.setBlock2Afp(block2Afp);\n    afpChain.setChainLen(chainLen);\n    if (debug)\n        System.out.println(\"after loop over all afpChainList \" + (i - b1) + \" \" + b1);\n    rmsd = calAfpRmsd(i - b1, afpChainList, b1, afpChain, ca1, ca2);\n    if (debug)\n        System.out.println(\"*** i:\" + i + \" b1: \" + b1 + \" i-b1 \" + (i - b1));\n    // argh this is the block RMSD, not the chain RMSD!\n    //afpChain.setChainRmsd(rmsd);\n    //rmsd = calAfpRmsd(i - b1, afpChainList[b1]);\n    blockSize[bk] = i - b1;\n    blockRmsd[bk] = rmsd;\n    afpChain.setBlockSize(blockSize);\n    afpChain.setBlockRmsd(blockRmsd);\n    int blockNum = afpChain.getBlockNum();\n    blockNum = ++bk;\n    if (debug)\n        System.err.println(\"AFPChainser setBlockNUm:\" + blockNum);\n    afpChain.setBlockNum(blockNum);\n    afpChain.setAfpChainList(afpChainList);\n    afpChain.setAfpChainTwiList(afpChainTwiList);\n}","repo_id":"9","comment":"/**\n * derive the optimal chaining of AFPs by trace-back\n */\n","repo_name":"biojava-master/","id":417,"method_signature":"void traceBack(int[], int, int, FatCatParameters, AFPChain, Atom[], Atom[])"}