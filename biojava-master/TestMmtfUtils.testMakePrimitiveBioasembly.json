{"callee_method_ids":[956,958],"callee_method_names":["BiologicalAssemblyTransformation.setChainId","BiologicalAssemblyTransformation.setTransformationMatrix","List<BiologicalAssemblyTransformation>.add","BioAssemblyInfo.setTransforms","Map<String, Integer>.put","Map<double[], int[]>.keySet","Map<double[], int[]>.values"],"method_name":"TestMmtfUtils.testMakePrimitiveBioasembly","method_implementation":"{\n    double[] testData = new double[] { 0.0, 0.1, 0.2, 0.3, 1.0, 1.1, 1.2, 1.3, 2.0, 2.1, 2.2, 2.3, 3.0, 3.1, 3.2, 3.3 };\n    BioAssemblyInfo bioAssemblyInfo = new BioAssemblyInfo();\n    List<BiologicalAssemblyTransformation> transforms = new ArrayList<>();\n    BiologicalAssemblyTransformation biologicalAssemblyTransformation = new BiologicalAssemblyTransformation();\n    biologicalAssemblyTransformation.setChainId(\"C\");\n    biologicalAssemblyTransformation.setTransformationMatrix(new Matrix4d(testData));\n    transforms.add(biologicalAssemblyTransformation);\n    bioAssemblyInfo.setTransforms(transforms);\n    // Map the chain to the second index\n    Map<String, Integer> chainIdToIndexMap = new HashMap<>();\n    chainIdToIndexMap.put(\"C\", 2);\n    // Now do the conversion and test they are the same\n    Map<double[], int[]> transMap = MmtfUtils.getTransformMap(bioAssemblyInfo, chainIdToIndexMap);\n    assertArrayEquals(testData, (double[]) transMap.keySet().toArray()[0], 0.0);\n    assertArrayEquals(new int[] { 2 }, (int[]) transMap.values().toArray()[0]);\n}","repo_id":"9","comment":"/**\n * Test to check the conversion of BioassemblyInfo to a primitive map.\n */\n","repo_name":"biojava-master/","id":2252,"method_signature":"void testMakePrimitiveBioasembly()"}