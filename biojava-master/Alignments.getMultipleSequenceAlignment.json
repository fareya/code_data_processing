{"callee_method_names":["List<S>.get"],"method_name":"Alignments.getMultipleSequenceAlignment","method_implementation":"{\n    // TODO convert other factories to this parameter style?\n    CompoundSet<C> cs = sequences.get(0).getCompoundSet();\n    PairwiseSequenceScorerType ps = PairwiseSequenceScorerType.GLOBAL_IDENTITIES;\n    GapPenalty gapPenalty = new SimpleGapPenalty();\n    SubstitutionMatrix<C> subMatrix = null;\n    if (cs == AminoAcidCompoundSet.getAminoAcidCompoundSet()) {\n        // compound types must be equal since compound sets are equal\n        @SuppressWarnings(\"unchecked\")\n        SubstitutionMatrix<C> temp = (SubstitutionMatrix<C>) SubstitutionMatrixHelper.getBlosum62();\n        subMatrix = temp;\n    } else if (cs == DNACompoundSet.getDNACompoundSet()) {\n        // compound types must be equal since compound sets are equal\n        @SuppressWarnings(\"unchecked\")\n        SubstitutionMatrix<C> temp = (SubstitutionMatrix<C>) SubstitutionMatrixHelper.getNuc4_4();\n        subMatrix = temp;\n    } else if (cs == AmbiguityDNACompoundSet.getDNACompoundSet()) {\n        // compound types must be equal since compound sets are equal\n        @SuppressWarnings(\"unchecked\")\n        SubstitutionMatrix<C> temp = (SubstitutionMatrix<C>) SubstitutionMatrixHelper.getNuc4_4();\n        subMatrix = temp;\n    }\n    ProfileProfileAlignerType pa = ProfileProfileAlignerType.GLOBAL;\n    for (Object o : settings) {\n        if (o instanceof PairwiseSequenceScorerType) {\n            ps = (PairwiseSequenceScorerType) o;\n        } else if (o instanceof GapPenalty) {\n            gapPenalty = (GapPenalty) o;\n        } else if (o instanceof SubstitutionMatrix<?>) {\n            if (cs != ((SubstitutionMatrix<?>) o).getCompoundSet()) {\n                throw new IllegalArgumentException(\"Compound sets of the sequences and substitution matrix must match.\");\n            }\n            // compound types must be equal since compound sets are equal\n            @SuppressWarnings(\"unchecked\")\n            SubstitutionMatrix<C> temp = (SubstitutionMatrix<C>) o;\n            subMatrix = temp;\n        } else if (o instanceof ProfileProfileAlignerType) {\n            pa = (ProfileProfileAlignerType) o;\n        }\n    }\n    // stage 1: pairwise similarity calculation\n    List<PairwiseSequenceScorer<S, C>> scorers = getAllPairsScorers(sequences, ps, gapPenalty, subMatrix);\n    runPairwiseScorers(scorers);\n    // stage 2: hierarchical clustering into a guide tree\n    GuideTree<S, C> tree = new GuideTree<S, C>(sequences, scorers);\n    scorers = null;\n    // stage 3: progressive alignment\n    Profile<S, C> msa = getProgressiveAlignment(tree, pa, gapPenalty, subMatrix);\n    // TODO stage 4: refinement\n    return msa;\n}","repo_id":"9","comment":"/**\n * Factory method which computes a multiple sequence alignment for the given {@link List} of {@link Sequence}s.\n *\n * @param <S> each {@link Sequence} of the {@link List} is of type S\n * @param <C> each element of a {@link Sequence} is a {@link Compound} of type C\n * @param sequences the {@link List} of {@link Sequence}s to align\n * @param settings optional settings that adjust the alignment\n * @return multiple sequence alignment {@link Profile}\n */\n","repo_name":"biojava-master/","id":37,"method_signature":"Profile<S,C> getMultipleSequenceAlignment(List, Object[])"}