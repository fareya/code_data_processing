{"callee_method_ids":[641,1327],"callee_method_names":["String.toLowerCase","AtomCache.setFiletype","AtomCache.getFileParsingParams","FileParsingParameters.setAtomCaThreshold","FileParsingParameters.setParseBioAssembly"],"method_name":"DemoShowLargeAssembly.readStructure","method_implementation":"{\n    // pre-computed files use lower case PDB IDs\n    pdbId = pdbId.toLowerCase();\n    // we just need this to track where to store PDB files\n    // this checks the PDB_DIR property (and uses a tmp location if not set)\n    AtomCache cache = new AtomCache();\n    cache.setFiletype(StructureFiletype.CIF);\n    FileParsingParameters p = cache.getFileParsingParams();\n    // some bio assemblies are large, we want an all atom representation and avoid\n    // switching to a Calpha-only representation for large molecules\n    // note, this requires several GB of memory for some of the largest assemblies, such a 1MX4\n    p.setAtomCaThreshold(Integer.MAX_VALUE);\n    // parse remark 350\n    p.setParseBioAssembly(true);\n    // download missing files\n    Structure structure = null;\n    try {\n        structure = StructureIO.getBiologicalAssembly(pdbId, bioAssemblyId);\n    } catch (Exception e) {\n        e.printStackTrace();\n        return null;\n    }\n    return structure;\n}","repo_id":"9","comment":"/**\n * Load a specific biological assembly for a PDB entry\n *\n * @param pdbId .. the PDB ID\n * @param bioAssemblyId .. the first assembly has the bioAssemblyId 1\n * @return a Structure object or null if something went wrong.\n */\n","repo_name":"biojava-master/","id":3239,"method_signature":"Structure readStructure(String, int)"}