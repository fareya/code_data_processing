{"callee_method_names":["String.length","String.replaceAll","String.length","String.length","String.charAt","String.charAt","String.substring","String.substring"],"method_name":"GenericInsdcHeaderFormat._write_feature_qualifier","method_implementation":"{\n    String line = \"\";\n    if (null == value) {\n        line = QUALIFIER_INDENT_STR + \"/\" + key + lineSep;\n        return line;\n    }\n    if (quote) {\n        // quote should be true for numerics\n        line = QUALIFIER_INDENT_STR + \"/\" + key + \"=\\\"\" + value + \"\\\"\";\n    } else {\n        line = QUALIFIER_INDENT_STR + \"/\" + key + \"=\" + value;\n    }\n    if (line.length() <= MAX_WIDTH) {\n        return line + lineSep;\n    }\n    String goodlines = \"\";\n    while (!\"\".equals(line.replaceAll(\"^\\\\s+\", \"\"))) {\n        if (line.length() <= MAX_WIDTH) {\n            goodlines += line + lineSep;\n            break;\n        }\n        //Insert line break...\n        int index;\n        for (index = Math.min(line.length() - 1, MAX_WIDTH); index > QUALIFIER_INDENT; index--) {\n            if (' ' == line.charAt(index)) {\n                break;\n            }\n        }\n        if (' ' != line.charAt(index)) {\n            //no nice place to break...\n            index = MAX_WIDTH;\n        }\n        assert index <= MAX_WIDTH;\n        goodlines += line.substring(0, index) + lineSep;\n        line = QUALIFIER_INDENT_STR + line.substring(index).replaceAll(\"^\\\\s+\", \"\");\n    }\n    return goodlines;\n}","repo_id":"9","comment":"/**\n * Format a feature qualifier using the MAX_WIDTH (default 80)\n * @param key\n * @param value\n * @param quote\n */\n","repo_name":"biojava-master/","id":2703,"method_signature":"String _write_feature_qualifier(String, String, boolean)"}