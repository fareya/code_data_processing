{"callee_method_ids":[2373,2372,2372],"callee_method_names":["Fastq.getVariant","Fastq.getQuality","Fastq.getQuality","StringBuilder.append","FastqVariant.quality","FastqVariant.qualityScore","StringBuilder.toString"],"method_name":"FastqTools.convertQualities","method_implementation":"{\n    if (fastq == null) {\n        throw new IllegalArgumentException(\"fastq must not be null\");\n    }\n    if (variant == null) {\n        throw new IllegalArgumentException(\"variant must not be null\");\n    }\n    if (fastq.getVariant().equals(variant)) {\n        return fastq.getQuality();\n    }\n    int size = fastq.getQuality().length();\n    double[] errorProbabilities = errorProbabilities(fastq, new double[size]);\n    StringBuilder sb = new StringBuilder(size);\n    for (int i = 0; i < size; i++) {\n        sb.append(variant.quality(variant.qualityScore(errorProbabilities[i])));\n    }\n    return sb.toString();\n}","repo_id":"9","comment":"/**\n * Convert the qualities in the specified FASTQ formatted sequence to the\n * specified FASTQ sequence format variant.\n *\n * @since 4.2\n * @param fastq FASTQ formatted sequence, must not be null\n * @param variant FASTQ sequence format variant, must not be null\n * @return the qualities in the specified FASTQ formatted sequence converted to the\n *    specified FASTQ sequence format variant\n */\n","repo_name":"biojava-master/","id":2368,"method_signature":"String convertQualities(Fastq, FastqVariant)"}