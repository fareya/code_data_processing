{"callee_method_names":["GenericFastaHeaderParser<ProteinSequence, AminoAcidCompound>.parseHeader","ProteinSequence.getAccession","ProteinSequence.getAccession","GenericFastaHeaderParser<ProteinSequence, AminoAcidCompound>.parseHeader","ProteinSequence.getAccession","ProteinSequence.getAccession","GenericFastaHeaderParser<ProteinSequence, AminoAcidCompound>.parseHeader","ProteinSequence.getAccession","ProteinSequence.getAccession","GenericFastaHeaderParser<ProteinSequence, AminoAcidCompound>.parseHeader","ProteinSequence.getAccession","ProteinSequence.getAccession","GenericFastaHeaderParser<ProteinSequence, AminoAcidCompound>.parseHeader","ProteinSequence.getAccession","ProteinSequence.getAccession","GenericFastaHeaderParser<ProteinSequence, AminoAcidCompound>.parseHeader","ProteinSequence.getAccession","ProteinSequence.getAccession","GenericFastaHeaderParser<ProteinSequence, AminoAcidCompound>.parseHeader","ProteinSequence.getAccession","ProteinSequence.getAccession","GenericFastaHeaderParser<ProteinSequence, AminoAcidCompound>.parseHeader","ProteinSequence.getAccession","ProteinSequence.getAccession","GenericFastaHeaderParser<ProteinSequence, AminoAcidCompound>.parseHeader","ProteinSequence.getAccession","ProteinSequence.getAccession","GenericFastaHeaderParser<ProteinSequence, AminoAcidCompound>.parseHeader","ProteinSequence.getAccession","ProteinSequence.getAccession","GenericFastaHeaderParser<ProteinSequence, AminoAcidCompound>.parseHeader","ProteinSequence.getAccession","ProteinSequence.getAccession","GenericFastaHeaderParser<ProteinSequence, AminoAcidCompound>.parseHeader","ProteinSequence.getAccession","ProteinSequence.getAccession","GenericFastaHeaderParser<ProteinSequence, AminoAcidCompound>.parseHeader","ProteinSequence.getAccession","ProteinSequence.getAccession","GenericFastaHeaderParser<ProteinSequence, AminoAcidCompound>.parseHeader","ProteinSequence.getAccession","ProteinSequence.getAccession"],"method_name":"GenericFastaHeaderParserTest.testParseHeader","method_implementation":"{\n    String header = \"\";\n    ProteinSequence sequence = new ProteinSequence(\"\");\n    GenericFastaHeaderParser<ProteinSequence, AminoAcidCompound> instance = new GenericFastaHeaderParser<ProteinSequence, AminoAcidCompound>();\n    header = \"gi|gi-number|gb|accession|locus\";\n    instance.parseHeader(header, sequence);\n    assertEquals(\"accession\", sequence.getAccession().getID());\n    assertEquals(sequence.getAccession().getDataSource(), DataSource.GENBANK);\n    header = \"gi|gi-number|emb|accession|locus\";\n    instance.parseHeader(header, sequence);\n    assertEquals(\"accession\", sequence.getAccession().getID());\n    assertEquals(sequence.getAccession().getDataSource(), DataSource.ENA);\n    header = \"gi|gi-number|dbj|accession|locus\";\n    instance.parseHeader(header, sequence);\n    assertEquals(\"accession\", sequence.getAccession().getID());\n    assertEquals(sequence.getAccession().getDataSource(), DataSource.DDBJ);\n    header = \"pir||entry\";\n    instance.parseHeader(header, sequence);\n    assertEquals(\"entry\", sequence.getAccession().getID());\n    assertEquals(sequence.getAccession().getDataSource(), DataSource.NBRF);\n    header = \"prf||name\";\n    instance.parseHeader(header, sequence);\n    assertEquals(\"name\", sequence.getAccession().getID());\n    assertEquals(sequence.getAccession().getDataSource(), DataSource.PRF);\n    header = \"sp|accession|name\";\n    instance.parseHeader(header, sequence);\n    assertEquals(\"accession\", sequence.getAccession().getID());\n    assertEquals(sequence.getAccession().getDataSource(), DataSource.UNIPROT);\n    header = \"pdb|entry|chain\";\n    instance.parseHeader(header, sequence);\n    assertEquals(\"entry:chain\", sequence.getAccession().getID());\n    assertEquals(sequence.getAccession().getDataSource(), DataSource.PDB1);\n    header = \"entry:chain|PDBID|CHAIN|SEQUENCE\";\n    instance.parseHeader(header, sequence);\n    assertEquals(\"entry:chain\", sequence.getAccession().getID());\n    assertEquals(sequence.getAccession().getDataSource(), DataSource.PDB2);\n    header = \"PDB:1ECY_A mol:protein length:142  ECOTIN\";\n    instance.parseHeader(header, sequence);\n    assertEquals(\"1ECY_A\", sequence.getAccession().getID());\n    assertEquals(sequence.getAccession().getDataSource(), DataSource.PDBe);\n    header = \"pat|country|number\";\n    instance.parseHeader(header, sequence);\n    assertEquals(\"number\", sequence.getAccession().getID());\n    assertEquals(sequence.getAccession().getDataSource(), DataSource.PATENTS);\n    header = \"bbs|number\";\n    instance.parseHeader(header, sequence);\n    assertEquals(\"number\", sequence.getAccession().getID());\n    assertEquals(sequence.getAccession().getDataSource(), DataSource.GENINFO);\n    header = \"gnl|database|identifier\";\n    instance.parseHeader(header, sequence);\n    assertEquals(\"identifier\", sequence.getAccession().getID());\n    assertEquals(sequence.getAccession().getDataSource(), DataSource.GENERAL);\n    header = \"ref|accession|locus\";\n    instance.parseHeader(header, sequence);\n    assertEquals(\"accession\", sequence.getAccession().getID());\n    assertEquals(sequence.getAccession().getDataSource(), DataSource.NCBI);\n    header = \"lcl|identifier\";\n    instance.parseHeader(header, sequence);\n    assertEquals(\"identifier\", sequence.getAccession().getID());\n    assertEquals(sequence.getAccession().getDataSource(), DataSource.LOCAL);\n}","repo_id":"9","comment":"/**\n * GenBank                           gi|gi-number|gb|accession|locus\n * ENA Data Library                 gi|gi-number|emb|accession|locus\n * DDBJ, DNA Database of Japan       gi|gi-number|dbj|accession|locus\n * NBRF PIR                          pir||entry\n * Protein Research Foundation       prf||name\n * SWISS-PROT                        sp|accession|name\n * Brookhaven Protein Data Bank (1)  pdb|entry|chain\n * Brookhaven Protein Data Bank (2)  entry:chain|PDBID|CHAIN|SEQUENCE\n * PDB EBI                           PDB:1ECY_A mol:protein length:142  ECOTIN\n * Patents                           pat|country|number\n * GenInfo Backbone Id               bbs|number\n * General database identifier       gnl|database|identifier\n * NCBI Reference Sequence           ref|accession|locus\n * Local Sequence identifier         lcl|identifier\n *\n * @author Scooter Willis <willishf at gmail dot com>\n */\n","repo_name":"biojava-master/","id":3225,"method_signature":"void testParseHeader()"}