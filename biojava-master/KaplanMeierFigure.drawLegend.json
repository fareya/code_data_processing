{"callee_method_names":["Graphics2D.setColor","Graphics2D.getFont","Font.getFontName","Font.getSize","Graphics2D.setFont","FontMetrics.getHeight","ArrayList<String>.size","FontMetrics.stringWidth","ArrayList<String>.get","Font.getFontName","Graphics2D.setFont","Graphics2D.drawString","ArrayList<String>.get","FontMetrics.stringWidth","ArrayList<String>.get","DecimalFormat.format","Graphics2D.drawString","FontMetrics.stringWidth","Graphics2D.drawLine","DecimalFormat.format","Graphics2D.drawString","FontMetrics.stringWidth","Graphics2D.drawLine","DecimalFormat.format","Graphics2D.drawString","FontMetrics.stringWidth","Graphics2D.drawLine","AffineTransform.rotate","Font.deriveFont","Graphics2D.setFont","FontMetrics.stringWidth","Graphics2D.drawString","Graphics2D.setFont","ArrayList.clear","ArrayList.clear","KMFigureInfo.isEmpty","ArrayList.add","ArrayList.add","ArrayList.add","ArrayList.add","KMFigureInfo.get","KMFigureInfo.get","KMFigureInfo.size","ArrayList.add","ArrayList.add","ArrayList.size","ArrayList.get","ArrayList.get","DecimalFormat.format","ArrayList.size","Graphics2D.drawString","FontMetrics.stringWidth","FontMetrics.getHeight","Graphics2D.drawString","FontMetrics.stringWidth","FontMetrics.getHeight","Graphics2D.drawLine","Graphics2D.setStroke","Graphics2D.drawLine","Graphics2D.drawLine","Graphics2D.drawString","FontMetrics.stringWidth","FontMetrics.getHeight"],"method_name":"KaplanMeierFigure.drawLegend","method_implementation":"{\n    Graphics2D g2 = (Graphics2D) g;\n    setRenderingHints(g2);\n    g2.setColor(Color.BLACK);\n    Font font = g2.getFont();\n    Font f = new Font(font.getFontName(), Font.BOLD, font.getSize());\n    g2.setFont(f);\n    fm = getFontMetrics(f);\n    int fontHeight = fm.getHeight();\n    for (int i = 0; i < title.size(); i++) {\n        if (fm.stringWidth(title.get(i)) > .8 * this.getWidth()) {\n            f = new Font(font.getFontName(), Font.BOLD, 10);\n            g2.setFont(f);\n            fm = getFontMetrics(f);\n        }\n        g2.drawString(title.get(i), (getSize().width - fm.stringWidth(title.get(i))) / 2, ((i + 1) * fontHeight));\n        // g2.setFont(font);\n    }\n    // draw the maxPercentage and minPercentage values\n    String label = df.format(minPercentage);\n    g2.drawString(label, left - 5 - (fm.stringWidth(label)), bottom + titleHeight / 6);\n    g2.drawLine(left - 5, bottom, left, bottom);\n    double d = minPercentage + kmfi.yaxisPercentIncrement;\n    //double graphHeight = top - bottom;\n    while (d < maxPercentage) {\n        int yvalue = bottom - (int) (d * (bottom - top));\n        label = df.format(d * 100);\n        //\n        g2.drawString(label, left - 5 - (fm.stringWidth(label)), yvalue + titleHeight / 6);\n        g2.drawLine(left - 5, yvalue, left, yvalue);\n        d = d + kmfi.yaxisPercentIncrement;\n    }\n    label = df.format(maxPercentage * 100);\n    g2.drawString(label, left - 5 - (fm.stringWidth(label)), top + (titleHeight) / 6);\n    g2.drawLine(left - 5, top, left, top);\n    // Create a rotation transformation for the font.\n    AffineTransform fontAT = new AffineTransform();\n    // Derive a new font using a rotatation transform\n    fontAT.rotate(270 * java.lang.Math.PI / 180);\n    Font theDerivedFont = f.deriveFont(fontAT);\n    // set the derived font in the Graphics2D context\n    g2.setFont(theDerivedFont);\n    // Render a string using the derived font\n    int yaxisHeight = fm.stringWidth(kmfi.yAxisLegend);\n    g2.drawString(kmfi.yAxisLegend, yaxisLabel, (bottom - (int) (.5 * (bottom - top))) + yaxisHeight / 2);\n    // put the original font back\n    g2.setFont(f);\n    double timeDistance = maxTime - minTime;\n    double timeIncrement = timeDistance * kmfi.xaxisPercentIncrement;\n    double timeInt = (int) Math.floor(timeIncrement);\n    if (timeInt < 1.0) {\n        timeInt = 1.0;\n    }\n    adjustedPercentIncrement = timeInt / timeDistance;\n    //kmfi.xaxisPercentIncrement;\n    d = adjustedPercentIncrement;\n    xAxisTimeValues.clear();\n    xAxisTimeCoordinates.clear();\n    //if we don't have time values then use percentage to set time. Not perfect but allows different tics\n    if (kmfi.xAxisLabels.isEmpty()) {\n        xAxisTimeValues.add(minTime);\n        xAxisTimeCoordinates.add(left);\n        while (d <= 1.0) {\n            //\n            double xaxisTime = ((minTime * kmfi.timeScale) + d * ((maxTime - minTime) * kmfi.timeScale));\n            xAxisTimeValues.add(xaxisTime);\n            Integer coordinate = left + (int) (d * (right - left));\n            xAxisTimeCoordinates.add(coordinate);\n            //       System.out.println(d + \" \" + left + \" \" + right + \" \" + coordinate + \" \" + minTime + \" \" + maxTime);\n            //kmfi.xaxisPercentIncrement;\n            d = d + adjustedPercentIncrement;\n        }\n    } else {\n        minTime = kmfi.xAxisLabels.get(0);\n        maxTime = kmfi.xAxisLabels.get(kmfi.xAxisLabels.size() - 1);\n        for (Double xaxisTime : kmfi.xAxisLabels) {\n            xAxisTimeValues.add(xaxisTime);\n            d = (xaxisTime - minTime) / (maxTime - minTime);\n            Integer coordinate = left + (int) (d * (right - left));\n            xAxisTimeCoordinates.add(coordinate);\n        }\n    }\n    for (int i = 0; i < xAxisTimeValues.size(); i++) {\n        Double xaxisTime = xAxisTimeValues.get(i);\n        Integer xCoordinate = xAxisTimeCoordinates.get(i);\n        label = df.format(xaxisTime);\n        if (i == xAxisTimeValues.size() - 1) {\n            g2.drawString(label, xCoordinate - (fm.stringWidth(label)), bottom + fm.getHeight() + 5);\n        } else {\n            g2.drawString(label, xCoordinate - (fm.stringWidth(label) / 2), bottom + fm.getHeight() + 5);\n        }\n        g2.drawLine(xCoordinate, bottom, xCoordinate, bottom + 5);\n    }\n    // draw the vertical and horizontal lines\n    g2.setStroke(kmfi.axisStroke);\n    g2.drawLine(left, top, left, bottom);\n    g2.drawLine(left, bottom, right, bottom);\n    // draw xAxis legend\n    g2.drawString(kmfi.xAxisLegend, getSize().width / 2 - (fm.stringWidth(kmfi.xAxisLegend) / 2), bottom + 2 * fm.getHeight() + 10);\n}","repo_id":"9","comment":"/**\n * Setup the axis, labels etc\n *\n * @param g\n */\n","repo_name":"biojava-master/","id":3807,"method_signature":"void drawLegend(Graphics)"}