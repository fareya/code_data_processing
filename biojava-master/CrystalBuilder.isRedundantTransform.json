{"callee_method_ids":[1424],"callee_method_names":["ArrayList<CrystalTransform>.iterator","Iterator<CrystalTransform>.hasNext","Iterator<CrystalTransform>.next","CrystalTransform.isEquivalent","Logger.debug","Iterator<CrystalTransform>.remove"],"method_name":"CrystalBuilder.isRedundantTransform","method_implementation":"{\n    Iterator<CrystalTransform> it = visitedCrystalTransforms.iterator();\n    while (it.hasNext()) {\n        CrystalTransform v = it.next();\n        if (tt.isEquivalent(v)) {\n            logger.debug(\"Skipping redundant transformation: \" + tt + \", equivalent to \" + v);\n            // there's only 1 possible equivalent partner for each visited matrix\n            // (since the equivalent is its inverse matrix and the inverse matrix is unique)\n            // thus once the partner has been seen, we don't need to check it ever again\n            it.remove();\n            return true;\n        }\n    }\n    return false;\n}","repo_id":"9","comment":"/**\n * Checks whether given transformId/translation is symmetry redundant\n * Two transformations are symmetry redundant if their matrices (4d) multiplication gives the identity, i.e.\n * if one is the inverse of the other.\n * @param tt\n * @return\n */\n","repo_name":"biojava-master/","id":1441,"method_signature":"boolean isRedundantTransform(CrystalTransform)"}