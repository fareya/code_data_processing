{"callee_method_ids":[1007,1008,1010],"callee_method_names":["ResidueRange.getStart","ResidueRange.getChainName","AtomPositionMap.getNavMap","ResidueNumber.getChainName","AtomPositionMap.getNavMap","Logger.warn","AtomPositionMap.getFirst","ResidueRange.getEnd","AtomPositionMap.getLast","ResidueNumber.setChainName","ResidueNumber.setChainName","AtomPositionMap.trimToValidResidues"],"method_name":"ResidueRangeAndLength.parse","method_implementation":"{\n    ResidueRange rr = parse(s);\n    ResidueNumber start = rr.getStart();\n    String chain = rr.getChainName();\n    // handle special \"_\" chain\n    if (chain == null || \"_\".equals(chain)) {\n        ResidueNumber first = map.getNavMap().firstKey();\n        chain = first.getChainName();\n        // Quick check for additional chains. Not guaranteed if the atoms are out of order.\n        if (!map.getNavMap().lastKey().getChainName().equals(chain)) {\n            logger.warn(\"Multiple possible chains match '_'. Using chain {}\", chain);\n        }\n    }\n    // get a non-null start and end\n    // if it's the whole chain, choose the first and last residue numbers in the chain\n    if (start == null) {\n        start = map.getFirst(chain);\n    }\n    ResidueNumber end = rr.getEnd();\n    if (end == null) {\n        // should happen iff start==null\n        end = map.getLast(chain);\n    }\n    // Replace '_'\n    start.setChainName(chain);\n    end.setChainName(chain);\n    // Now fix any errors and calculate the length\n    return map.trimToValidResidues(new ResidueRange(chain, start, end));\n}","repo_id":"9","comment":"/**\n * Parses a residue range.\n *\n * The AtomPositionMap is used to calculate the length and fill in missing\n * information, such as for whole chains ('A:'). Supports the special chain\n * name '_' for single-chain structures.\n *\n * If residues are specified outside of the range given in the map,\n * attempts to decrease the input range to valid values. In extreme cases\n * where this process fails fails to find any valid indices, returns null.\n *\n * For a function which more conservatively represents the input range,\n * without chain inference and error fixes, use {@link ResidueRange#parse(String)}.\n * @param s\n *            A string of the form chain_start-end. For example: <code>A.5-100<\/code>.\n * @return The unique ResidueRange corresponding to {@code s}.\n */\n","repo_name":"biojava-master/","id":1714,"method_signature":"ResidueRangeAndLength parse(String, AtomPositionMap)"}