{"callee_method_ids":[619,619,773,476],"callee_method_names":["Method.setAccessible","CeCPMain.getParameters","CECPParameters.setDuplicationHint","AtomCache.getAtoms","AtomCache.getAtoms","CeCPMain.align","AFPChain.clone","Method.invoke"],"method_name":"OptimalCECPMainTest.testPermuteOptAlnUnpermuted","method_implementation":"{\n    //test private member using reflection\n    Method permuteOptAln = OptimalCECPMain.class.getDeclaredMethod(\"permuteOptAln\", AFPChain.class, int.class);\n    permuteOptAln.setAccessible(true);\n    String name1, name2;\n    name1 = \"d1qdmA1\";\n    name2 = \"d1nklA_\";\n    CeCPMain ce = (CeCPMain) StructureAlignmentFactory.getAlgorithm(CeCPMain.algorithmName);\n    CECPParameters param = (CECPParameters) ce.getParameters();\n    param.setDuplicationHint(DuplicationHint.RIGHT);\n    Atom[] ca1 = cache.getAtoms(name1);\n    Atom[] ca2 = cache.getAtoms(name2);\n    AFPChain afpChain = ce.align(ca1, ca2);\n    AFPChain afpChain2 = (AFPChain) afpChain.clone();\n    permuteOptAln.invoke(null, afpChain2, 0);\n    Assert.assertEquals(\"Permuting by 0 changed the alignment!\", afpChain, afpChain2);\n}","repo_id":"9","comment":"/**\n * Very basic test of {@link OptimalCECPMain#permuteOptAln(AFPChain, int)}\n *\n * It should do nothing on unpermuted alignments.\n * @throws NoSuchMethodException\n * @throws SecurityException\n * @throws StructureException\n * @throws IOException\n * @throws InvocationTargetException\n * @throws IllegalAccessException\n * @throws IllegalArgumentException\n */\n","repo_name":"biojava-master/","id":149,"method_signature":"void testPermuteOptAlnUnpermuted()"}