{"callee_method_names":["StringBuffer.append","StringBuffer.append","StringBuffer.append","StringBuffer.append","StringBuffer.append","StringBuffer.append","SecStrucState.getTurn","StringBuffer.append","SecStrucState.getTurn","StringBuffer.append","SecStrucState.getTurn","StringBuffer.append","SecStrucState.getType","StringBuffer.append","SecStrucGroup[].getPDBName","StringBuffer.toString","StringBuffer.toString","StringBuffer.toString","StringBuffer.toString","StringBuffer.toString"],"method_name":"SecStrucCalc.printHelixSummary","method_implementation":"{\n    //3-10 helix\n    StringBuffer g = new StringBuffer();\n    //alpha helix\n    StringBuffer h = new StringBuffer();\n    //pi-helix\n    StringBuffer i = new StringBuffer();\n    //SS summary\n    StringBuffer ss = new StringBuffer();\n    //AA one-letter\n    StringBuffer aa = new StringBuffer();\n    String nl = System.getProperty(\"line.separator\");\n    g.append(\"3 turn: \");\n    h.append(\"4 turn: \");\n    i.append(\"5 turn: \");\n    ss.append(\"SS:     \");\n    aa.append(\"AA:     \");\n    for (int k = 0; k < groups.length; k++) {\n        SecStrucState state = getSecStrucState(k);\n        g.append(state.getTurn()[0]);\n        h.append(state.getTurn()[1]);\n        i.append(state.getTurn()[2]);\n        ss.append(state.getType());\n        aa.append(StructureTools.get1LetterCode(groups[k].getPDBName()));\n    }\n    return g.toString() + nl + h.toString() + nl + i.toString() + nl + ss.toString() + nl + aa.toString();\n}","repo_id":"9","comment":"/**\n * Generate a summary of this SS prediction with information about\n * the three types of helix turns in different row sequences.\n * <p>\n * This is similar to the summary output of Jmol, and useful to visualize\n * the helix patterns.\n *\n * @return String helix summary\n */\n","repo_name":"biojava-master/","id":1595,"method_signature":"String printHelixSummary()"}