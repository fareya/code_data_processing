{"callee_method_names":[],"method_name":"MultipleMcOptimizer.probabilityFunction","method_implementation":"{\n    double prob = (C + AS) / (m * C);\n    // Normalization factor\n    double norm = (1 - (m * 1.0) / maxIter);\n    return Math.min(Math.max(prob * norm, 0.0), 1.0);\n}","repo_id":"9","comment":"/**\n * Calculates the probability of accepting a bad move given the iteration\n * step and the score change.\n * <p>\n * Function: p=(C-AS)/(m*C) , slightly different from the CEMC algorithm.\n * <p>\n * Added a normalization factor so that the probability approaches 0 as the\n * final of the optimization gets closer.\n */\n","repo_name":"biojava-master/","id":700,"method_signature":"double probabilityFunction(double, int, int)"}