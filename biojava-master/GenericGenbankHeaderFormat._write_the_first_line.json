{"callee_method_names":["S.getAccession","String.length","S.getCompoundSet","S.getCompoundSet","S.getCompoundSet","String.length","Formatter.format","S.getLength","Formatter.toString","Formatter.close"],"method_name":"GenericGenbankHeaderFormat._write_the_first_line","method_implementation":"{\n    /*\n\t\t * locus = record.name if not locus or locus == \"<unknown name>\": locus\n\t\t * = record.id if not locus or locus == \"<unknown id>\": locus =\n\t\t * self._get_annotation_str(record, \"accession\", just_first=True)\\\n\t\t */\n    String locus;\n    try {\n        locus = sequence.getAccession().getID();\n    } catch (Exception e) {\n        locus = \"\";\n    }\n    if (locus.length() > 16) {\n        throw new RuntimeException(\"Locus identifier \" + locus + \" is too long\");\n    }\n    String units = \"\";\n    String mol_type = \"\";\n    if (sequence.getCompoundSet() instanceof DNACompoundSet) {\n        units = \"bp\";\n        mol_type = \"DNA\";\n    } else if (sequence.getCompoundSet() instanceof RNACompoundSet) {\n        units = \"bp\";\n        mol_type = \"RNA\";\n    } else if (sequence.getCompoundSet() instanceof AminoAcidCompoundSet) {\n        units = \"aa\";\n        mol_type = \"\";\n    } else {\n        throw new RuntimeException(\"Need a DNACompoundSet, RNACompoundSet, or an AminoAcidCompoundSet\");\n    }\n    String division = _get_data_division(sequence);\n    if (seqType != null) {\n        division = seqType;\n    }\n    assert units.length() == 2;\n    // the next line does not seem right.. seqType == linear\n    // uncommenting for now\n    //assert division.length() == 3;\n    StringBuilder sb = new StringBuilder();\n    Formatter formatter = new Formatter(sb, Locale.US);\n    formatter.format(\"LOCUS       %s %s %s    %s           %s %s\" + lineSep, StringManipulationHelper.padRight(locus, 16), StringManipulationHelper.padLeft(Integer.toString(sequence.getLength()), 11), units, StringManipulationHelper.padRight(mol_type, 6), division, _get_date(sequence));\n    String output = formatter.toString();\n    formatter.close();\n    return output;\n    /*\n\t\t * assert len(line) == 79+1, repr(line) #plus one for new line\n\t\t *\n\t\t * assert line[12:28].rstrip() == locus, \\ 'LOCUS line does not contain\n\t\t * the locus at the expected position:\\n' + line assert line[28:29] ==\n\t\t * \" \" assert line[29:40].lstrip() == str(len(record)), \\ 'LOCUS line\n\t\t * does not contain the length at the expected position:\\n' + line\n\t\t *\n\t\t * #Tests copied from Bio.GenBank.Scanner assert line[40:44] in [' bp ',\n\t\t * ' aa '] , \\ 'LOCUS line does not contain size units at expected\n\t\t * position:\\n' + line assert line[44:47] in [' ', 'ss-', 'ds-', 'ms-'],\n\t\t * \\ 'LOCUS line does not have valid strand type (Single stranded,\n\t\t * ...):\\n' + line assert line[47:54].strip() == \"\" \\ or\n\t\t * line[47:54].strip().find('DNA') != -1 \\ or\n\t\t * line[47:54].strip().find('RNA') != -1, \\ 'LOCUS line does not contain\n\t\t * valid sequence type (DNA, RNA, ...):\\n' + line assert line[54:55] ==\n\t\t * ' ', \\ 'LOCUS line does not contain space at position 55:\\n' + line\n\t\t * assert line[55:63].strip() in ['', 'linear', 'circular'], \\ 'LOCUS\n\t\t * line does not contain valid entry (linear, circular, ...):\\n' + line\n\t\t * assert line[63:64] == ' ', \\ 'LOCUS line does not contain space at\n\t\t * position 64:\\n' + line assert line[67:68] == ' ', \\ 'LOCUS line does\n\t\t * not contain space at position 68:\\n' + line assert line[70:71] ==\n\t\t * '-', \\ 'LOCUS line does not contain - at position 71 in date:\\n' +\n\t\t * line assert line[74:75] == '-', \\ 'LOCUS line does not contain - at\n\t\t * position 75 in date:\\n' + line\n\t\t */\n}","repo_id":"9","comment":"/**\n * Write the LOCUS line.\n *\n * @param sequence\n */\n","repo_name":"biojava-master/","id":2841,"method_signature":"String _write_the_first_line(S)"}