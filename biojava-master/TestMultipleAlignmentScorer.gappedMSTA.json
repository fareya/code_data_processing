{"callee_method_names":["List<Atom[]>.add","List<List<Integer>>.add","List<List<Integer>>.add","List<List<Integer>>.add","MultipleAlignment.getEnsemble","Block.setAlignRes","Matrix4d.setIdentity","BlockSet.setTransformations"],"method_name":"TestMultipleAlignmentScorer.gappedMSTA","method_implementation":"{\n    //Generate three identical Atom arrays\n    List<Atom[]> atomArrays = new ArrayList<Atom[]>(30);\n    for (int i = 0; i < 3; i++) atomArrays.add(makeDummyCA(30));\n    //Generate alignment with nulls and some missalignments\n    List<List<Integer>> alnRes = new ArrayList<List<Integer>>(3);\n    List<Integer> chain1 = Arrays.asList(1, 2, 3, 5, 8, 10, 12, 15, 17, 19, 22, null, 24, 27);\n    List<Integer> chain2 = Arrays.asList(1, null, 3, 6, 9, 11, 12, 15, null, 18, 22, 24, 26, 28);\n    List<Integer> chain3 = Arrays.asList(1, 2, 4, 7, 9, 10, null, 15, null, 17, 22, 24, 26, 28);\n    alnRes.add(chain1);\n    alnRes.add(chain2);\n    alnRes.add(chain3);\n    //MultipleAlignment generation\n    MultipleAlignment msa = new MultipleAlignmentImpl();\n    msa.getEnsemble().setAtomArrays(atomArrays);\n    BlockSet bs = new BlockSetImpl(msa);\n    Block b = new BlockImpl(bs);\n    b.setAlignRes(alnRes);\n    //We want the identity transfromations to mantain the missalignments\n    Matrix4d ident = new Matrix4d();\n    ident.setIdentity();\n    bs.setTransformations(Arrays.asList(ident, ident, ident));\n    return msa;\n}","repo_id":"9","comment":"/**\n * Generates a simple MultipleAlignment: 3 structures with the\n * same Atoms but incorreclty aligned with gaps.\n *\n * @return MultipleAlignment gapped MSTA\n * @throws StructureException\n */\n","repo_name":"biojava-master/","id":2190,"method_signature":"MultipleAlignment gappedMSTA()"}