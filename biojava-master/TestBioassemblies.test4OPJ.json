{"callee_method_ids":[641],"callee_method_names":["AtomCache.setFiletype","List<Structure>.size","List<Structure>.size","List<Structure>.get","List<Structure>.get","List<Structure>.get","List<Structure>.get","List<Structure>.get","List<Structure>.get","List<Structure>.get","List<Structure>.get","List<Structure>.get","List<Structure>.get","List<Structure>.get","List<Structure>.get","List<Structure>.get","List<Structure>.get","char.getId","char.getName","char.getId","char.getName","List<Structure>.get","char.getId","char.getName","char.getId","char.getName"],"method_name":"TestBioassemblies.test4OPJ","method_implementation":"{\n    AtomCache prevAtomCache = StructureIO.getAtomCache();\n    AtomCache cache = new AtomCache();\n    cache.setFiletype(StructureFiletype.CIF);\n    StructureIO.setAtomCache(cache);\n    List<Structure> multiModelBioAssemblies = StructureIO.getBiologicalAssemblies(\"4OPJ\", true);\n    List<Structure> flattenedBioAssemblies = StructureIO.getBiologicalAssemblies(\"4OPJ\", false);\n    // 2 bioassemblies in this case\n    assertEquals(2, multiModelBioAssemblies.size());\n    assertEquals(2, flattenedBioAssemblies.size());\n    // checking number of models: 2 operators in each assembly\n    assertEquals(2, multiModelBioAssemblies.get(0).nrModels());\n    assertEquals(1, flattenedBioAssemblies.get(0).nrModels());\n    assertEquals(2, multiModelBioAssemblies.get(1).nrModels());\n    assertEquals(1, flattenedBioAssemblies.get(1).nrModels());\n    // for multimodel bioassembly, we should have 2 models corresponding to 2 operators\n    assertEquals(2, multiModelBioAssemblies.get(0).nrModels());\n    // for flattened bioassembly we should have only 1 model\n    assertEquals(1, flattenedBioAssemblies.get(0).nrModels());\n    // 3 chains divided into 2 models in bioassembly 1\n    assertEquals(3, multiModelBioAssemblies.get(0).getPolyChains(0).size() + multiModelBioAssemblies.get(0).getPolyChains(1).size());\n    // 3 chains in flattened structure in bioassembly 1\n    assertEquals(3, flattenedBioAssemblies.get(0).getPolyChains().size());\n    // 3 chains divided into 2 models in bioassembly 2\n    assertEquals(3, multiModelBioAssemblies.get(1).getPolyChains(0).size() + multiModelBioAssemblies.get(1).getPolyChains(1).size());\n    // 3 chains in flattened structure in bioassembly 2\n    assertEquals(3, flattenedBioAssemblies.get(1).getPolyChains().size());\n    // chain ids and names don't contain underscores in multimodel\n    for (int modelIdx = 0; modelIdx < multiModelBioAssemblies.get(0).nrModels(); modelIdx++) {\n        List<Chain> model = multiModelBioAssemblies.get(0).getModel(modelIdx);\n        for (Chain c : model) {\n            System.out.println(c.getId() + \" \" + c.getName());\n            assertTrue(!c.getId().contains(\"_\"));\n            assertTrue(!c.getName().contains(\"_\"));\n        }\n    }\n    // chain ids and names contain underscores in flattened\n    for (Chain c : flattenedBioAssemblies.get(0).getChains()) {\n        System.out.println(c.getId() + \" \" + c.getName());\n        assertTrue(c.getId().contains(\"_\"));\n        assertTrue(c.getName().contains(\"_\"));\n    }\n    StructureIO.setAtomCache(prevAtomCache);\n}","repo_id":"9","comment":"/**\n * A difficult case: see http://www.mail-archive.com/jmol-users@lists.sourceforge.net/msg25927.html\n * @throws IOException\n * @throws StructureException\n */\n","repo_name":"biojava-master/","id":157,"method_signature":"void test4OPJ()"}