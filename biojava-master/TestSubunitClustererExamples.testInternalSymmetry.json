{"callee_method_ids":[1633,1625,1633,1631,1635,1627],"callee_method_names":["SubunitClustererParameters.setClustererMethod","SubunitClustererParameters.setSequenceCoverageThreshold","List<SubunitCluster>.size","List<SubunitCluster>.get","List<SubunitCluster>.get","List<SubunitCluster>.get","SubunitClustererParameters.setClustererMethod","SubunitClustererParameters.setStructureCoverageThreshold","SubunitClustererParameters.setInternalSymmetry","SubunitClustererParameters.setRMSDThreshold","List<SubunitCluster>.size","List<SubunitCluster>.get","List<SubunitCluster>.get","List<SubunitCluster>.get"],"method_name":"TestSubunitClustererExamples.testInternalSymmetry","method_implementation":"{\n    Structure s = StructureIO.getStructure(\"BIO:4E3E:1\");\n    SubunitClustererParameters params = new SubunitClustererParameters();\n    params.setClustererMethod(SubunitClustererMethod.SEQUENCE);\n    params.setSequenceCoverageThreshold(0.8);\n    List<SubunitCluster> clusters = SubunitClusterer.cluster(s, params).getClusters();\n    // We expect one SEQUENCE cluster with 3 Subunits of length 351\n    assertEquals(clusters.size(), 1);\n    assertEquals(clusters.get(0).size(), 3);\n    assertEquals(clusters.get(0).length(), 351);\n    assertEquals(clusters.get(0).getClustererMethod(), SubunitClustererMethod.SEQUENCE);\n    params.setClustererMethod(SubunitClustererMethod.SEQUENCE_STRUCTURE);\n    params.setStructureCoverageThreshold(0.8);\n    params.setInternalSymmetry(true);\n    params.setRMSDThreshold(3.0);\n    clusters = SubunitClusterer.cluster(s, params).getClusters();\n    // We expect a single INTERNAL_SYMMETRY cluster with 6 Subunits\n    assertEquals(clusters.size(), 1);\n    assertEquals(clusters.get(0).size(), 6);\n    assertTrue(clusters.get(0).length() < 177);\n    assertEquals(clusters.get(0).getClustererMethod(), SubunitClustererMethod.STRUCTURE);\n}","repo_id":"9","comment":"/**\n * Test internally symmetric: 4E3E bioassembly 1\n */\n","repo_name":"biojava-master/","id":178,"method_signature":"void testInternalSymmetry()"}