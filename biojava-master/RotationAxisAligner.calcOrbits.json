{"callee_method_names":["QuatSymmetrySubunits.getSubunitCount","RotationGroup.getRotation","RotationGroup.getRotation","List<Integer>.add","List<Integer>.get","List<Integer>.get","List<List<Integer>>.add"],"method_name":"RotationAxisAligner.calcOrbits","method_implementation":"{\n    int n = subunits.getSubunitCount();\n    int fold = rotationGroup.getRotation(0).getFold();\n    List<List<Integer>> orbits = new ArrayList<List<Integer>>();\n    boolean[] used = new boolean[n];\n    Arrays.fill(used, false);\n    for (int i = 0; i < n; i++) {\n        if (!used[i]) {\n            // determine the equivalent subunits\n            List<Integer> orbit = new ArrayList<Integer>(fold);\n            for (int j = 0; j < fold; j++) {\n                List<Integer> permutation = rotationGroup.getRotation(j).getPermutation();\n                orbit.add(permutation.get(i));\n                used[permutation.get(i)] = true;\n            }\n            orbits.add(deconvolute(orbit));\n        }\n    }\n    return orbits;\n}","repo_id":"9","comment":"/**\n * Returns a list of list of subunit ids that form an \"orbit\", i.e. they\n * are transformed into each other during a rotation around the principal symmetry axis (z-axis)\n * @return\n */\n","repo_name":"biojava-master/","id":1992,"method_signature":"List<List<Integer>> calcOrbits()"}