{"callee_method_names":["List<PairwiseSequenceScorer<S,C>>.size","List<Future<Double>>.add","List<Double>.size","List<Double>.get"],"method_name":"Alignments.runPairwiseScorers","method_implementation":"{\n    int n = 1, all = scorers.size();\n    List<Future<Double>> futures = new ArrayList<Future<Double>>();\n    for (PairwiseSequenceScorer<S, C> scorer : scorers) {\n        futures.add(ConcurrencyTools.submit(new CallablePairwiseSequenceScorer<S, C>(scorer), String.format(\"Scoring pair %d of %d\", n++, all)));\n    }\n    List<Double> results = getListFromFutures(futures);\n    double[] scores = new double[results.size()];\n    for (int i = 0; i < scores.length; i++) {\n        scores[i] = results.get(i);\n    }\n    return scores;\n}","repo_id":"9","comment":"/**\n * Factory method to run a list of scorers concurrently.  This method runs the scorers in parallel by submitting\n * all of the scoring tasks to the shared thread pool of the {@link ConcurrencyTools} utility.\n *\n * @param <S> each {@link Sequence} of an alignment pair is of type S\n * @param <C> each element of an {@link AlignedSequence} is a {@link Compound} of type C\n * @param scorers list of scorers to run\n * @return list of score results from running scorers\n */\n","repo_name":"biojava-master/","id":53,"method_signature":"double[] runPairwiseScorers(List)"}