{"callee_method_ids":[628,628,1588,628,628],"callee_method_names":["AtomCache.getStructure","AtomCache.getStructure","Structure.addModel","Structure.getChains","SecStrucCalc.calculate","AtomCache.getStructure","List<SecStrucState>.addAll","AtomCache.getStructure","List<SecStrucState>.size","List<SecStrucState>.size","List<SecStrucState>.size","List<SecStrucState>.get","List<SecStrucState>.get"],"method_name":"TestSecStrucCalc.testMultiModelPred","method_implementation":"{\n    String pdbId = \"5pti\";\n    String pdbIdTwo = \"4hhb\";\n    SecStrucCalc sec = new SecStrucCalc();\n    // Combine these into one structure with two models\n    AtomCache cache = new AtomCache();\n    Structure structure = cache.getStructure(pdbId);\n    Structure structureTwo = cache.getStructure(pdbIdTwo);\n    // Join them together\n    structure.addModel(structureTwo.getChains());\n    List<SecStrucState> biojava = sec.calculate(structure, true);\n    // Download the original DSSP implementation output\n    List<SecStrucState> dssp = DSSPParser.parseInputStream(new GZIPInputStream(this.getClass().getResourceAsStream(\"/org/biojava/nbio/structure/secstruc/\" + pdbId + \".dssp.gz\")), cache.getStructure(pdbId), false);\n    dssp.addAll(DSSPParser.parseInputStream(new GZIPInputStream(this.getClass().getResourceAsStream(\"/org/biojava/nbio/structure/secstruc/\" + pdbIdTwo + \".dssp.gz\")), cache.getStructure(pdbIdTwo), false));\n    assertEquals(\"SS assignment lengths do not match\", biojava.size(), dssp.size());\n    for (int i = 0; i < dssp.size(); i++) {\n        assertEquals(\"SS assignment position \" + (i + 1) + \" does not match\", biojava.get(i), dssp.get(i));\n    }\n}","repo_id":"9","comment":"/**\n * Test that calculating the secondary structure for multi-model systems works.\n * Combine two PDBs into one multi-model system\n * Calculate the secondary structure\n * Combine with the combined list fetching from the server\n * @throws StructureException\n * @throws IOException\n */\n","repo_name":"biojava-master/","id":2315,"method_signature":"void testMultiModelPred()"}