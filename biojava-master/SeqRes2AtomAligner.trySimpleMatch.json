{"callee_method_names":["List<Group>.size","List<Group>.get","Group.isWater","Group.getResidueNumber","ResidueNumber.getSeqNum","Logger.debug","List<Group>.get","Group.getPDBName","Group.getPDBName","Logger.debug","Group.getPDBName","Group.getPDBName","List<Group>.size","Logger.debug","List<Group>.size","Logger.debug","List<Group>.size","List<Group>.size","Logger.debug","List<Group>.get","Group.getPDBName","Group.getPDBName","Logger.debug","List<Group>.set","Logger.debug","Group.getResidueNumber","Group.getPDBName","Group.getResidueNumber","Group.getPDBName"],"method_name":"SeqRes2AtomAligner.trySimpleMatch","method_implementation":"{\n    // by default first ATOM position is 1\n    //\n    @SuppressWarnings(\"unchecked\")\n    List<Group> newSeqResGroups = (ArrayList<Group>) ((ArrayList<Group>) seqResGroups).clone();\n    boolean startAt1 = true;\n    for (int atomResPos = 0; atomResPos < atmResGroups.size(); atomResPos++) {\n        // let's try to match this case\n        Group atomResGroup = atmResGroups.get(atomResPos);\n        // let's ignore waters\n        if (atomResGroup.isWater()) {\n            continue;\n        }\n        ResidueNumber atomResNum = atomResGroup.getResidueNumber();\n        int seqResPos = atomResNum.getSeqNum();\n        if (seqResPos < 0) {\n            logger.debug(\"ATOM residue number < 0 : {}\", seqResPos);\n            return null;\n        }\n        if (seqResPos == 0) {\n            // make sure the first SEQRES is matching.\n            Group seqResGroup = seqResGroups.get(0);\n            if (seqResGroup.getPDBName().equals(atomResGroup.getPDBName())) {\n                // they match! seems in this case the numbering starts with 0...\n                startAt1 = false;\n            } else {\n                logger.debug(\"SEQRES position 1 ({}) does not match ATOM PDB res num 0 ({})\", seqResGroup.getPDBName(), atomResGroup.getPDBName());\n                return null;\n            }\n        }\n        if (startAt1)\n            seqResPos--;\n        // another check that would require the alignment approach\n        if (startAt1 && seqResPos >= seqResGroups.size()) {\n            // could be a HETATOM...\n            if (atomResGroup instanceof AminoAcid) {\n                logger.debug(\" ATOM residue nr: \" + seqResPos + \" > seqres! \" + seqResGroups.size() + \" \" + atomResGroup);\n                return null;\n            } else if (atomResGroup instanceof NucleotideImpl) {\n                logger.debug(\" NUCLEOTIDE residue nr: \" + seqResPos + \" > seqres! \" + seqResGroups.size() + \" \" + atomResGroup);\n                return null;\n            } else {\n                // we won't map HETATOM groups...\n                continue;\n            }\n        }\n        //\t\t\tif ( seqResPos < 0){\n        //\n        //\t\t\t\tSystem.err.println(\"What is going on??? \" + atomRes.getChainID() + \" \" + atomResGroup);\n        //\t\t\t}\n        if (seqResPos >= seqResGroups.size()) {\n            logger.debug(\"seqres groups don't match atom indices {}\", seqResPos);\n            if (atomResGroup instanceof AminoAcid)\n                return null;\n            else\n                continue;\n        }\n        Group seqResGroup = seqResGroups.get(seqResPos);\n        if (!seqResGroup.getPDBName().trim().equals(atomResGroup.getPDBName().trim())) {\n            // a mismatch! something is wrong in the mapping and we need to do an alignment\n            logger.debug(\"Mismatch of SEQRES pos \" + seqResPos + \" and ATOM record: \" + atomResGroup + \" | \" + seqResGroup);\n            return null;\n        }\n        // the two groups are identical and we can merge them\n        // replace the SEQRES group with the ATOM group...\n        Group replacedGroup = newSeqResGroups.set(seqResPos, atomResGroup);\n        logger.debug(\"Merging index {}: replaced seqres group {} ({}) with atom group {} ({})\", seqResPos, replacedGroup.getResidueNumber(), replacedGroup.getPDBName(), atomResGroup.getResidueNumber(), atomResGroup.getPDBName());\n    }\n    // all went ok. copy over the updated list to the original one.\n    // note: if something went wrong, we did not modifiy the original list.\n    //seqResGroups = newSeqResGroups;\n    //\t\t\tint pos = -1;\n    //\t\t\tfor (Group g: seqResGroups){\n    //\t\t\t\tpos++;\n    //\t\t\t\tlogger.debug(pos + \" \" + g);\n    //\t\t\t}\n    //System.out.println(\"I:\" + seqResGroups);\n    // all atom records could get matched correctly!\n    return newSeqResGroups;\n}","repo_id":"9","comment":"/**\n * A simple matching approach that tries to do a 1:1 mapping between SEQRES and ATOM records\n *\n * @param seqResGroups list of seqREs groups\n * @param atmResGroups list of atmRes Groups\n * @return the matching or null if the matching didn't work\n */\n","repo_name":"biojava-master/","id":1233,"method_signature":"List<Group> trySimpleMatch(List, List)"}