{"callee_method_names":["Atom.getY","Atom.getY","Atom.getX","Atom.getX"],"method_name":"Calc.calcRotationAngleInDegrees","method_implementation":"{\n    // calculate the angle theta from the deltaY and deltaX values\n    // (atan2 returns radians values from [-PI,PI])\n    // 0 currently points EAST.\n    // NOTE: By preserving Y and X param order to atan2,  we are expecting\n    // a CLOCKWISE angle direction.\n    double theta = Math.atan2(targetPt.getY() - centerPt.getY(), targetPt.getX() - centerPt.getX());\n    // rotate the theta angle clockwise by 90 degrees\n    // (this makes 0 point NORTH)\n    // NOTE: adding to an angle rotates it clockwise.\n    // subtracting would rotate it counter-clockwise\n    theta += Math.PI / 2.0;\n    // convert from radians to degrees\n    // this will give you an angle from [0->270],[-180,0]\n    double angle = Math.toDegrees(theta);\n    // convert to positive range [0-360)\n    // since we want to prevent negative angles, adjust them now.\n    // we can assume that atan2 will not return a negative value\n    // greater than one partial rotation\n    if (angle < 0) {\n        angle += 360;\n    }\n    return angle;\n}","repo_id":"9","comment":"/**\n * Calculates the angle from centerPt to targetPt in degrees. The return\n * should range from [0,360), rotating CLOCKWISE, 0 and 360 degrees\n * represents NORTH, 90 degrees represents EAST, etc...\n *\n * Assumes all points are in the same coordinate space. If they are not, you\n * will need to call SwingUtilities.convertPointToScreen or equivalent on\n * all arguments before passing them to this function.\n *\n * @param centerPt\n *            Point we are rotating around.\n * @param targetPt\n *            Point we want to calculate the angle to.\n * @return angle in degrees.  This is the angle from centerPt to targetPt.\n */\n","repo_name":"biojava-master/","id":389,"method_signature":"double calcRotationAngleInDegrees(Atom, Atom)"}