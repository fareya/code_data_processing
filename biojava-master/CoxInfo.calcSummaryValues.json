{"callee_method_ids":[3543,3544,3545,3531,3532,3549,3531,3532,3547,3531,3532,3548,3531,3532],"callee_method_names":["LinkedHashMap.keySet","ArrayList<String>.size","ArrayList<String>.get","LinkedHashMap.get","CoxCoefficient.setStdError","CoxCoefficient.setRobustStdError","CoxCoefficient.setZ","CoxCoefficient.getCoeff","CoxCoefficient.getStdError","CoxCoefficient.setPvalue","CoxCoefficient.getCoeff","CoxCoefficient.getStdError","CoxCoefficient.setHazardRatioLoCI","CoxCoefficient.getCoeff","CoxCoefficient.getStdError","CoxCoefficient.setHazardRatioHiCI","CoxCoefficient.getCoeff","CoxCoefficient.getStdError"],"method_name":"CoxInfo.calcSummaryValues","method_implementation":"{\n    //beta\n    ArrayList<String> variables = new ArrayList<String>(coefficientsList.keySet());\n    for (int i = 0; i < variables.size(); i++) {\n        String variable = variables.get(i);\n        CoxCoefficient coe = coefficientsList.get(variable);\n        //values can be updated to reflect new error\n        coe.setStdError(Math.sqrt(imat[i][i]));\n        if (naive_imat != null) {\n            coe.setRobustStdError(Math.sqrt(naive_imat[i][i]));\n        }\n        coe.setZ(coe.getCoeff() / coe.getStdError());\n        coe.setPvalue(ChiSq.norm(Math.abs(coe.getCoeff() / coe.getStdError())));\n        //z <- qnorm((1 + conf.int)/2, 0, 1)\n        double z = 1.959964;\n        coe.setHazardRatioLoCI(Math.exp(coe.getCoeff() - z * coe.getStdError()));\n        coe.setHazardRatioHiCI(Math.exp(coe.getCoeff() + z * coe.getStdError()));\n    }\n    logTest = -2 * (loglikInit - loglikFinal);\n    logTestpval = ChiSq.chiSq(logTest, (int) degreeFreedom);\n    scoreLogrankTestpvalue = ChiSq.chiSq(scoreLogrankTest, (int) degreeFreedom);\n    if (rscore != null) {\n        rscoreLogrankTestpvalue = ChiSq.chiSq(rscore, (int) degreeFreedom);\n    }\n}","repo_id":"9","comment":"/**\n */\n","repo_name":"biojava-master/","id":3619,"method_signature":"void calcSummaryValues()"}