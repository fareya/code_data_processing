{"callee_method_names":["MultipleAlignment.size","StringWriter.append","StringWriter.append","MultipleAlignment.getEnsemble","StringWriter.append","MultipleAlignment.size","StringWriter.append","StringWriter.append","MultipleAlignment.getBlocks","String.length","MultipleAlignment.size","String.getAlignRes","StringWriter.append","StringWriter.append","StringWriter.append","StringWriter.append","StringWriter.append","StringWriter.append","MultipleAlignment.getAtomArrays","StringWriter.append","Atom.getGroup","StringWriter.append","StringWriter.append","Atom.getGroup","StringWriter.append","StringWriter.append","Atom.getGroup","StringWriter.append","StringWriter.append","StringWriter.toString"],"method_name":"MultipleAlignmentWriter.toAlignedResidues","method_implementation":"{\n    StringWriter residueGroup = new StringWriter();\n    // Write structure names & PDB codes\n    for (int str = 0; str < multAln.size(); str++) {\n        residueGroup.append(\"#Struct\" + (str + 1) + \":\\t\");\n        residueGroup.append(multAln.getEnsemble().getStructureIdentifiers().get(str).getIdentifier());\n        residueGroup.append(\"\\n\");\n    }\n    // Whrite header for columns\n    for (int str = 0; str < multAln.size(); str++) residueGroup.append(\"#Num\" + (str + 1) + \"\\tChain\" + (str + 1) + \"\\tAA\" + (str + 1) + \"\\t\");\n    residueGroup.append(\"\\n\");\n    // Write optimally aligned pairs\n    for (Block b : multAln.getBlocks()) {\n        for (int res = 0; res < b.length(); res++) {\n            for (int str = 0; str < multAln.size(); str++) {\n                Integer residue = b.getAlignRes().get(str).get(res);\n                if (residue == null) {\n                    residueGroup.append(\"-\");\n                    residueGroup.append('\\t');\n                    residueGroup.append(\"-\");\n                    residueGroup.append('\\t');\n                    residueGroup.append(\"-\");\n                    residueGroup.append('\\t');\n                } else {\n                    Atom atom = multAln.getAtomArrays().get(str)[residue];\n                    residueGroup.append(atom.getGroup().getResidueNumber().toString());\n                    residueGroup.append('\\t');\n                    residueGroup.append(atom.getGroup().getChain().// ABradley - I'm assuming Auth Id's here 04/05/16\n                    getName());\n                    residueGroup.append('\\t');\n                    residueGroup.append(atom.getGroup().getPDBName());\n                    residueGroup.append('\\t');\n                }\n            }\n            residueGroup.append('\\n');\n        }\n    }\n    return residueGroup.toString();\n}","repo_id":"9","comment":"/**\n * Converts the alignment to its simplest form: a list of groups of aligned\n * residues. Format is one line per residue group, tab delimited:\n * <ul>\n * <li>PDB number (includes insertion code)\n * <li>Chain\n * <li>Amino Acid (three letter code)<\/li>\n * <\/ul>\n * Example: <code>52\tA\tALA\t102\tA\tVAL\t154\tA\tTHR<\/code>\n * <p>\n * Note that this format loses information about blocks.\n *\n * @param multAln\n *            MultipleAlignment object\n * @return a String representation of the aligned residues.\n */\n","repo_name":"biojava-master/","id":672,"method_signature":"String toAlignedResidues(MultipleAlignment)"}