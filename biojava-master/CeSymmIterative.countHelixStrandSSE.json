{"callee_method_ids":[1581,1585,1585],"callee_method_names":["SecStrucElement.getType","SecStrucType.isBetaStrand","SecStrucType.isHelixType","SecStrucElement.getRange","SecStrucElement.getRange"],"method_name":"CeSymmIterative.countHelixStrandSSE","method_implementation":"{\n    List<SecStrucElement> sses = SecStrucTools.getSecStrucElements(SymmetryTools.getGroups(atoms));\n    int count = 0;\n    //keep track of different helix types\n    boolean helix = false;\n    int hEnd = 0;\n    for (SecStrucElement sse : sses) {\n        SecStrucType t = sse.getType();\n        if (t.isBetaStrand()) {\n            helix = false;\n            count++;\n        } else if (t.isHelixType()) {\n            if (helix) {\n                // If this helix is contiguous to the previous\n                if (sse.getRange().getStart().getSeqNum() + 1 == hEnd)\n                    hEnd = sse.getRange().getEnd().getSeqNum();\n                else\n                    count++;\n            } else\n                count++;\n        } else\n            helix = false;\n    }\n    return count;\n}","repo_id":"9","comment":"/**\n * Calculate the number of helix and strand SSE of a repeat.\n *\n * @param atoms\n *            Atom array of the repeat found\n * @return int number of helix or strand SSE\n */\n","repo_name":"biojava-master/","id":2061,"method_signature":"int countHelixStrandSSE(Atom[])"}