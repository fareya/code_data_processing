{"callee_method_ids":[490],"callee_method_names":["AFPChain.getOptLen"],"method_name":"DisplayAFP.getAtomForAligPos","method_implementation":"{\n    int[] optLen = afpChain.getOptLen();\n    // int[][][] optAln = afpChain.getOptAln();\n    if (optLen == null)\n        return null;\n    if (chainNr < 0 || chainNr > 1) {\n        throw new StructureException(\"So far only pairwise alignments are supported, but you requested results for alinged chain nr \" + chainNr);\n    }\n    //if (  afpChain.getAlgorithmName().startsWith(\"jFatCat\")){\n    /// for FatCat algorithms...\n    int capos = getUngappedFatCatPos(afpChain, chainNr, aligPos);\n    if (capos < 0) {\n        capos = getNextFatCatPos(afpChain, chainNr, aligPos, getPrevious);\n        //System.out.println(\" got next\" + capos + \" for \" + chainNr + \" alignedPos: \" + aligPos);\n    } else {\n        //System.out.println(\"got aligned fatcat position: \" + capos + \" \" + chainNr + \" for alig pos: \" + aligPos);\n    }\n    if (capos < 0) {\n        System.err.println(\"could not match position \" + aligPos + \" in chain \" + chainNr + \". Returing null...\");\n        return null;\n    }\n    if (capos > ca.length) {\n        System.err.println(\"Atom array \" + chainNr + \" does not have \" + capos + \" atoms. Returning null.\");\n        return null;\n    }\n    return ca[capos];\n    //}\n    //\n    //\n    //      int ungappedPos = getUngappedPos(afpChain, aligPos);\n    //      System.out.println(\"getAtomForAligPOs \" + aligPos  + \" \" + ungappedPos );\n    //      return ca[ungappedPos];\n    //\n    //      if ( ungappedPos >= optAln[bk][chainNr].length)\n    //         return null;\n    //      int pos = optAln[bk][chainNr][ungappedPos];\n    //      if ( pos > ca.length)\n    //         return null;\n    //      return ca[pos];\n}","repo_id":"9","comment":"/**\n * Return the atom at alignment position aligPos. at the present only works with block 0\n * @param chainNr the number of the aligned pair. 0... first chain, 1... second chain.\n * @param afpChain an afpChain object\n * @param aligPos position on the alignment\n * @param getPrevious gives the previous position if false, gives the next posible atom\n * @return a CA atom that is at a particular position of the alignment\n */\n","repo_name":"biojava-master/","id":3286,"method_signature":"Atom getAtomForAligPos(AFPChain, int, int, Atom[], boolean)"}