{"callee_method_names":["ReadWriteLock.writeLock","Logger.trace","double[].getPdbId","double[].getDomainId","String.isEmpty","Pattern.matcher","Matcher.group","Map<PdbId, List<EcodDomain>>.containsKey","Map<PdbId, List<EcodDomain>>.get","Map<PdbId, List<EcodDomain>>.put","List<EcodDomain>.add","Logger.trace","ReadWriteLock.writeLock"],"method_name":"EcodInstallation.indexDomains","method_implementation":"{\n    domainsFileLock.writeLock().lock();\n    logger.trace(\"LOCK writelock\");\n    try {\n        if (allDomains == null) {\n            ensureDomainsFileInstalled();\n        }\n        // Leave enough space for all PDBs as of 2015\n        domainMap = new HashMap<PdbId, List<EcodDomain>>((int) (150000 / .85), .85f);\n        // Index with domainMap\n        for (EcodDomain d : allDomains) {\n            // Get the PDB ID, either directly or from the domain ID\n            PdbId pdbId = d.getPdbId();\n            if (pdbId == null) {\n                String ecodId = d.getDomainId();\n                if (ecodId != null && !ecodId.isEmpty()) {\n                    Matcher match = ECOD_RE.matcher(ecodId);\n                    pdbId = new PdbId(match.group(1));\n                }\n            }\n            // Add current domain to the map\n            List<EcodDomain> currDomains;\n            if (domainMap.containsKey(pdbId)) {\n                currDomains = domainMap.get(pdbId);\n            } else {\n                currDomains = new LinkedList<EcodDomain>();\n                domainMap.put(pdbId, currDomains);\n            }\n            currDomains.add(d);\n        }\n    } finally {\n        logger.trace(\"UNLOCK writelock\");\n        domainsFileLock.writeLock().unlock();\n    }\n}","repo_id":"9","comment":"/**\n * Populates domainMap from allDomains\n * @throws IOException\n */\n","repo_name":"biojava-master/","id":1819,"method_signature":"void indexDomains()"}