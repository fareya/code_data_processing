{"callee_method_names":[],"method_name":"Calc.getTMScore","method_implementation":"{\n    if (atomSet1.length != atomSet2.length) {\n        throw new StructureException(\"The two atom sets are not of same length!\");\n    }\n    if (atomSet1.length > len1) {\n        throw new StructureException(\"len1 must be greater or equal to the alignment length!\");\n    }\n    if (atomSet2.length > len2) {\n        throw new StructureException(\"len2 must be greater or equal to the alignment length!\");\n    }\n    int Lnorm;\n    if (normalizeMin) {\n        Lnorm = Math.min(len1, len2);\n    } else {\n        Lnorm = Math.max(len1, len2);\n    }\n    int Laln = atomSet1.length;\n    double d0 = 1.24 * Math.cbrt(Lnorm - 15.) - 1.8;\n    double d0sq = d0 * d0;\n    double sum = 0;\n    for (int i = 0; i < Laln; i++) {\n        double d = Calc.getDistance(atomSet1[i], atomSet2[i]);\n        sum += 1. / (1 + d * d / d0sq);\n    }\n    return sum / Lnorm;\n}","repo_id":"9","comment":"/**\n * Calculate the TM-Score for the superposition.\n *\n * Atom sets must be pre-rotated.\n *\n * <p>\n * Citation:<br/>\n * <i>Zhang Y and Skolnick J (2004). \"Scoring function for automated\n * assessment of protein structure template quality\". Proteins 57: 702 -\n * 710.<\/i>\n *\n * @param atomSet1\n *            atom array 1\n * @param atomSet2\n *            atom array 2\n * @param len1\n *            The full length of the protein supplying atomSet1\n * @param len2\n *            The full length of the protein supplying atomSet2\n * @param normalizeMin\n *            Whether to normalize by the <strong>minimum<\/strong>-length structure,\n *            that is, {@code min\\{len1,len2\\}}. If false, normalized by the {@code max\\{len1,len2\\}}).\n *\n * @return The TM-Score\n * @throws StructureException\n */\n","repo_name":"biojava-master/","id":397,"method_signature":"double getTMScore(Atom[], Atom[], int, int, boolean)"}