{"callee_method_names":["List<String>.size","List<List<String>>.get","List<String>.get","List<String>.get","CompoundSet<AminoAcidCompound>.getCompoundForString","List<String>.get","ArrayList.add"],"method_name":"IUPACTable.getCodons","method_implementation":"{\n    if (this.codons.isEmpty()) {\n        List<String> aminoAcidStrings = aminoAcids();\n        List<String> startCodonStrings = startCodons();\n        List<List<String>> codonStrings = codonStrings();\n        for (int i = 0; i < aminoAcidStrings.size(); i++) {\n            List<String> codonString = codonStrings.get(i);\n            NucleotideCompound one = getCompound(codonString, 0, nucelotides);\n            NucleotideCompound two = getCompound(codonString, 1, nucelotides);\n            NucleotideCompound three = getCompound(codonString, 2, nucelotides);\n            boolean start = (\"M\".equals(startCodonStrings.get(i)));\n            boolean stop = (\"*\".equals(aminoAcidStrings.get(i)));\n            AminoAcidCompound aminoAcid = aminoAcids.getCompoundForString(aminoAcidStrings.get(i));\n            codons.add(new Codon(new CaseInsensitiveTriplet(one, two, three), aminoAcid, start, stop));\n        }\n    }\n    return codons;\n}","repo_id":"9","comment":"/**\n * Returns a list of codons where the source and target compounds\n * are the same as those given by the parameters.\n *\n * @param nucleotides The nucleotide set to use when building BioJava\n * representations of codons\n * @param aminoAcids The target amino acid compounds objects\n */\n","repo_name":"biojava-master/","id":2781,"method_signature":"List<Codon> getCodons(CompoundSet, CompoundSet)"}