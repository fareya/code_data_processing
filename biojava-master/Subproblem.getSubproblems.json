{"callee_method_names":["List<Anchor>.size","List<Anchor>.get","List<Anchor>.get","List<Subproblem>.add","List<Anchor>.get","List<Anchor>.get","List<Anchor>.get","List<Subproblem>.add"],"method_name":"Subproblem.getSubproblems","method_implementation":"{\n    Collections.sort(anchors, new Anchor.QueryIndexComparator());\n    List<Subproblem> list = new ArrayList<Subproblem>();\n    // sentinal anchor\n    Anchor last = new Anchor(-1, -1);\n    boolean isAnchored = false;\n    for (int i = 0; i < anchors.size(); i++) {\n        if (anchors.get(i).targetIndex <= last.targetIndex || anchors.get(i).queryIndex <= last.queryIndex) {\n            throw new IllegalArgumentException(\"Anchor set must allow at least one possible alignment.\");\n        }\n        list.add(new Subproblem(last.queryIndex + 1, last.targetIndex + 1, anchors.get(i).queryIndex, anchors.get(i).targetIndex, isAnchored));\n        last = anchors.get(i);\n        isAnchored = true;\n    }\n    list.add(new Subproblem(last.queryIndex + 1, last.targetIndex + 1, querySequenceLength, targetSequenceLength, isAnchored));\n    return list;\n}","repo_id":"9","comment":"/**\n * Convert a list of anchors into a subproblem list.\n * @param anchors anchored read pairs\n * @param querySequenceLength length of query sequence\n * @param targetSequenceLength length of target sequence\n * @return list alignment subproblems\n */\n","repo_name":"biojava-master/","id":95,"method_signature":"List<Subproblem> getSubproblems(List, int, int)"}