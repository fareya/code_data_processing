{"callee_method_names":["Structure.clone","Structure.setChains","Chain.setName","Group.getChain","Chain.setId","Group.getChain","Chain.getId","Chain.getId","Structure.addChain","Chain.setEntityInfo","Group.getChain","Chain.setStructure","Chain.setId","Group.getChain","Chain.setName","Group.getChain","Chain.addGroup"],"method_name":"StructureSequenceMatcher.getSubstructureMatchingProteinSequence","method_implementation":"{\n    ResidueNumber[] rns = matchSequenceToStructure(sequence, wholeStructure);\n    Structure structure = wholeStructure.clone();\n    structure.setChains(new ArrayList<>());\n    //\t\tstructure.getHetGroups().clear();\n    Chain currentChain = null;\n    for (ResidueNumber rn : rns) {\n        if (rn == null)\n            continue;\n        // note that we don't clone\n        Group group;\n        try {\n            group = StructureTools.getGroupByPDBResidueNumber(wholeStructure, rn);\n        } catch (StructureException e) {\n            throw new IllegalArgumentException(\"Could not find residue \" + rn + \" in structure\", e);\n        }\n        Chain chain = new ChainImpl();\n        chain.setName(group.getChain().getName());\n        chain.setId(group.getChain().getId());\n        if (currentChain == null || !currentChain.getId().equals(chain.getId())) {\n            structure.addChain(chain);\n            chain.setEntityInfo(group.getChain().getEntityInfo());\n            chain.setStructure(structure);\n            chain.setId(group.getChain().getId());\n            chain.setName(group.getChain().getName());\n            currentChain = chain;\n        }\n        currentChain.addGroup(group);\n    }\n    return structure;\n}","repo_id":"9","comment":"/**\n * Get a substructure of {@code wholeStructure} containing only the {@link Group Groups} that are included in\n * {@code sequence}. The resulting structure will contain only {@code ATOM} residues; the SEQ-RES will be empty.\n * The {@link Chain Chains} of the Structure will be new instances (cloned), but the {@link Group Groups} will not.\n * @param sequence The input protein sequence\n * @param wholeStructure The structure from which to take a substructure\n * @return The resulting structure\n * @throws StructureException\n * @see {@link #matchSequenceToStructure(ProteinSequence, Structure)}\n */\n","repo_name":"biojava-master/","id":1293,"method_signature":"Structure getSubstructureMatchingProteinSequence(ProteinSequence, Structure)"}