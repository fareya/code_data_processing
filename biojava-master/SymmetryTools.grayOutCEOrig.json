{"callee_method_ids":[726],"callee_method_names":["CECalculator.getMatMatrix","Matrix.get","Matrix.set","Matrix.get","Matrix.get","Matrix.set","Matrix.get"],"method_name":"SymmetryTools.grayOutCEOrig","method_implementation":"{\n    if (origM == null) {\n        origM = new Matrix(calculator.getMatMatrix());\n    }\n    // symmetry hack, disable main diagonal\n    for (int i = 0; i < rows; i++) {\n        for (int j = 0; j < cols; j++) {\n            int diff = Math.abs(i - j);\n            double resetVal = getResetVal(origM.get(i, j), diff, gradientPolyCoeff, gradientExpCoeff);\n            if (diff < blankWindowSize) {\n                origM.set(i, j, origM.get(i, j) + resetVal);\n            }\n            // other side\n            int diff2 = Math.abs(i - (j - ca2.length / 2));\n            double resetVal2 = getResetVal(origM.get(i, j), diff2, gradientPolyCoeff, gradientExpCoeff);\n            if (diff2 < blankWindowSize) {\n                origM.set(i, j, origM.get(i, j) + resetVal2);\n            }\n        }\n    }\n    return origM;\n}","repo_id":"9","comment":"/**\n * Grays out the main diagonal of a duplicated distance matrix.\n *\n * @param ca2\n * @param rows\n *            Number of rows\n * @param cols\n *            Number of original columns\n * @param calculator\n *            Used to get the matrix if origM is null\n * @param origM\n *            starting matrix. If null, uses\n *            {@link CECalculator#getMatMatrix()}\n * @param blankWindowSize\n *            Width of section to gray out\n * @param gradientPolyCoeff\n * @param gradientExpCoeff\n * @return\n */\n","repo_name":"biojava-master/","id":2038,"method_signature":"Matrix grayOutCEOrig(Atom[], int, int, CECalculator, Matrix, int, double[], double)"}