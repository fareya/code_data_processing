{"callee_method_names":["Structure.setPdbId","Structure.getPdbId","Structure.setPDBHeader","Structure.getPDBHeader","Structure.setName","Structure.setDBRefs","Structure.getDBRefs","Structure.setBiologicalAssembly","Structure.isBiologicalAssembly","Structure.getPDBHeader","Structure.getPdbId","Structure.getPDBHeader","Structure.setEntityInfos","Structure.setSSBonds","Structure.getSSBonds","Structure.setSites","Structure.getSites","Structure.setStructureIdentifier","Structure.nrModels","Structure.addModel","Structure.setEntityInfos","Structure.getEntityInfos","Structure.setSSBonds","Structure.getSSBonds","Structure.setSites","Structure.getSites","Structure.setModel","Structure.getModel","ResidueRangeAndLength.getChainName","ResidueRangeAndLength.getStart","ResidueRangeAndLength.getEnd","Structure.getPolyChains","Chain.getName","ResidueNumber.setChainName","ResidueNumber.setChainName","Structure.getPolyChains","Logger.warn","Structure.getPolyChainByPDB","Structure.getChainByIndex","Chain.getName","ResidueNumber.setChainName","ResidueNumber.setChainName","Logger.warn","Chain.getId","Chain.getAtomGroups","Structure.getNonPolyChainsByPDB","Chain.getAtomGroups","Structure.getWaterChainByPDB","Chain.getAtomGroups","Chain.getGroupsByPDB"],"method_name":"SubstructureIdentifier.reduce","method_implementation":"{\n    // Follows StructureImpl.clone()\n    if (s == null)\n        throw new StructureException(\"NullPointerException Possibly due to malformed PIBId format.\");\n    // Create new structure & copy basic properties\n    Structure newS = new StructureImpl();\n    newS.setPdbId(s.getPdbId());\n    newS.setPDBHeader(s.getPDBHeader());\n    newS.setName(this.toString());\n    newS.setDBRefs(s.getDBRefs());\n    newS.setBiologicalAssembly(s.isBiologicalAssembly());\n    newS.getPDBHeader().setDescription(\"sub-range \" + ranges + \" of \" + newS.getPdbId() + \" \" + s.getPDBHeader().getDescription());\n    newS.setEntityInfos(new ArrayList<>());\n    // TODO The following should be only copied for atoms which are present in the range.\n    newS.setSSBonds(s.getSSBonds());\n    newS.setSites(s.getSites());\n    newS.setStructureIdentifier(this);\n    for (int modelNr = 0; modelNr < s.nrModels(); modelNr++) {\n        // Construct new model\n        newS.addModel(new ArrayList<Chain>());\n        if (getResidueRanges().isEmpty()) {\n            // Include all residues\n            newS.setEntityInfos(s.getEntityInfos());\n            newS.setSSBonds(s.getSSBonds());\n            newS.setSites(s.getSites());\n            newS.setModel(modelNr, s.getModel(modelNr));\n        } else {\n            // Restrict residues\n            for (ResidueRange range : getResidueRanges()) {\n                String chainName = range.getChainName();\n                ResidueNumber pdbresnum1 = range.getStart();\n                ResidueNumber pdbresnum2 = range.getEnd();\n                //\t\t\t\t\tStructureTools.addGroupsToStructure(newS, groups, modelNr, false);\n                //polymer\n                Chain polyChain;\n                if (\"_\".equals(chainName)) {\n                    // Handle special case of \"_\" chain for single-chain proteins\n                    polyChain = s.getPolyChains(modelNr).get(0);\n                    chainName = polyChain.getName();\n                    if (pdbresnum1 != null)\n                        pdbresnum1.setChainName(chainName);\n                    if (pdbresnum2 != null)\n                        pdbresnum2.setChainName(chainName);\n                    if (s.getPolyChains().size() != 1) {\n                        // SCOP 1.71 uses this for some proteins with multiple chains\n                        // Print a warning in this ambiguous case\n                        logger.warn(\"Multiple possible chains match '_'. Using chain {}\", chainName);\n                    }\n                } else {\n                    // Explicit chain\n                    polyChain = s.getPolyChainByPDB(chainName, modelNr);\n                    if (polyChain == null) {\n                        // Chain not found\n                        // Maybe it was a chain index, masquerading as a chainName?\n                        try {\n                            int chainNum = Integer.parseInt(chainName);\n                            polyChain = s.getChainByIndex(modelNr, chainNum);\n                            chainName = polyChain.getName();\n                            if (pdbresnum1 != null)\n                                pdbresnum1.setChainName(chainName);\n                            if (pdbresnum2 != null)\n                                pdbresnum2.setChainName(chainName);\n                            logger.warn(\"No chain found for {}. Interpretting it as an index, using chain {} instead\", chainName, polyChain.getId());\n                        } catch (NumberFormatException e3) {\n                            // Not an index. Throw the original exception\n                            throw new StructureException(String.format(\"Unrecognized chain %s in %s\", chainName, getIdentifier()));\n                        }\n                    }\n                }\n                if (pdbresnum1 == null && pdbresnum2 == null) {\n                    // Include all atoms with matching chainName\n                    StructureTools.addGroupsToStructure(newS, polyChain.getAtomGroups(), modelNr, false);\n                    for (Chain chain : s.getNonPolyChainsByPDB(chainName, modelNr)) {\n                        StructureTools.addGroupsToStructure(newS, chain.getAtomGroups(), modelNr, false);\n                    }\n                    Chain waters = s.getWaterChainByPDB(chainName, modelNr);\n                    if (waters != null) {\n                        StructureTools.addGroupsToStructure(newS, waters.getAtomGroups(), modelNr, false);\n                    }\n                    // TODO do we need to prune SeqRes down to the atoms present? -SB 2016-10-7\n                } else {\n                    // Include polymer range and any proximal ligands\n                    List<Group> polygroups = Arrays.asList(polyChain.getGroupsByPDB(pdbresnum1, pdbresnum2));\n                    StructureTools.addGroupsToStructure(newS, polygroups, modelNr, false);\n                    copyLigandsByProximity(s, newS, StructureTools.DEFAULT_LIGAND_PROXIMITY_CUTOFF, modelNr, modelNr);\n                }\n            }\n            // end range\n        }\n    }\n    // end modelNr\n    return newS;\n}","repo_id":"9","comment":"/**\n * Takes a complete structure as input and reduces it to residues present in\n * the specified ranges\n *\n * <p>The returned structure will be a shallow copy of the input, with shared\n * Chains, Residues, etc.\n *\n * <p>Ligands are handled in a special way. If a full chain is selected\n * (e.g. '1ABC.A') then any waters and ligands with matching chain name are\n * included. If a residue range is present ('1ABC.A:1-100') then any\n * ligands (technically non-water non-polymer atoms) within\n * {@link StructureTools#DEFAULT_LIGAND_PROXIMITY_CUTOFF} of the selected\n * range are included, regardless of chain.\n * @param s A full structure, e.g. as loaded from the PDB. The structure\n * ID should match that returned by getPdbId().\n * @return\n * @throws StructureException\n */\n","repo_name":"biojava-master/","id":1612,"method_signature":"Structure reduce(Structure)"}