{"callee_method_names":["Map<Double, List<Integer>>.get","Map<Double, List<Integer>>.put","List<List<Integer>>.clear","Map<Double, List<Integer>>.values","List<List<Integer>>.add"],"method_name":"HelixAxisAligner.calcAlignedOrbits","method_implementation":"{\n    Map<Double, List<Integer>> depthMap = new TreeMap<Double, List<Integer>>();\n    double[] depth = getSubunitZDepth();\n    alignedOrbits = calcOrbits();\n    // calculate the mean depth of orbit along z-axis\n    for (List<Integer> orbit : alignedOrbits) {\n        // calculate the mean depth along z-axis for each orbit\n        double meanDepth = 0;\n        for (int subunit : orbit) {\n            meanDepth += depth[subunit];\n        }\n        meanDepth /= orbit.size();\n        if (depthMap.get(meanDepth) != null) {\n            meanDepth += 0.01;\n        }\n        //\t\t\tSystem.out.println(\"calcAlignedOrbits: \" + meanDepth + \" orbit: \" + orbit);\n        depthMap.put(meanDepth, orbit);\n    }\n    // now fill orbits back into list ordered by depth\n    alignedOrbits.clear();\n    for (List<Integer> orbit : depthMap.values()) {\n        // order subunit in a clockwise rotation around the z-axis\n        /// starting at the 12 O-clock position (+y position)\n        // TODO how should this be aligned??\n        //\t\talignWithReferenceAxis(orbit);\n        alignedOrbits.add(orbit);\n    }\n}","repo_id":"9","comment":"/**\n * Returns a list of orbits (an orbit is a cyclic permutation of subunit indices that are related\n * by a rotation around the principal rotation axis) ordered from the +z direction to the -z direction (z-depth).\n * Within an orbit, subunit indices are ordered with a clockwise rotation around the z-axis.\n * @return list of orbits ordered by z-depth\n */\n","repo_name":"biojava-master/","id":1974,"method_signature":"void calcAlignedOrbits()"}