{"callee_method_ids":[619,619,773,490,489,487,490,489,487,490,489,487],"callee_method_names":["Method.setAccessible","CeCPMain.getParameters","CECPParameters.setDuplicationHint","AtomCache.getAtoms","AtomCache.getAtoms","Method.setAccessible","Method.invoke","CeCPMain.align","AFPChain.getOptLen","AFPChain.getOptAln","AFPChain.getOptLength","AFPChain.getBlockNum","Method.invoke","AFPChain.getOptLen","AFPChain.getOptAln","AFPChain.getOptLength","AFPChain.getBlockNum","Method.invoke","AFPChain.getOptLen","AFPChain.getOptAln","AFPChain.getOptLength","AFPChain.getBlockNum"],"method_name":"OptimalCECPMainTest.testPermuteOptAln","method_implementation":"{\n    //test private member using reflection\n    Method permuteOptAln = OptimalCECPMain.class.getDeclaredMethod(\"permuteOptAln\", AFPChain.class, int.class);\n    permuteOptAln.setAccessible(true);\n    // Two structures with nearly 100% sequence identity\n    /*\n\t\t * Aligned (0-based index):\n\t\t * \t3LB9.A\t1HV1\n\t\t * \t------\t----\n\t\t * \t0-62\t122-184\n\t\t * \t63\t\t0\n\t\t * \t65-181\t1-117\n\t\t *\n\t\t * unaligned:\n\t\t * \t64\t\t-\n\t\t * \t-\t\t118-121\n\t\t *\n\t\t * PDB numbering:\n\t\t * \t+2\t\t+1\n\t\t *\n\t\t */\n    String name1, name2;\n    name1 = \"3LB9.A\";\n    name2 = \"1HV1\";\n    CeCPMain ce = (CeCPMain) StructureAlignmentFactory.getAlgorithm(CeCPMain.algorithmName);\n    CECPParameters param = (CECPParameters) ce.getParameters();\n    param.setDuplicationHint(DuplicationHint.RIGHT);\n    Atom[] ca1 = cache.getAtoms(name1);\n    Atom[] ca2 = cache.getAtoms(name2);\n    // Create permuted CA chain\n    Method permuteArray = OptimalCECPMain.class.getDeclaredMethod(\"permuteArray\", Object[].class, int.class);\n    permuteArray.setAccessible(true);\n    Atom[] ca2p = StructureTools.cloneAtomArray(ca2);\n    permuteArray.invoke(null, ca2p, 63);\n    AFPChain cpAlignment = ce.align(ca1, ca2);\n    //System.out.println(cpAlignment.toCE(ca1, ca2));\n    //printOptAln(cpAlignment);\n    Assert.assertNotNull(cpAlignment);\n    int[] optLen = cpAlignment.getOptLen();\n    int[][][] optAln = cpAlignment.getOptAln();\n    Assert.assertEquals(\"Wrong total length\", 181, cpAlignment.getOptLength());\n    Assert.assertEquals(\"Wrong number of blocks\", 2, cpAlignment.getBlockNum());\n    Assert.assertEquals(\"Wrong block 0 length\", 63, optLen[0]);\n    Assert.assertEquals(\"Wrong block 1 length\", 118, optLen[1]);\n    //just test some key positions in each block\n    Assert.assertEquals(\"Wrong residue at start of block 0, protein 0\", 0, optAln[0][0][0]);\n    Assert.assertEquals(\"Wrong residue at start of block 0, protein 1\", 122, optAln[0][1][0]);\n    Assert.assertEquals(\"Wrong residue at end of block 0, protein 0\", 62, optAln[0][0][62]);\n    Assert.assertEquals(\"Wrong residue at end of block 0, protein 1\", 184, optAln[0][1][62]);\n    Assert.assertEquals(\"Wrong residue at start of block 1, protein 0\", 63, optAln[1][0][0]);\n    Assert.assertEquals(\"Wrong residue at start of block 1, protein 1\", 0, optAln[1][1][0]);\n    Assert.assertEquals(\"Wrong residue at pos 1 of block 1, protein 0\", 65, optAln[1][0][1]);\n    Assert.assertEquals(\"Wrong residue at pos 1 of block 1, protein 1\", 1, optAln[1][1][1]);\n    Assert.assertEquals(\"Wrong residue at pos 54 of block 1, protein 0\", 118, optAln[1][0][54]);\n    Assert.assertEquals(\"Wrong residue at pos 54 of block 1, protein 1\", 54, optAln[1][1][54]);\n    Assert.assertEquals(\"Wrong residue at pos 55 of block 1, protein 0\", 119, optAln[1][0][55]);\n    Assert.assertEquals(\"Wrong residue at pos 55 of block 1, protein 1\", 55, optAln[1][1][55]);\n    Assert.assertEquals(\"Wrong residue at end of block 1, protein 0\", 181, optAln[1][0][117]);\n    Assert.assertEquals(\"Wrong residue at end of block 1, protein 1\", 117, optAln[1][1][117]);\n    // permute! should align at 0,0\n    //System.out.println(\"Permuting by 63 residues...\");\n    permuteOptAln.invoke(null, cpAlignment, 63);\n    //System.out.println(cpAlignment.toCE(ca1, ca2p));\n    //printOptAln(cpAlignment);\n    optLen = cpAlignment.getOptLen();\n    optAln = cpAlignment.getOptAln();\n    Assert.assertEquals(\"Wrong total length\", 181, cpAlignment.getOptLength());\n    Assert.assertEquals(\"Wrong number of blocks\", 2, cpAlignment.getBlockNum());\n    Assert.assertEquals(\"Wrong block 0 length\", 63, optLen[0]);\n    Assert.assertEquals(\"Wrong block 1 length\", 118, optLen[1]);\n    //just test some key positions in each block\n    Assert.assertEquals(\"Wrong residue at start of block 0, protein 0\", 0, optAln[0][0][0]);\n    Assert.assertEquals(\"Wrong residue at start of block 0, protein 1\", 0, optAln[0][1][0]);\n    Assert.assertEquals(\"Wrong residue at end of block 0, protein 0\", 62, optAln[0][0][62]);\n    Assert.assertEquals(\"Wrong residue at end of block 0, protein 1\", 62, optAln[0][1][62]);\n    Assert.assertEquals(\"Wrong residue at start of block 1, protein 0\", 63, optAln[1][0][0]);\n    Assert.assertEquals(\"Wrong residue at start of block 1, protein 1\", 63, optAln[1][1][0]);\n    Assert.assertEquals(\"Wrong residue at pos 1 of block 1, protein 0\", 65, optAln[1][0][1]);\n    Assert.assertEquals(\"Wrong residue at pos 1 of block 1, protein 1\", 64, optAln[1][1][1]);\n    Assert.assertEquals(\"Wrong residue at end of block 1, protein 0\", 181, optAln[1][0][117]);\n    Assert.assertEquals(\"Wrong residue at end of block 1, protein 1\", 180, optAln[1][1][117]);\n    // undo permutation\n    //System.out.println(\"Permuting by -63 residues...\");\n    permuteOptAln.invoke(null, cpAlignment, -63);\n    //System.out.println(cpAlignment.toCE(ca1, ca2));\n    //printOptAln(cpAlignment);\n    optLen = cpAlignment.getOptLen();\n    optAln = cpAlignment.getOptAln();\n    Assert.assertEquals(\"Wrong total length\", 181, cpAlignment.getOptLength());\n    Assert.assertEquals(\"Wrong number of blocks\", 2, cpAlignment.getBlockNum());\n    Assert.assertEquals(\"Wrong block 0 length\", 63, optLen[0]);\n    Assert.assertEquals(\"Wrong block 1 length\", 118, optLen[1]);\n    //just test some key positions in each block\n    Assert.assertEquals(\"Wrong residue at start of block 0, protein 0\", 0, optAln[0][0][0]);\n    Assert.assertEquals(\"Wrong residue at start of block 0, protein 1\", 122, optAln[0][1][0]);\n    Assert.assertEquals(\"Wrong residue at end of block 0, protein 0\", 62, optAln[0][0][62]);\n    Assert.assertEquals(\"Wrong residue at end of block 0, protein 1\", 184, optAln[0][1][62]);\n    Assert.assertEquals(\"Wrong residue at start of block 1, protein 0\", 63, optAln[1][0][0]);\n    Assert.assertEquals(\"Wrong residue at start of block 1, protein 1\", 0, optAln[1][1][0]);\n    Assert.assertEquals(\"Wrong residue at pos 1 of block 1, protein 0\", 65, optAln[1][0][1]);\n    Assert.assertEquals(\"Wrong residue at pos 1 of block 1, protein 1\", 1, optAln[1][1][1]);\n    Assert.assertEquals(\"Wrong residue at pos 54 of block 1, protein 0\", 118, optAln[1][0][54]);\n    Assert.assertEquals(\"Wrong residue at pos 54 of block 1, protein 1\", 54, optAln[1][1][54]);\n    Assert.assertEquals(\"Wrong residue at pos 55 of block 1, protein 0\", 119, optAln[1][0][55]);\n    Assert.assertEquals(\"Wrong residue at pos 55 of block 1, protein 1\", 55, optAln[1][1][55]);\n    Assert.assertEquals(\"Wrong residue at end of block 1, protein 0\", 181, optAln[1][0][117]);\n    Assert.assertEquals(\"Wrong residue at end of block 1, protein 1\", 117, optAln[1][1][117]);\n}","repo_id":"9","comment":"/**\n * Tests private {@link OptimalCECPMain#permuteOptAln(AFPChain, int)}\n */\n","repo_name":"biojava-master/","id":152,"method_signature":"void testPermuteOptAln()"}