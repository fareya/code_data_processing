{"callee_method_ids":[641],"callee_method_names":["AtomCache.setFiletype","Structure.nrModels","Structure.getPolyChains","Structure.getPolyChains","Structure.getPolyChains"],"method_name":"TestBioassemblies.test1M4X","method_implementation":"{\n    AtomCache prevAtomCache = StructureIO.getAtomCache();\n    AtomCache cache = new AtomCache();\n    cache.setFiletype(StructureFiletype.CIF);\n    StructureIO.setAtomCache(cache);\n    Structure flattenedBioAssembly5 = StructureIO.getBiologicalAssembly(\"1M4X\", 5);\n    // checking that we have 1 model only\n    assertEquals(1, flattenedBioAssembly5.nrModels());\n    // bioassembly 5 expands to 90 chains (3 chains x 5 operators x 6 operators), the expression is '(1-5)(61-88)'\n    assertEquals(90, flattenedBioAssembly5.getPolyChains().size());\n    // the operator ids are composed for this case, e.g. A_5x61\n    assertTrue(flattenedBioAssembly5.getPolyChains().get(0).getId().contains(\"x\"));\n    assertEquals(2, flattenedBioAssembly5.getPolyChains().get(0).getId().split(\"_\").length);\n    StructureIO.setAtomCache(prevAtomCache);\n}","repo_id":"9","comment":"/**\n * A test for an entry with cartesian product in assembly operators\n * @throws StructureException\n * @throws IOException\n */\n","repo_name":"biojava-master/","id":156,"method_signature":"void test1M4X()"}