{"callee_method_ids":[3476,3447,3447,3447],"callee_method_names":["RemotePairwiseAlignmentProperties.getAlignmentOptions","Map<String, String>.put","RemotePairwiseAlignmentProperties.getAlignmentOption","String.isEmpty","Map<String, String>.containsKey","Map<String, String>.containsKey","Map<String, String>.put","Map<String, String>.put","Map<String, String>.put","Map<String, String>.put","MapToStringTransformer.transform","URL.openConnection","URLConnection.getOutputStream","OutputStreamWriter.write","OutputStreamWriter.flush","URLConnection.getInputStream","BufferedReader.readLine","String.contains","String.contains","String.contains","String.split","BlastJob.setId","String[].trim","String.contains","String.split","BlastJob.setStartTimestamp","BlastJob.setExpectedExecutionTime","String[].trim","HashMap.put","BlastJob.getId","String.split","String[].split","String[].trim","BlastJob.getId","BlastJob.getId","MouseEvent.getMessage"],"method_name":"NCBIQBlastService.sendAlignmentRequest","method_implementation":"{\n    Map<String, String> params = new HashMap<String, String>();\n    for (String key : alignmentProperties.getAlignmentOptions()) {\n        params.put(key, alignmentProperties.getAlignmentOption(key));\n    }\n    if (query == null || query.isEmpty()) {\n        throw new IllegalArgumentException(\"Impossible to execute QBlast request. The sequence has not been set.\");\n    }\n    if (!params.containsKey(PROGRAM.name())) {\n        throw new IllegalArgumentException(\"Impossible to execute QBlast request. Parameter PROGRAM has not been set.\");\n    }\n    if (!params.containsKey(DATABASE.name())) {\n        throw new IllegalArgumentException(\"Impossible to execute QBlast request. Parameter DATABASE has not been set.\");\n    }\n    params.put(CMD.name(), \"Put\");\n    params.put(QUERY.name(), query);\n    params.put(TOOL.name(), getTool());\n    params.put(EMAIL.name(), getEmail());\n    String putCmd = MAP_TO_STRING_TRANSFORMER.transform(params);\n    OutputStreamWriter writer = null;\n    BufferedReader reader = null;\n    try {\n        URLConnection serviceConnection = setQBlastServiceProperties(serviceUrl.openConnection());\n        writer = new OutputStreamWriter(serviceConnection.getOutputStream());\n        writer.write(putCmd);\n        writer.flush();\n        // Get the response\n        reader = new BufferedReader(new InputStreamReader(serviceConnection.getInputStream()));\n        // find request id and time of execution\n        BlastJob job = new BlastJob();\n        String line;\n        while ((line = reader.readLine()) != null) {\n            if (!line.contains(\"class=\\\"error\\\"\") && !line.contains(\"Message ID#\")) {\n                // if there is no error, capture RID and RTOE\n                if (line.contains(\"RID = \")) {\n                    String[] arr = line.split(\"=\");\n                    job.setId(arr[1].trim());\n                } else if (line.contains(\"RTOE = \")) {\n                    String[] arr = line.split(\"=\");\n                    job.setStartTimestamp(System.currentTimeMillis());\n                    job.setExpectedExecutionTime(Long.parseLong(arr[1].trim()) * 1000);\n                }\n                jobs.put(job.getId(), job);\n            } else {\n                // handle QBlast error message\n                // Capture everything to the left of this HTML statement...\n                String[] tmp = line.split(\"<\/p><\/li><\/ul>\");\n                // Only the error message is on the right side of this...\n                String[] moreTmp = tmp[0].split(\"<p class=\\\"error\\\">\");\n                throw new Exception(\"NCBI QBlast refused this request because: \" + moreTmp[1].trim());\n            }\n        }\n        if (job != null && job.getId() != null) {\n            return job.getId();\n        } else {\n            throw new Exception(\"Unable to retrieve request ID\");\n        }\n    } catch (IOException e) {\n        throw new IOException(\"An error occured submiting sequence to BLAST server. Cause: \" + e.getMessage(), e);\n    } finally {\n        IOUtils.close(reader);\n        IOUtils.close(writer);\n    }\n}","repo_id":"9","comment":"/**\n * Sends the Blast request via the Put command of the CGI-BIN interface. Uses all of the parameters specified in\n * {@code alignmentProperties} (parameters PROGRAM and DATABASE are required).\n *\n * @param query : a {@code String} representing a sequence or Genbank ID\n * @param alignmentProperties : a {@code RemotePairwiseAlignmentProperties} object representing alignment properties\n * @return the request id for this sequence, necessary to fetch results after completion\n * @throws Exception if unable to connect to the NCBI QBlast service or if no sequence or required parameters\n *             PROGRAM and DATABASE are not set\n */\n","repo_name":"biojava-master/","id":3466,"method_signature":"String sendAlignmentRequest(String, RemotePairwiseAlignmentProperties)"}