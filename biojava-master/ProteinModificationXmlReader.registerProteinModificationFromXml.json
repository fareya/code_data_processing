{"callee_method_names":["DocumentBuilderFactory.newDocumentBuilder","DocumentBuilder.parse","Document.getElementsByTagName","NodeList.getLength","NodeList.item","Map<String, List<Node>>.get","List<Node>.size","List<Node>.get","Map<String, List<Node>>.get","List<Node>.size","List<Node>.get","List<Node>.get","Map<String, List<Node>>.get","List<Node>.size","List<Node>.get","List<Node>.get","Map<String, List<Node>>.get","List<Node>.size","List<Node>.get","Map<String, List<Node>>.get","List<Node>.size","List<Node>.get","Node.getAttributes","NamedNodeMap.getNamedItem","Node.getTextContent","Map<String, Integer>.containsKey","NamedNodeMap.getNamedItem","Node.getTextContent","String.isEmpty","Set<String>.addAll","String.split","Set<String>.isEmpty","List<Node>.size","List<Node>.get","List<Component>.add","Map<String, Integer>.put","List<Component>.size","Map<String, List<Node>>.get","List<Node>.size","List<Node>.get","Map<String, List<Node>>.get","List<Node>.size","List<Node>.get","NamedNodeMap.getNamedItem","Node.getTextContent","Map<String, Integer>.get","NamedNodeMap.getNamedItem","Node.getTextContent","List<Node>.get","String.isEmpty","String.split","List<Node>.get","NamedNodeMap.getNamedItem","Node.getTextContent","Map<String, Integer>.get","NamedNodeMap.getNamedItem","Node.getTextContent","List<Node>.get","String.isEmpty","String.split","List<ModificationLinkage>.add","Map<String, List<Node>>.get","List<Node>.isEmpty","ProteinModificationImpl.Builder.setDescription","List<Node>.get","Map<String, List<Node>>.get","Map<String, List<Node>>.get","List<Node>.size","List<Node>.get","Map<String, List<Node>>.get","List<Node>.size","List<Node>.get","Map<String, List<Node>>.get","List<Node>.isEmpty","List<Node>.get","ProteinModificationImpl.Builder.setPdbccId","ProteinModificationImpl.Builder.setResidId","ProteinModificationImpl.Builder.setPsimodId","Map<String, List<Node>>.get","List<Node>.isEmpty","ProteinModificationImpl.Builder.setFormula","List<Node>.get","Map<String, List<Node>>.get","List<Node>.isEmpty","ProteinModificationImpl.Builder.addKeyword","ScopNode.getTextContent","ProteinModificationImpl.Builder.build"],"method_name":"ProteinModificationXmlReader.registerProteinModificationFromXml","method_implementation":"{\n    if (isXml == null) {\n        throw new IllegalArgumentException(\"Null argument.\");\n    }\n    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document doc = builder.parse(isXml);\n    NodeList modNodes = doc.getElementsByTagName(\"Entry\");\n    int modSize = modNodes.getLength();\n    List<Node> nodes;\n    for (int iMod = 0; iMod < modSize; iMod++) {\n        Node modNode = modNodes.item(iMod);\n        Map<String, List<Node>> infoNodes = getChildNodes(modNode);\n        // ID\n        nodes = infoNodes.get(\"Id\");\n        if (nodes == null || nodes.size() != 1) {\n            throw new RuntimeException(\"Each modification must have exact \" + \"one <Id> field.\");\n        }\n        String id = nodes.get(0).getTextContent();\n        // modification category\n        nodes = infoNodes.get(\"Category\");\n        if (nodes == null || nodes.size() != 1) {\n            throw new RuntimeException(\"Each modification must have exact \" + \"one <Category> field. See Modification \" + id + \".\");\n        }\n        ModificationCategory cat = ModificationCategory.getByLabel(nodes.get(0).getTextContent());\n        if (cat == null) {\n            throw new RuntimeException(nodes.get(0).getTextContent() + \" is not defined as an modification category.\" + \" See Modification \" + id + \".\");\n        }\n        // occurrence type\n        nodes = infoNodes.get(\"Occurrence\");\n        if (nodes == null || nodes.size() != 1) {\n            throw new RuntimeException(\"Each modification must have exact \" + \"one <Occurrence> field. See Modification \" + id + \".\");\n        }\n        ModificationOccurrenceType occType = ModificationOccurrenceType.getByLabel(nodes.get(0).getTextContent());\n        if (occType == null) {\n            throw new RuntimeException(nodes.get(0).getTextContent() + \" is not defined as an modification occurence type.\" + \" See Modification \" + id + \".\");\n        }\n        // condition\n        ModificationCondition condition = null;\n        {\n            nodes = infoNodes.get(\"Condition\");\n            if (nodes == null || nodes.size() != 1) {\n                throw new RuntimeException(\"Each modification must have exact \" + \"one <Condition> field. See Modification \" + id + \".\");\n            }\n            Node compsNode = nodes.get(0);\n            // keep track of the labels of component indices\n            Map<String, Integer> mapLabelComp = new HashMap<String, Integer>();\n            Map<String, List<Node>> compInfoNodes = getChildNodes(compsNode);\n            // components\n            List<Node> compNodes = compInfoNodes.get(\"Component\");\n            int sizeComp = compNodes.size();\n            List<Component> comps = new ArrayList<Component>(sizeComp);\n            for (int iComp = 0; iComp < sizeComp; iComp++) {\n                Node compNode = compNodes.get(iComp);\n                // comp label\n                NamedNodeMap compNodeAttrs = compNode.getAttributes();\n                Node labelNode = compNodeAttrs.getNamedItem(\"component\");\n                if (labelNode == null) {\n                    throw new RuntimeException(\"Each component must have a label.\" + \" See Modification \" + id + \".\");\n                }\n                String label = labelNode.getTextContent();\n                if (mapLabelComp.containsKey(label)) {\n                    throw new RuntimeException(\"Each component must have a unique label.\" + \" See Modification \" + id + \".\");\n                }\n                // comp PDBCC ID\n                Set<String> compIds = new HashSet<String>();\n                List<Node> compIdNodes = getChildNodes(compNode).get(\"Id\");\n                if (compIdNodes != null) {\n                    for (Node compIdNode : compIdNodes) {\n                        NamedNodeMap compIdNodeAttr = compIdNode.getAttributes();\n                        Node compIdSource = compIdNodeAttr.getNamedItem(\"source\");\n                        if (compIdSource != null && \"PDBCC\".equals(compIdSource.getTextContent())) {\n                            String strComps = compIdNode.getTextContent();\n                            if (strComps.isEmpty()) {\n                                throw new RuntimeException(\"Empty component.\" + \" See Modification \" + id + \".\");\n                            }\n                            compIds.addAll(Arrays.asList(strComps.split(\",\")));\n                        }\n                    }\n                }\n                if (compIds.isEmpty()) {\n                    throw new RuntimeException(\"Each component must have a PDBCC ID.\" + \" See Modification \" + id + \".\");\n                }\n                // terminal\n                boolean nTerminal = false;\n                boolean cTerminal = false;\n                List<Node> compTermNode = getChildNodes(compNode).get(\"Terminal\");\n                if (compTermNode != null) {\n                    if (compTermNode.size() != 1) {\n                        throw new RuntimeException(\"Only one <Terminal> condition is allowed for \" + \"each component. See Modification \" + id + \".\");\n                    }\n                    String nc = compTermNode.get(0).getTextContent();\n                    if (\"N\".equals(nc)) {\n                        nTerminal = true;\n                    } else if (\"C\".equals(nc)) {\n                        cTerminal = true;\n                    } else {\n                        throw new RuntimeException(\"Only N or C is allowed for <Terminal>.\" + \" See Modification \" + id + \".\");\n                    }\n                }\n                // register\n                Component comp = Component.of(compIds, nTerminal, cTerminal);\n                comps.add(comp);\n                mapLabelComp.put(label, comps.size() - 1);\n            }\n            // bonds\n            List<Node> bondNodes = compInfoNodes.get(\"Bond\");\n            List<ModificationLinkage> linkages = null;\n            if (bondNodes != null) {\n                int sizeBonds = bondNodes.size();\n                linkages = new ArrayList<ModificationLinkage>(sizeBonds);\n                for (int iBond = 0; iBond < sizeBonds; iBond++) {\n                    Node bondNode = bondNodes.get(iBond);\n                    Map<String, List<Node>> bondChildNodes = getChildNodes(bondNode);\n                    if (bondChildNodes == null) {\n                        throw new RuntimeException(\"Each bond must contain two atoms\" + \" See Modification \" + id + \".\");\n                    }\n                    List<Node> atomNodes = bondChildNodes.get(\"Atom\");\n                    if (atomNodes == null || atomNodes.size() != 2) {\n                        throw new RuntimeException(\"Each bond must contain two atoms\" + \" See Modification \" + id + \".\");\n                    }\n                    // atom 1\n                    NamedNodeMap atomNodeAttrs = atomNodes.get(0).getAttributes();\n                    Node compNode = atomNodeAttrs.getNamedItem(\"component\");\n                    if (compNode == null) {\n                        throw new RuntimeException(\"Each atom must on a component.\" + \" See Modification \" + id + \".\");\n                    }\n                    String labelComp1 = compNode.getTextContent();\n                    int iComp1 = mapLabelComp.get(labelComp1);\n                    Node labelNode = atomNodeAttrs.getNamedItem(\"atom\");\n                    String labelAtom1 = labelNode == null ? null : labelNode.getTextContent();\n                    String atom1 = atomNodes.get(0).getTextContent();\n                    if (atom1.isEmpty()) {\n                        throw new RuntimeException(\"Each atom must have a name. Please use wildcard * if unknown.\" + \" See Modification \" + id + \".\");\n                    }\n                    List<String> potentialAtoms1 = Arrays.asList(atom1.split(\",\"));\n                    // atom 2\n                    atomNodeAttrs = atomNodes.get(1).getAttributes();\n                    compNode = atomNodeAttrs.getNamedItem(\"component\");\n                    if (compNode == null) {\n                        throw new RuntimeException(\"Each atom must on a component.\" + \" See Modification \" + id + \".\");\n                    }\n                    String labelComp2 = compNode.getTextContent();\n                    int iComp2 = mapLabelComp.get(labelComp2);\n                    labelNode = atomNodeAttrs.getNamedItem(\"atom\");\n                    String labelAtom2 = labelNode == null ? null : labelNode.getTextContent();\n                    String atom2 = atomNodes.get(1).getTextContent();\n                    if (atom2.isEmpty()) {\n                        throw new RuntimeException(\"Each atom must have a name. Please use wildcard * if unknown.\" + \" See Modification \" + id + \".\");\n                    }\n                    List<String> potentialAtoms2 = Arrays.asList(atom2.split(\",\"));\n                    // add linkage\n                    ModificationLinkage linkage = new ModificationLinkage(comps, iComp1, potentialAtoms1, labelAtom1, iComp2, potentialAtoms2, labelAtom2);\n                    linkages.add(linkage);\n                }\n            }\n            condition = new ModificationConditionImpl(comps, linkages);\n        }\n        // end of condition\n        ProteinModificationImpl.Builder modBuilder = new ProteinModificationImpl.Builder(id, cat, occType, condition);\n        // description\n        nodes = infoNodes.get(\"Description\");\n        if (nodes != null && !nodes.isEmpty()) {\n            modBuilder.setDescription(nodes.get(0).getTextContent());\n        }\n        // cross references\n        nodes = infoNodes.get(\"CrossReference\");\n        if (nodes != null) {\n            for (Node node : nodes) {\n                Map<String, List<Node>> xrefInfoNodes = getChildNodes(node);\n                // source\n                List<Node> xrefNode = xrefInfoNodes.get(\"Source\");\n                if (xrefNode == null || xrefNode.size() != 1) {\n                    throw new RuntimeException(\"Error in XML file: \" + \"a cross reference must contain exactly one <Source> field.\" + \" See Modification \" + id + \".\");\n                }\n                String xrefDb = xrefNode.get(0).getTextContent();\n                // id\n                xrefNode = xrefInfoNodes.get(\"Id\");\n                if (xrefNode == null || xrefNode.size() != 1) {\n                    throw new RuntimeException(\"Error in XML file: \" + \"a cross reference must contain exactly one <Id> field.\" + \" See Modification \" + id + \".\");\n                }\n                String xrefId = xrefNode.get(0).getTextContent();\n                // name\n                String xrefName = null;\n                xrefNode = xrefInfoNodes.get(\"Name\");\n                if (xrefNode != null && !xrefNode.isEmpty()) {\n                    xrefName = xrefNode.get(0).getTextContent();\n                }\n                if (\"PDBCC\".equals(xrefDb)) {\n                    modBuilder.setPdbccId(xrefId).setPdbccName(xrefName);\n                } else if (\"RESID\".equals(xrefDb)) {\n                    modBuilder.setResidId(xrefId).setResidName(xrefName);\n                } else if (\"PSI-MOD\".equals(xrefDb)) {\n                    modBuilder.setPsimodId(xrefId).setPsimodName(xrefName);\n                }\n            }\n        }\n        // end of cross references\n        // formula\n        nodes = infoNodes.get(\"Formula\");\n        if (nodes != null && !nodes.isEmpty()) {\n            modBuilder.setFormula(nodes.get(0).getTextContent());\n        }\n        // keywords\n        nodes = infoNodes.get(\"Keyword\");\n        if (nodes != null && !nodes.isEmpty()) {\n            for (Node node : nodes) {\n                modBuilder.addKeyword(node.getTextContent());\n            }\n        }\n        ProteinModificationRegistry.register(modBuilder.build());\n    }\n}","repo_id":"9","comment":"/**\n * Read protein modifications from XML file and register them.\n * @param isXml {@link InputStream} of the XML file.\n * @throws IOException if failed to read the XML file.\n * @throws ParserConfigurationException if parse errors occur.\n * @throws SAXException the {@link DocumentBuilder} cannot be created.\n */\n","repo_name":"biojava-master/","id":273,"method_signature":"void registerProteinModificationFromXml(InputStream)"}