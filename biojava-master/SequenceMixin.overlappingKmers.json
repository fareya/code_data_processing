{"callee_method_names":["List<Iterator<SequenceView<C>>>.add","Sequence<C>.getSubSequence","Sequence<C>.getLength","List<Iterator<SequenceView<C>>>.add","List<Iterator<SequenceView<C>>>.get","Iterator<SequenceView<C>>.hasNext","List<SequenceView<C>>.add","Iterator<SequenceView<C>>.next"],"method_name":"SequenceMixin.overlappingKmers","method_implementation":"{\n    List<SequenceView<C>> l = new ArrayList<SequenceView<C>>();\n    List<Iterator<SequenceView<C>>> windows = new ArrayList<Iterator<SequenceView<C>>>();\n    for (int i = 1; i <= kmer; i++) {\n        if (i == 1) {\n            windows.add(new WindowedSequence<C>(sequence, kmer).iterator());\n        } else {\n            SequenceView<C> sv = sequence.getSubSequence(i, sequence.getLength());\n            windows.add(new WindowedSequence<C>(sv, kmer).iterator());\n        }\n    }\n    OUTER: while (true) {\n        for (int i = 0; i < kmer; i++) {\n            Iterator<SequenceView<C>> iterator = windows.get(i);\n            boolean breakLoop = true;\n            if (iterator.hasNext()) {\n                l.add(iterator.next());\n                breakLoop = false;\n            }\n            if (breakLoop) {\n                break OUTER;\n            }\n        }\n    }\n    return l;\n}","repo_id":"9","comment":"/**\n * Used to generate overlapping k-mers such i.e. ATGTA will give rise to\n * ATG, TGT & GTA\n *\n * @param <C> Compound to use\n * @param sequence Sequence to build from\n * @param kmer Kmer size\n * @return The list of overlapping K-mers\n */\n","repo_name":"biojava-master/","id":2894,"method_signature":"List<SequenceView<C>> overlappingKmers(Sequence, int)"}