{"callee_method_ids":[641,1261],"callee_method_names":["FileParsingParameters.setParseBioAssembly","AtomCache.setFileParsingParams","AtomCache.setFiletype","MmtfStructureReader.getStructure"],"method_name":"TestMmtfRoundTrip.testRoundTrip","method_implementation":"{\n    // Load a structure in MMCIF format\n    AtomCache cache = new AtomCache();\n    FileParsingParameters params = new FileParsingParameters();\n    params.setParseBioAssembly(true);\n    cache.setFileParsingParams(params);\n    cache.setFiletype(StructureFiletype.CIF);\n    StructureIO.setAtomCache(cache);\n    ChemCompGroupFactory.setChemCompProvider(new DownloadChemCompProvider());\n    // test case for biojava issue #770, order of subunits\n    Structure structure1 = StructureIO.getStructure(\"3BW1\");\n    AdapterToStructureData writerToEncoder = new AdapterToStructureData();\n    new MmtfStructureWriter(structure1, writerToEncoder);\n    MmtfStructureReader mmtfStructureReader = new MmtfStructureReader();\n    new StructureDataToAdapter(writerToEncoder, mmtfStructureReader);\n    Structure structure2 = mmtfStructureReader.getStructure();\n    assertTrue(checkIfAtomsSame(structure1, structure2));\n    checkBioAssemblies1(structure1, structure2);\n}","repo_id":"9","comment":"/**\n * Test that we can round trip a simple structure.\n *\n * @throws IOException an error reading the file\n * @throws StructureException an error parsing the structure\n */\n","repo_name":"biojava-master/","id":2239,"method_signature":"void testRoundTrip()"}