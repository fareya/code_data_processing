{"callee_method_names":["Logger.info","MultipleSequenceAlignment<C,D>.getSize","MultipleSequenceAlignment<C,D>.getLength","MultipleSequenceAlignment<C,D>.getAlignedSequence","MultipleSequenceAlignment<C,D>.getAlignedSequences","Logger.info","String[].charAt","String[].charAt","SubstitutionMatrix<D>.getValue","List<C>.get","List<C>.get","DistanceMatrix.setValue","SubstitutionMatrix<D>.getMaxValue","MultipleSequenceAlignment<C,D>.getLength","SubstitutionMatrix<D>.getMaxValue","SubstitutionMatrix<D>.getMinValue","DistanceMatrix.setValue","DistanceMatrix.setValue"],"method_name":"DistanceMatrixCalculator.fractionalDissimilarityScore","method_implementation":"{\n    // Calculate the similarity scores using the alignment package\n    logger.info(\"{}:{}\", \"Determing Distances\", 0);\n    int n = msa.getSize();\n    DistanceMatrix DM = new BasicSymmetricalDistanceMatrix(n);\n    int totalloopcount = (n / 2) * (n + 1);\n    int end = msa.getLength();\n    String[] sequenceString = new String[n];\n    for (int i = 0; i < n; i++) {\n        sequenceString[i] = msa.getAlignedSequence(i + 1).getSequenceAsString();\n    }\n    List<C> seqs = msa.getAlignedSequences();\n    int loopcount = 0;\n    for (int i = 0; i < (n - 1); i++) {\n        logger.info(\"{}:{}\", \"Determining Distances\", (loopcount * 100) / totalloopcount);\n        // Obtain the similarity scores\n        for (int j = i; j < n; j++) {\n            double score = 0;\n            loopcount++;\n            for (int k = 0; k < end; k++) {\n                if (Comparison.isGap(sequenceString[i].charAt(k)) || Comparison.isGap(sequenceString[j].charAt(k)))\n                    continue;\n                score += M.getValue(seqs.get(i).getCompoundAt(k + 1), seqs.get(j).getCompoundAt(k + 1));\n            }\n            if (i == j)\n                DM.setValue(i, j, 0.0);\n            else {\n                double dS = (M.getMaxValue() - score / msa.getLength()) / (M.getMaxValue() - M.getMinValue());\n                DM.setValue(i, j, dS);\n                DM.setValue(j, i, dS);\n            }\n        }\n    }\n    return DM;\n}","repo_id":"9","comment":"/**\n * The fractional dissimilarity score (Ds) is a relative measure of the\n * dissimilarity between two aligned sequences. It is calculated as:\n *\n * <pre>\n * Ds = sum( max(M) - M<sub>ai,bi<\/sub> ) / (max(M)-min(M)) ) / L\n * <\/pre>\n *\n * Where the sum through i runs for all the alignment positions, ai and bi\n * are the AA at position i in the first and second aligned sequences,\n * respectively, and L is the total length of the alignment (normalization).\n * <p>\n * The fractional dissimilarity score (Ds) is in the interval [0, 1], where\n * 0 means that the sequences are identical and 1 that the sequences are\n * completely different.\n * <p>\n * Gaps do not have a contribution to the similarity score calculation (gap\n * penalty = 0)\n *\n * @param msa\n *            MultipleSequenceAlignment\n * @param M\n *            SubstitutionMatrix for similarity scoring\n * @return DistanceMatrix\n */\n","repo_name":"biojava-master/","id":110,"method_signature":"DistanceMatrix fractionalDissimilarityScore(MultipleSequenceAlignment, SubstitutionMatrix)"}