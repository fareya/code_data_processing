{"callee_method_names":["Atom.getGroup","Atom.getGroup","PDPDistanceMatrix.setNclose","PDPDistanceMatrix.setIclose","PDPDistanceMatrix.setJclose","PDPDistanceMatrix.setDist"],"method_name":"GetDistanceMatrix.getDistanceMatrix","method_implementation":"{\n    int[][] dist = new int[protein.length + 3][protein.length + 3];\n    int i, j;\n    double d, dt1, dt2, dt3, dt4;\n    int nclose = 0;\n    int[] iclose = new int[protein.length * protein.length];\n    int[] jclose = new int[protein.length * protein.length];\n    if (protein.length >= PDPParameters.MAXLEN) {\n        System.err.println(String.format(\"%d protein.len > MAXLEN %d\\n\", protein.length, PDPParameters.MAXLEN));\n        return null;\n    }\n    for (i = 0; i < protein.length; i++) {\n        for (j = i; j < protein.length; j++) {\n            dist[i][j] = 0;\n            dist[j][i] = 0;\n            d = 0;\n            Atom ca1 = protein[i];\n            Atom ca2 = protein[j];\n            Group g1 = ca1.getGroup();\n            Group g2 = ca2.getGroup();\n            Atom cb1 = getCBeta(g1);\n            Atom cb2 = getCBeta(g2);\n            boolean hasCbeta1 = cb1 != null;\n            boolean hasCbeta2 = cb2 != null;\n            dt1 = 81;\n            dt2 = 64;\n            dt3 = 49;\n            dt4 = 36;\n            if (hasCbeta1 && hasCbeta2) {\n                double distance = Calc.getDistance(cb1, cb2);\n                d += distance * distance;\n            } else if (hasCbeta1 && !hasCbeta2) {\n                double distance = 999;\n                distance = Calc.getDistance(cb1, ca2);\n                d += distance * distance;\n            } else if (!hasCbeta1 && hasCbeta2) {\n                double distance = Calc.getDistance(ca1, cb2);\n                d += distance * distance;\n            } else if (!hasCbeta1 && !hasCbeta2) {\n                double distance = Calc.getDistance(ca1, ca2);\n                d += distance * distance;\n            }\n            if (d < dt1) {\n                dist[i][j] = 1;\n                dist[j][i] = 1;\n                if (d < dt2) {\n                    dist[i][j] = 2;\n                    dist[j][i] = 2;\n                    if (j - i > 35) {\n                        iclose[nclose] = i;\n                        jclose[nclose] = j;\n                        nclose++;\n                    }\n                    if (d < dt3) {\n                        dist[i][j] = 4;\n                        dist[j][i] = 4;\n                        if (d < dt4) {\n                            dist[i][j] = 6;\n                            dist[j][i] = 6;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    /* secondary structure interaction */\n    for (i = 1; i < protein.length; i++) {\n        for (j = i; j < protein.length - 1; j++) {\n            /* beta-sheet */\n            if (dist[i][j] >= 2 && j - i > 5) {\n                if (dist[i - 1][j - 1] >= 2 && dist[i + 1][j + 1] >= 2 || dist[i - 1][j + 1] >= 2 && dist[i + 1][j - 1] >= 2) {\n                    dist[i][j] += 4;\n                    dist[j][i] += 4;\n                    /*\n\t\t\t\t\tprintf(\"1: %d %d %d\\n\",i,j,dist[i][j]);\n\t\t\t\t\t\t */\n                } else /* alpha-helices */\n                if (i > 2 && j < protein.length - 2) {\n                    if (dist[i - 3][j - 3] >= 1 && dist[i + 3][j + 3] >= 1 || dist[i - 3][j + 3] >= 1 && dist[i + 3][j - 3] >= 1) {\n                        dist[i][j] += 4;\n                        dist[j][i] += 4;\n                        /*\n\t\t\t\t\t\tprintf(\"3: %d %d %d\\n\",i,j,dist[i][j]);\n\t\t\t\t\t\t\t */\n                    } else if (i > 3 && j < protein.length - 3) {\n                        if ((dist[i - 3][j - 3] >= 1 || dist[i - 3][j - 4] >= 1 || dist[i - 4][j - 3] >= 1 || dist[i - 4][j - 4] >= 1) && (dist[i + 4][j + 4] >= 1 || dist[i + 4][j + 3] >= 1 || dist[i + 3][j + 3] >= 1 || dist[i + 3][j + 4] >= 1) || (dist[i - 4][j + 4] >= 1 || dist[i - 4][j + 3] >= 1 || dist[i - 3][j + 4] >= 1 || dist[i - 3][j + 3] >= 1) && (dist[i + 4][j - 4] >= 1 || dist[i + 4][j - 3] >= 1 || dist[i + 3][j - 4] >= 1 || dist[i + 3][j - 3] >= 1)) {\n                            dist[i][j] += 4;\n                            dist[j][i] += 4;\n                            /*\n\t\t\t\t\t\t\tprintf(\"4: %d %d %d\\n\",i,j,dist[i][j]);\n\t\t\t\t\t\t\t\t */\n                        }\n                    }\n                }\n            }\n        }\n    }\n    PDPDistanceMatrix matrix = new PDPDistanceMatrix();\n    matrix.setNclose(nclose);\n    matrix.setIclose(iclose);\n    matrix.setJclose(jclose);\n    matrix.setDist(dist);\n    return matrix;\n}","repo_id":"9","comment":"/**\n * A set of Calpha atoms that are representing the protein\n *\n * @param protein\n */\n","repo_name":"biojava-master/","id":997,"method_signature":"PDPDistanceMatrix getDistanceMatrix(Atom[])"}