{"callee_method_names":["Structure.nrModels","SpaceGroup.getProperty","List<SecStrucState>.add","SpaceGroup.getOriginal"],"method_name":"SecStrucCalc.calculate","method_implementation":"{\n    List<SecStrucState> secstruc = new ArrayList<SecStrucState>();\n    for (int i = 0; i < s.nrModels(); i++) {\n        // Reinitialise the global vars\n        ladders = new ArrayList<Ladder>();\n        bridges = new ArrayList<BetaBridge>();\n        groups = initGroupArray(s, i);\n        // Initialise the contact set for this structure\n        initContactSet();\n        if (groups.length < 5) {\n            // not enough groups to do anything\n            throw new StructureException(\"Not enough backbone groups in the\" + \" Structure to calculate the secondary structure (\" + groups.length + \" given, minimum 5)\");\n        }\n        calculateHAtoms();\n        calculateHBonds();\n        calculateDihedralAngles();\n        calculateTurns();\n        buildHelices();\n        detectBends();\n        detectStrands();\n        for (SecStrucGroup sg : groups) {\n            SecStrucState ss = (SecStrucState) sg.getProperty(Group.SEC_STRUC);\n            // Add to return list and assign to original if flag is true\n            secstruc.add(ss);\n            if (assign)\n                sg.getOriginal().setProperty(Group.SEC_STRUC, ss);\n        }\n    }\n    return secstruc;\n}","repo_id":"9","comment":"/**\n * Predicts the secondary structure of this Structure object,\n * using a DSSP implementation.\n *\n * @param s Structure to predict the SS\n * @param assign sets the SS information to the Groups of s\n * @return a List of SS annotation objects\n */\n","repo_name":"biojava-master/","id":1588,"method_signature":"List<SecStrucState> calculate(Structure, boolean)"}