{"callee_method_names":["List<Point3d[]>.size","SuperPosition.superpose","List<Point3d[]>.get","List<Point3d[]>.get","SuperPosition.superpose","List<Point3d[]>.get","List<Point3d[]>.get","SuperPosition.superpose","List<Point3d[]>.get","List<Point3d[]>.get","Logger.info","List<Point3d[]>.get","Matrix4d.epsilonEquals","Matrix4d.epsilonEquals","Matrix4d.epsilonEquals"],"method_name":"TestSuperPosition.testSuperposition","method_implementation":"{\n    for (int c = 0; c < cloud1.size(); c++) {\n        // Use SVD superposition\n        SuperPosition svd = new SuperPositionSVD(false);\n        long svdStart = System.nanoTime();\n        Matrix4d svdTransform = svd.superpose(cloud1.get(c), cloud2.get(c));\n        long svdTime = (System.nanoTime() - svdStart) / 1000;\n        // Use quaternion superposition\n        SuperPosition quat = new SuperPositionQuat(false);\n        long quatStart = System.nanoTime();\n        Matrix4d quatTransform = quat.superpose(cloud1.get(c), cloud2.get(c));\n        long quatTime = (System.nanoTime() - quatStart) / 1000;\n        // Use QCP algorithm\n        SuperPosition qcp = new SuperPositionQCP(false);\n        long qcpStart = System.nanoTime();\n        Matrix4d qcpTransform = qcp.superpose(cloud1.get(c), cloud2.get(c));\n        long qcpTime = (System.nanoTime() - qcpStart) / 1000;\n        LOGGER.info(String.format(\"Transformation Matrix %d points: \" + \"SVD time %d us, SP time: %d us, QCP time: %d us\", cloud1.get(c).length, svdTime, quatTime, qcpTime));\n        // Check that the transformation matrix was recovered\n        assertTrue(transform.epsilonEquals(svdTransform, 0.05));\n        assertTrue(transform.epsilonEquals(quatTransform, 0.05));\n        assertTrue(transform.epsilonEquals(qcpTransform, 0.05));\n    }\n}","repo_id":"9","comment":"/**\n * Test method to obtain the transformation matrix from superpositions.\n */\n","repo_name":"biojava-master/","id":2306,"method_signature":"void testSuperposition()"}