{"callee_method_names":["Set<StructureAtomLinkage>.addAll","ModifiedCompound.getAtomLinkages","List<Group>.size","List<Group>.get","List<Group>.get","Set<StructureAtomLinkage>.add","List<Group>.size","List<Group>.get","List<Group>.get","Group.equals","Set<StructureAtomLinkage>.add"],"method_name":"ProteinModificationIdentifier.recordUnidentifiableAtomLinkages","method_implementation":"{\n    // first put identified linkages in a map for fast query\n    Set<StructureAtomLinkage> identifiedLinkages = new HashSet<StructureAtomLinkage>();\n    for (ModifiedCompound mc : modComps) {\n        identifiedLinkages.addAll(mc.getAtomLinkages());\n    }\n    // record\n    // cross link\n    int nRes = residues.size();\n    for (int i = 0; i < nRes - 1; i++) {\n        Group group1 = residues.get(i);\n        for (int j = i + 1; j < nRes; j++) {\n            Group group2 = residues.get(j);\n            List<Atom[]> linkages = StructureUtil.findAtomLinkages(group1, group2, true, bondLengthTolerance);\n            for (Atom[] atoms : linkages) {\n                StructureAtomLinkage link = StructureUtil.getStructureAtomLinkage(atoms[0], true, atoms[1], true);\n                unidentifiableAtomLinkages.add(link);\n            }\n        }\n    }\n    // attachment\n    int nLig = ligands.size();\n    for (int i = 0; i < nRes; i++) {\n        Group group1 = residues.get(i);\n        for (int j = 0; j < nLig; j++) {\n            Group group2 = ligands.get(j);\n            if (group1.equals(group2)) {\n                // overlap between residues and ligands\n                continue;\n            }\n            List<Atom[]> linkages = StructureUtil.findAtomLinkages(group1, group2, false, bondLengthTolerance);\n            for (Atom[] atoms : linkages) {\n                StructureAtomLinkage link = StructureUtil.getStructureAtomLinkage(atoms[0], true, atoms[1], false);\n                unidentifiableAtomLinkages.add(link);\n            }\n        }\n    }\n}","repo_id":"9","comment":"/**\n * Record unidentifiable atom linkages in a chain. Only linkages between two\n * residues or one residue and one ligand will be recorded.\n */\n","repo_name":"biojava-master/","id":301,"method_signature":"void recordUnidentifiableAtomLinkages(List, List)"}