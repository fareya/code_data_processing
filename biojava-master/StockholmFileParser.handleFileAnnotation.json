{"callee_method_names":["String.equals","StockholmStructure.getFileAnnotation","String.equals","StockholmStructure.getFileAnnotation","String.equals","StockholmStructure.getFileAnnotation","String.equals","StockholmStructure.getFileAnnotation","String.equals","StockholmStructure.getFileAnnotation","String.equals","StockholmStructure.getFileAnnotation","String.equals","StockholmStructure.getFileAnnotation","String.equals","StockholmStructure.getFileAnnotation","String.equals","StockholmStructure.getFileAnnotation","String.equals","StockholmStructure.getFileAnnotation","String.equals","StockholmStructure.getFileAnnotation","String.equals","StockholmStructure.getFileAnnotation","String.equals","StockholmStructure.getFileAnnotation","String.equals","StockholmStructure.getFileAnnotation","String.equals","StockholmStructure.getFileAnnotation","String.equals","StockholmStructure.getFileAnnotation","String.equals","StockholmStructure.getFileAnnotation","String.equals","StockholmStructure.getFileAnnotation","String.equals","StockholmStructure.getFileAnnotation","String.equals","StockholmStructure.getFileAnnotation","String.equals","StockholmStructure.getFileAnnotation","String.equals","StockholmStructure.getFileAnnotation","String.equals","StockholmStructure.getFileAnnotation","String.equals","StockholmStructure.getFileAnnotation","String.equals","StockholmStructure.getFileAnnotation","String.equals","StockholmStructure.getFileAnnotation","String.equals","StockholmStructure.getFileAnnotation","String.equals","StockholmStructure.getFileAnnotation","String.equals","StockholmStructure.getFileAnnotation","String.equals","StockholmStructure.getFileAnnotation","String.equals","StockholmStructure.getFileAnnotation","String.equals","StockholmStructure.getFileAnnotation","String.equals","StockholmStructure.getFileAnnotation","Logger.warn"],"method_name":"StockholmFileParser.handleFileAnnotation","method_implementation":"{\n    if (featureName.equals(GF_ACCESSION_NUMBER)) {\n        stockholmStructure.getFileAnnotation().setGFAccessionNumber(value);\n    } else if (featureName.equals(GF_IDENTIFICATION)) {\n        stockholmStructure.getFileAnnotation().setGFIdentification(value);\n    } else if (featureName.equals(GF_DB_REFERENCE)) {\n        stockholmStructure.getFileAnnotation().addDBReference(value);\n    } else if (featureName.equals(GF_DEFINITION)) {\n        stockholmStructure.getFileAnnotation().setGFDefinition(value);\n    } else if (featureName.equals(GF_AUTHOR)) {\n        stockholmStructure.getFileAnnotation().setGFAuthors(value);\n    } else if (featureName.equals(GF_ALIGNMENT_METHOD)) {\n        stockholmStructure.getFileAnnotation().setAlignmentMethod(value);\n    } else if (featureName.equals(GF_BUILD_METHOD)) {\n        stockholmStructure.getFileAnnotation().addGFBuildMethod(value);\n    } else if (featureName.equals(GF_SEARCH_METHOD)) {\n        stockholmStructure.getFileAnnotation().setGFSearchMethod(value);\n    } else if (featureName.equals(GF_SOURCE_SEED)) {\n        stockholmStructure.getFileAnnotation().setGFSourceSeed(value);\n    } else if (featureName.equals(GF_SOURCE_STRUCTURE)) {\n        stockholmStructure.getFileAnnotation().setGFSourceStructure(value);\n    } else if (featureName.equals(GF_GATHERING_THRESHOLD)) {\n        stockholmStructure.getFileAnnotation().setGFGatheringThreshs(value);\n    } else if (featureName.equals(GF_TRUSTED_CUTOFF)) {\n        stockholmStructure.getFileAnnotation().setGFTrustedCutoffs(value);\n    } else if (featureName.equals(GF_NOISE_CUTOFF)) {\n        stockholmStructure.getFileAnnotation().setGFNoiseCutoffs(value);\n    } else if (featureName.equals(GF_TYPE_FIELD)) {\n        stockholmStructure.getFileAnnotation().setGFTypeField(value);\n    } else if (featureName.equals(GF_PREVIOUS_IDS)) {\n        stockholmStructure.getFileAnnotation().setGFPreviousIDs(value);\n    } else if (featureName.equals(GF_SEQUENCE)) {\n        // status = STATUS_IN_SEQUENCE;\n        stockholmStructure.getFileAnnotation().setGFNumSequences(value);\n    } else if (featureName.equals(GF_DB_COMMENT)) {\n        stockholmStructure.getFileAnnotation().setGFDBComment(value);\n        // } else if (featureName.equals(GF_DB_REFERENCE)) {\n        // stockholmStructure.getFileAnnotation().addDBReference(value);\n    } else if (featureName.equals(GF_REFERENCE_COMMENT)) {\n        stockholmStructure.getFileAnnotation().setGFRefComment(value);\n    } else if (featureName.equals(GF_REFERENCE_NUMBER)) {\n        StockholmFileAnnotationReference reference = new StockholmFileAnnotationReference();\n        stockholmStructure.getFileAnnotation().getReferences().add(reference);\n    } else if (featureName.equals(GF_REFERENCE_MEDLINE)) {\n        stockholmStructure.getFileAnnotation().getReferences().lastElement().setRefMedline(value);\n    } else if (featureName.equals(GF_REFERENCE_TITLE)) {\n        stockholmStructure.getFileAnnotation().getReferences().lastElement().addToRefTitle(value);\n    } else if (featureName.equals(GF_REFERENCE_AUTHOR)) {\n        stockholmStructure.getFileAnnotation().getReferences().lastElement().addToRefAuthor(value);\n    } else if (featureName.equals(GF_REFERENCE_LOCALTION)) {\n        stockholmStructure.getFileAnnotation().getReferences().lastElement().setRefLocation(value);\n    } else if (featureName.equals(GF_KEYWORDS)) {\n        stockholmStructure.getFileAnnotation().setGFKeywords(value);\n    } else if (featureName.equals(GF_COMMENT)) {\n        stockholmStructure.getFileAnnotation().addToGFComment(value);\n    } else if (featureName.equals(GF_PFAM_ACCESSION)) {\n        stockholmStructure.getFileAnnotation().setGFPfamAccession(value);\n    } else if (featureName.equals(GF_LOCATION)) {\n        stockholmStructure.getFileAnnotation().setGFLocation(value);\n    } else if (featureName.equals(GF_WIKIPEDIA_LINK)) {\n        stockholmStructure.getFileAnnotation().setGFWikipediaLink(value);\n    } else if (featureName.equals(GF_CLAN)) {\n        stockholmStructure.getFileAnnotation().setGFClan(value);\n    } else if (featureName.equals(GF_MEMBERSHIP)) {\n        stockholmStructure.getFileAnnotation().setGFMembership(value);\n    } else if (featureName.equals(GF_NEW_HAMPSHIRE)) {\n        stockholmStructure.getFileAnnotation().addGFNewHampshire(value);\n    } else if (featureName.equals(GF_TREE_ID)) {\n        stockholmStructure.getFileAnnotation().addGFTreeID(value);\n    } else if (featureName.equals(GF_FALSE_DISCOVERY_RATE)) {\n        stockholmStructure.getFileAnnotation().addGFFalseDiscoveryRate(value);\n    } else {\n        // unknown feature\n        logger.warn(\"Unknown File Feature [{}].\\nPlease contact the Biojava team.\", featureName);\n    }\n}","repo_id":"9","comment":"/**\n * #=GF &lt;feature&gt; &lt;Generic per-File annotation, free text&gt;\n *\n * @param featureName\n * @param value\n *            the line to be parsed\n */\n","repo_name":"biojava-master/","id":20,"method_signature":"void handleFileAnnotation(String, String)"}