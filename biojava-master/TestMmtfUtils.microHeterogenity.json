{"callee_method_names":["Structure.getChains","Structure.getChains","Structure.getChains","Chain.getAtomGroups","Chain.getAtomGroups","Chain.getAtoms","Set<Atom>.addAll","Chain.getAtoms","Chain.getAltLocs","Set<Atom>.addAll","Structure.getChains","Structure.getChains","Structure.getChains","Structure.getChains","Chain.getAtomGroups","Chain.getAtomGroups","Chain.getAtoms","Set<Atom>.addAll","Chain.getAtoms","Chain.getAltLocs","Set<Atom>.addAll","Set<Atom>.size","List<Atom>.size","List<Atom>.size","Set<Atom>.size","Set<Atom>.size"],"method_name":"TestMmtfUtils.microHeterogenity","method_implementation":"{\n    setUpBioJava();\n    Structure inputStructure = StructureIO.getStructure(\"4ck4\");\n    // Count the number of groups\n    Group before = inputStructure.getChains().get(0).getAtomGroup(17);\n    assertTrue(inputStructure.getChains().get(0).getAtomGroup(17).hasAltLoc());\n    List<Atom> totalAtoms = new ArrayList<>(getAllAtoms(inputStructure));\n    int totGroups = 0;\n    int totAtomsCounter = 0;\n    Set<Atom> totAtoms = new HashSet<>();\n    for (Chain c : inputStructure.getChains()) {\n        totGroups += c.getAtomGroups().size();\n        for (Group g : c.getAtomGroups()) {\n            totAtomsCounter += g.getAtoms().size();\n            totAtoms.addAll(g.getAtoms());\n            for (Group alt : g.getAltLocs()) {\n                totAtomsCounter += alt.getAtoms().size();\n                totAtoms.addAll(alt.getAtoms());\n            }\n        }\n    }\n    // Now \"fix\" the microheterogenity\n    MmtfUtils.fixMicroheterogenity(inputStructure);\n    assertEquals(before, inputStructure.getChains().get(0).getAtomGroup(17));\n    assertFalse(inputStructure.getChains().get(0).getAtomGroup(17).hasAltLoc());\n    assertFalse(inputStructure.getChains().get(0).getAtomGroup(18).hasAltLoc());\n    int totGroupsAfter = 0;\n    int totAtomsCounterAfter = 0;\n    Set<Atom> totAtomsAfter = new HashSet<>();\n    for (Chain c : inputStructure.getChains()) {\n        totGroupsAfter += c.getAtomGroups().size();\n        for (Group g : c.getAtomGroups()) {\n            totAtomsCounterAfter += g.getAtoms().size();\n            totAtomsAfter.addAll(g.getAtoms());\n            for (Group alt : g.getAltLocs()) {\n                totAtomsAfter.addAll(alt.getAtoms());\n                totAtomsCounterAfter += alt.getAtoms().size();\n            }\n        }\n    }\n    // Find the atoms after the fix.\n    List<Atom> totalAtomsAfter = new ArrayList<>(getAllAtoms(inputStructure));\n    // Get all of the duplicate atoms\n    Set<Atom> duplicates = findDuplicates(totalAtomsAfter);\n    for (Atom a : duplicates) {\n        System.out.println(a);\n    }\n    // There should be no duplicates\n    assertEquals(duplicates.size(), 0);\n    assertEquals(totalAtoms.size(), totalAtomsAfter.size());\n    // Check there are two more groups afterwards\n    assertEquals(totGroupsAfter - 2, totGroups);\n    // Check there are no more atoms afterwards\n    assertEquals(totAtomsAfter.size(), totAtoms.size());\n    // Check the counter are the same too\n    assertEquals(totAtomsCounterAfter, totAtomsCounter);\n}","repo_id":"9","comment":"/**\n * Integration test to see that the microheterogenity is being dealt with correctly.\n *\n * @throws IOException\n * @throws StructureException\n */\n","repo_name":"biojava-master/","id":2246,"method_signature":"void microHeterogenity()"}