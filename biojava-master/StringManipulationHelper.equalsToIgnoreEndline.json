{"callee_method_names":["Scanner.hasNextLine","Scanner.nextLine","Scanner.hasNextLine","Scanner.nextLine","String.equals","Scanner.hasNextLine"],"method_name":"StringManipulationHelper.equalsToIgnoreEndline","method_implementation":"{\n    if (expected == null && actual == null) {\n        return true;\n    }\n    if (expected != null ^ actual != null) {\n        return false;\n    }\n    Scanner scanner1 = new Scanner(expected);\n    Scanner scanner2 = new Scanner(actual);\n    String line1, line2;\n    while (scanner1.hasNextLine()) {\n        line1 = scanner1.nextLine();\n        if (scanner2.hasNextLine()) {\n            line2 = scanner2.nextLine();\n            if (!line1.equals(line2)) {\n                closeScanners(scanner1, scanner2);\n                return false;\n            }\n        } else {\n            closeScanners(scanner1, scanner2);\n            return false;\n        }\n    }\n    if (scanner2.hasNextLine()) {\n        closeScanners(scanner1, scanner2);\n        return false;\n    }\n    closeScanners(scanner1, scanner2);\n    return true;\n}","repo_id":"9","comment":"/**\n * Compares two strings in a case-sensitive manner for equality, line by line, ignoring any difference\n * of end line delimiters contained within the 2 Strings.\n * <br/>\n * This method should\n * be used if and only if two Strings are considered identical when all nodes\n * are identical including their relative order. Generally useful when\n * asserting identity of <b>automatically regenerated<\/b> XML or PDB.\n *\n * @param expected\n * @param actual\n */\n","repo_name":"biojava-master/","id":2619,"method_signature":"boolean equalsToIgnoreEndline(String, String)"}