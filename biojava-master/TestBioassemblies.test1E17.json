{"callee_method_ids":[641],"callee_method_names":["AtomCache.setFiletype","List<Structure>.size","List<Structure>.size","List<Structure>.get","List<Structure>.get","List<Structure>.get","List<Structure>.get"],"method_name":"TestBioassemblies.test1E17","method_implementation":"{\n    AtomCache prevAtomCache = StructureIO.getAtomCache();\n    AtomCache cache = new AtomCache();\n    cache.setFiletype(StructureFiletype.CIF);\n    StructureIO.setAtomCache(cache);\n    List<Structure> multiModelBioAssemblies = StructureIO.getBiologicalAssemblies(\"1E17\", true);\n    List<Structure> flattenedBioAssemblies = StructureIO.getBiologicalAssemblies(\"1E17\", false);\n    // 1 bioassembly in this case\n    assertEquals(1, multiModelBioAssemblies.size());\n    assertEquals(1, flattenedBioAssemblies.size());\n    // checking that we have 1 model only (the bioassemblies creation wipes out all models)\n    assertEquals(1, multiModelBioAssemblies.get(0).nrModels());\n    assertEquals(1, flattenedBioAssemblies.get(0).nrModels());\n    // the bioassembly is a monomer\n    assertEquals(1, multiModelBioAssemblies.get(0).getPolyChains().size());\n    assertEquals(1, flattenedBioAssemblies.get(0).getPolyChains().size());\n    StructureIO.setAtomCache(prevAtomCache);\n}","repo_id":"9","comment":"/**\n * A test for an NMR structure\n * @throws StructureException\n * @throws IOException\n */\n","repo_name":"biojava-master/","id":154,"method_signature":"void test1E17()"}