{"callee_method_ids":[5,4],"callee_method_names":["SimpleGapPenalty.setOpenPenalty","SimpleGapPenalty.setExtensionPenalty"],"method_name":"TestDNAAlignment.testDNAPairwiseAlignmentWithMixedCompoundSets","method_implementation":"{\n    DNASequence target = new DNASequence(\"ACTGACGTGTAGCTGACTGA\", DNACompoundSet.getDNACompoundSet());\n    DNASequence query = new DNASequence(\"ACTGACGTGTAGCTGACTGT\", AmbiguityDNACompoundSet.getDNACompoundSet());\n    SubstitutionMatrix<NucleotideCompound> matrix = SubstitutionMatrixHelper.getNuc4_4();\n    SimpleGapPenalty gapP = new SimpleGapPenalty();\n    gapP.setOpenPenalty((short) 5);\n    gapP.setExtensionPenalty((short) 2);\n    try {\n        @SuppressWarnings(\"unused\")\n        SequencePair<DNASequence, NucleotideCompound> psa = Alignments.getPairwiseAlignment(query, target, PairwiseSequenceAlignerType.LOCAL, gapP, matrix);\n        Assert.fail(\"Alignments.getPairwiseAlignment() expected exception with differing compound sets\");\n    } catch (IllegalArgumentException ex) {\n        // expected exception\n    }\n}","repo_id":"9","comment":"/**\n * @author brandstaetter\n */\n","repo_name":"biojava-master/","id":124,"method_signature":"void testDNAPairwiseAlignmentWithMixedCompoundSets()"}