{"callee_method_ids":[970],"callee_method_names":["Structure.getPDBHeader","Structure.getPDBHeader","Logger.info","List<Structure>.add","Structure.getPDBHeader","Structure.getPDBHeader","List<BiologicalAssemblyTransformation>.size","Logger.info","BiologicalAssemblyBuilder.rebuildQuaternaryStructure","List<Structure>.add"],"method_name":"AtomCache.getBiologicalAssemblies","method_implementation":"{\n    List<Structure> assemblies = new ArrayList<>();\n    boolean prevIsParseBioAssembly = getFileParsingParams().isParseBioAssembly();\n    if (!getFileParsingParams().isParseBioAssembly()) {\n        getFileParsingParams().setParseBioAssembly(true);\n    }\n    Structure asymUnit = getStructureForPdbId(pdbId);\n    getFileParsingParams().setParseBioAssembly(prevIsParseBioAssembly);\n    if (asymUnit.getPDBHeader() == null || asymUnit.getPDBHeader().getBioAssemblies() == null) {\n        logger.info(\"No bioassembly information found for {}, returning asymmetric unit as the only biological assembly\", pdbId);\n        assemblies.add(asymUnit);\n        return assemblies;\n    }\n    for (int bioAssemblyId : asymUnit.getPDBHeader().getBioAssemblies().keySet()) {\n        List<BiologicalAssemblyTransformation> transformations = asymUnit.getPDBHeader().getBioAssemblies().get(bioAssemblyId).getTransforms();\n        if (transformations == null || transformations.size() == 0) {\n            logger.info(\"Could not load transformations to recreate biological assembly id {} of {}. Assembly \" + \"id will be missing in biological assemblies.\", bioAssemblyId, pdbId);\n            continue;\n        }\n        BiologicalAssemblyBuilder builder = new BiologicalAssemblyBuilder();\n        // if we use mmcif or mmtf, then we need to pass useAsymIds=true\n        boolean useAsymIds = false;\n        if (filetype == StructureFiletype.CIF || filetype == StructureFiletype.BCIF || filetype == StructureFiletype.MMTF) {\n            useAsymIds = true;\n        }\n        Structure s = builder.rebuildQuaternaryStructure(asymUnit, transformations, useAsymIds, multiModel);\n        assemblies.add(s);\n    }\n    return assemblies;\n}","repo_id":"9","comment":"/**\n * Returns all biological assemblies for given PDB id.\n * @param pdbId\n * @param multiModel if true the output Structure will be a multi-model one with one transformId per model,\n * if false the outputStructure will be as the original with added chains with renamed asymIds (in the form originalAsymId_transformId and originalAuthId_transformId).\n * @return\n * @throws StructureException\n * @throws IOException\n * @since 5.0\n */\n","repo_name":"biojava-master/","id":624,"method_signature":"List<Structure> getBiologicalAssemblies(String, boolean)"}