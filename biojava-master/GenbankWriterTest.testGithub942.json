{"callee_method_ids":[3106,3106,3108,3108],"callee_method_names":["ByteArrayOutputStream.close","ByteArrayOutputStream.toByteArray","DNASequence.getOriginalHeader","DNASequence.getOriginalHeader","DNASequence.getLength","DNASequence.getLength","DNASequence.getAccession","DNASequence.getAccession","DNASequence.getAccession","DNASequence.getAccession","DNASequence.getDescription","DNASequence.getDescription","DNASequence.getFeatures","DNASequence.getFeatures","List<FeatureInterface<AbstractSequence<NucleotideCompound>, NucleotideCompound>>.size","List<FeatureInterface<AbstractSequence<NucleotideCompound>, NucleotideCompound>>.get","FeatureInterface<AbstractSequence<NucleotideCompound>, NucleotideCompound>.getLocations","Location.getSubLocations","FeatureInterface<AbstractSequence<NucleotideCompound>, NucleotideCompound>.getQualifiers","List<FeatureInterface<AbstractSequence<NucleotideCompound>, NucleotideCompound>>.get","FeatureInterface<AbstractSequence<NucleotideCompound>, NucleotideCompound>.getLocations","Location.getSubLocations","FeatureInterface<AbstractSequence<NucleotideCompound>, NucleotideCompound>.getQualifiers","FeatureInterface<AbstractSequence<NucleotideCompound>, NucleotideCompound>.getType","FeatureInterface<AbstractSequence<NucleotideCompound>, NucleotideCompound>.getType","Location.getStart","Location.getStart","Location.getEnd","Location.getEnd","Location.getStrand","Location.getStrand","List<Location>.size","List<Location>.size","List<Location>.size","List<Location>.get","List<Location>.get","List<Location>.get","List<Location>.get","List<Location>.get","List<Location>.get","Map<String, List<Qualifier>>.size","Map<String, List<Qualifier>>.size","Map<String, List<Qualifier>>.keySet","Map<String, List<Qualifier>>.get","Map<String, List<Qualifier>>.get","List<Qualifier>.size","List<Qualifier>.size","List<Qualifier>.size","List<Qualifier>.get","List<Qualifier>.get","List<Qualifier>.get","DBReferenceInfo.getDatabase","DBReferenceInfo.getDatabase","DBReferenceInfo.getId","DBReferenceInfo.getId","List<Qualifier>.get","List<Qualifier>.get","DNASequence.getSequenceAsString","DNASequence.getSequenceAsString"],"method_name":"GenbankWriterTest.testGithub942","method_implementation":"{\n    // Important information is lost when reading and writing a\n    // GenBank file through GenbankReaderHelper & GenbankWriterHelper\n    // First read the sample GenBank file from\n    // https://www.ncbi.nlm.nih.gov/Sitemap/samplerecord.html using the\n    // GenbankReaderHelper\n    InputStream inStream = GenbankWriterTest.class.getResourceAsStream(\"/NM_000266.gb\");\n    DNASequence sequence = GenbankReaderHelper.readGenbankDNASequence(inStream).values().iterator().next();\n    // Then write sequence back to a file using the GenbankWriterHelper\n    ByteArrayOutputStream fragwriter = new ByteArrayOutputStream();\n    GenbankWriterHelper.writeNucleotideSequenceOriginal(fragwriter, Arrays.asList(sequence));\n    fragwriter.close();\n    // Test no important information is lost\n    InputStream readerInputStream = new ByteArrayInputStream(fragwriter.toByteArray());\n    DNASequence newSequence = GenbankReaderHelper.readGenbankDNASequence(readerInputStream).values().iterator().next();\n    //System.out.println(fragwriter.toString().replaceAll(\"\\r\\n\", \"\\n\"));\n    assertEquals(\"getOriginalHeader()\", sequence.getOriginalHeader(), newSequence.getOriginalHeader());\n    assertEquals(\"getLength()\", sequence.getLength(), newSequence.getLength());\n    assertEquals(\"getAccession().getID()\", sequence.getAccession().getID(), newSequence.getAccession().getID());\n    assertEquals(\"getAccession().getVersion()\", sequence.getAccession().getVersion(), newSequence.getAccession().getVersion());\n    assertEquals(\"getDescription()\", sequence.getDescription(), newSequence.getDescription());\n    //assertEquals(\"getSource()\", sequence.getSource(), newSequence.getSource());\n    //assertEquals(\"getDNAType()\", sequence.getDNAType(), newSequence.getDNAType());\n    //assertEquals(\"getTaxonomy()\", sequence.getTaxonomy(), newSequence.getTaxonomy());\n    //assertEquals(\"getReferences()\", sequence.getReferences(), newSequence.getReferences());\n    //assertEquals(\"getComments()\", sequence.getComments(), newSequence.getComments());\n    //assertEquals(\"getNotesList()\", sequence.getNotesList(), newSequence.getNotesList());\n    //Assuming the features will be in the same order\n    List<FeatureInterface<AbstractSequence<NucleotideCompound>, NucleotideCompound>> features = sequence.getFeatures();\n    List<FeatureInterface<AbstractSequence<NucleotideCompound>, NucleotideCompound>> newFeatures = newSequence.getFeatures();\n    //feature locations and qualifiers\n    for (int i = 0; i < features.size(); i++) {\n        FeatureInterface<AbstractSequence<NucleotideCompound>, NucleotideCompound> feature = features.get(i);\n        Location location = feature.getLocations();\n        List<Location> subLocations = location.getSubLocations();\n        Map<String, List<Qualifier>> qualifiers = feature.getQualifiers();\n        FeatureInterface<AbstractSequence<NucleotideCompound>, NucleotideCompound> newFeature = newFeatures.get(i);\n        Location newLocation = newFeature.getLocations();\n        List<Location> newSubLocations = newLocation.getSubLocations();\n        Map<String, List<Qualifier>> newQualifiers = newFeature.getQualifiers();\n        assertEquals(\"feature, getType()\", feature.getType(), newFeature.getType());\n        assertEquals(\"feature, Location start\", location.getStart(), newLocation.getStart());\n        assertEquals(\"feature, Location end\", location.getEnd(), newLocation.getEnd());\n        assertEquals(\"feature, Location strand\", location.getStrand(), newLocation.getStrand());\n        assertEquals(\"feature, sublocations\", subLocations.size(), newSubLocations.size());\n        for (int j = 0; j < subLocations.size(); j++) {\n            assertEquals(\"SubLocations, start\", subLocations.get(j).getStart(), newSubLocations.get(j).getStart());\n            assertEquals(\"SubLocations, end\", subLocations.get(j).getEnd(), newSubLocations.get(j).getEnd());\n            assertEquals(\"SubLocations, strand\", subLocations.get(j).getStrand(), newSubLocations.get(j).getStrand());\n        }\n        assertEquals(\"getQualifiers()\", qualifiers.size(), newQualifiers.size());\n        for (String qualifierType : qualifiers.keySet()) {\n            List<Qualifier> qualifier = new ArrayList<Qualifier>(qualifiers.get(qualifierType));\n            List<Qualifier> newQualifier = new ArrayList<Qualifier>(newQualifiers.get(qualifierType));\n            assertEquals(\"getQualifiers()\", qualifier.size(), newQualifier.size());\n            for (int k = 0; k < qualifier.size(); k++) {\n                if (qualifier.get(k) instanceof DBReferenceInfo) {\n                    DBReferenceInfo dbxref = (DBReferenceInfo) qualifier.get(k);\n                    DBReferenceInfo newDbxref = (DBReferenceInfo) newQualifier.get(k);\n                    assertEquals(\"getQualifiers() DBReferenceInfo\", dbxref.getDatabase(), newDbxref.getDatabase());\n                    assertEquals(\"getQualifiers() DBReferenceInfo\", dbxref.getId(), newDbxref.getId());\n                } else {\n                    assertEquals(\"getQualifiers()\", qualifier.get(k).getValue(), newQualifier.get(k).getValue());\n                }\n            }\n        }\n    }\n    assertEquals(\"getSequenceAsString()\", sequence.getSequenceAsString(), newSequence.getSequenceAsString());\n}","repo_id":"9","comment":"/**\n * Going from GenBank file -> DNASequence object -> GenBank file looses information\n * https://github.com/biojava/biojava/issues/942\n */\n","repo_name":"biojava-master/","id":3223,"method_signature":"void testGithub942()"}