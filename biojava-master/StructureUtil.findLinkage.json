{"callee_method_names":["Group.getAtom","Group.getAtom","Atom.hasBond","Atom.getElement","Atom.getElement","Atom.getElement","Atom.getElement","Atom[].getElement","Atom[].getElement"],"method_name":"StructureUtil.findLinkage","method_implementation":"{\n    Atom[] ret = new Atom[2];\n    ret[0] = group1.getAtom(nameOfAtomOnGroup1);\n    ret[1] = group2.getAtom(nameOfAtomOnGroup2);\n    if (ret[0] == null || ret[1] == null) {\n        return null;\n    }\n    Atom a1 = ret[0];\n    Atom a2 = ret[1];\n    boolean hasBond = a1.hasBond(a2);\n    if (hasBond) {\n        return ret;\n    }\n    // is it a metal ?\n    if (a1.getElement().isMetal() || a2.getElement().isMetal()) {\n        MetalBondDistance defined = getMetalDistanceCutoff(a1.getElement().name(), a2.getElement().name());\n        if (defined != null) {\n            if (hasMetalBond(a1, a2, defined))\n                return ret;\n            else\n                return null;\n        }\n    }\n    // not a metal\n    double distance = Calc.getDistance(a1, a2);\n    float radiusOfAtom1 = ret[0].getElement().getCovalentRadius();\n    float radiusOfAtom2 = ret[1].getElement().getCovalentRadius();\n    if (Math.abs(distance - radiusOfAtom1 - radiusOfAtom2) > bondLengthTolerance) {\n        return null;\n    }\n    return ret;\n}","repo_id":"9","comment":"/**\n * Find a linkage between two groups within tolerance of bond length.\n * @param group1 the first {@link Group}.\n * @param group2 the second {@link Group}.\n * @param nameOfAtomOnGroup1 atom name of the first group.\n * @param nameOfAtomOnGroup2 atom name of the second group.\n * @param bondLengthTolerance bond length error tolerance.\n * @return an array of two Atoms that form bond between each other\n *  if found; null, otherwise.\n */\n","repo_name":"biojava-master/","id":282,"method_signature":"Atom[] findLinkage(Group, Group, String, String, double)"}