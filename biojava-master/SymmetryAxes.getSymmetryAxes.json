{"callee_method_ids":[2106,2107,2108,2107],"callee_method_names":["List<Axis>.get","Axis.getOperator","Matrix4d.invert","Matrix4d.mul","Matrix4d.mul","Axis.getOrder","Axis.getSymmType","List<Axis>.add","Matrix4d.mul","Axis.getOrder","Matrix4d.mul"],"method_name":"SymmetryAxes.getSymmetryAxes","method_implementation":"{\n    if (level >= getNumLevels()) {\n        return;\n    }\n    Axis elem = axes.get(level);\n    Matrix4d elemOp = elem.getOperator();\n    // Current axis:\n    // elementary maps B -> A\n    // prior maps I -> A and J -> B\n    // want J -> I = J -> B -> A <- I= inv(prior) * elementary * prior\n    Matrix4d currAxisOp = new Matrix4d(prior);\n    currAxisOp.invert();\n    currAxisOp.mul(elemOp);\n    currAxisOp.mul(prior);\n    Axis currAxis = new Axis(currAxisOp, elem.getOrder(), elem.getSymmType(), level, firstRepeat);\n    symmAxes.add(currAxis);\n    //Remember that all degrees are at least 2\n    getSymmetryAxes(symmAxes, prior, level + 1, firstRepeat);\n    //New prior is elementary^d*prior\n    Matrix4d newPrior = new Matrix4d(elemOp);\n    newPrior.mul(prior);\n    int childSize = getNumRepeats(level + 1);\n    getSymmetryAxes(symmAxes, newPrior, level + 1, firstRepeat + childSize);\n    for (int d = 2; d < elem.getOrder(); d++) {\n        newPrior.mul(elemOp, newPrior);\n        getSymmetryAxes(symmAxes, newPrior, level + 1, firstRepeat + childSize * d);\n    }\n}","repo_id":"9","comment":"/**\n * Recursive helper\n * @param symmAxes output list\n * @param prior transformation aligning the first repeat of this axis with the first overall\n * @param level current level\n */\n","repo_name":"biojava-master/","id":2102,"method_signature":"void getSymmetryAxes(List, Matrix4d, int, int)"}