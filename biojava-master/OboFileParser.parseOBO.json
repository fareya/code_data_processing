{"callee_method_names":["BufferedReader.readLine","String.length","String.charAt","String.charAt","String.length","String.substring","String.length","String.length","String.length","String.length","String.charAt","String.charAt","String.charAt","String.charAt","String.charAt","String.substring","String.substring","String.length"],"method_name":"OboFileParser.parseOBO","method_implementation":"{\n    String line;\n    String currentStanza;\n    while ((line = oboFile.readLine()) != null) {\n        if (line.length() == 0)\n            continue;\n        if (line.charAt(0) == '[') {\n            if (line.charAt(line.length() - 1) != ']')\n                throw new IOException(\"Unclosed stanza: \\\"\" + line + \"\\\"\");\n            String stanzaname = line.substring(1, line.length() - 1);\n            if (stanzaname.length() < 1)\n                throw new IOException(\"Empty stanza: \\\"\" + line + \"\\\"\");\n            currentStanza = stanzaname;\n            //logger.info(\"stanza: {}\", currentStanza);\n            triggerNewStanza(currentStanza);\n        } else {\n            // a content line\n            SOPair pair;\n            pair = unescape(line, ':', 0, true);\n            //logger.info(pair);\n            String name = pair.str;\n            int lineEnd = findUnescaped(line, '!', 0, line.length(), true);\n            if (lineEnd == -1)\n                lineEnd = line.length();\n            // find nested values\n            NestedValue nv = null;\n            int trailingStartIndex = -1;\n            int trailingEndIndex = -1;\n            for (int i = lineEnd - 1; i >= 0; i--) {\n                if (Character.isWhitespace(line.charAt(i))) {\n                    // keep going until we see non-whitespace\n                } else if (line.charAt(i) == '}') {\n                    // if the first thing we see is a closing brace,\n                    // we have a trailing modifier\n                    if (i >= 1 && line.charAt(i - 1) == '\\\\')\n                        continue;\n                    trailingEndIndex = i;\n                    break;\n                } else\n                    break;\n            }\n            if (trailingEndIndex != -1) {\n                for (int i = trailingEndIndex - 1; i >= 0; i--) {\n                    if (line.charAt(i) == '{') {\n                        if (i >= 1 && line.charAt(i - 1) == '\\\\')\n                            continue;\n                        trailingStartIndex = i + 1;\n                    }\n                }\n            }\n            int valueStopIndex;\n            if (trailingStartIndex == -1 && trailingEndIndex != -1)\n                throw new IOException(\"Unterminated trailing modifier. \" + line);\n            else if (trailingStartIndex != -1) {\n                valueStopIndex = trailingStartIndex - 1;\n                String trailing = line.substring(trailingStartIndex, trailingEndIndex).trim();\n                nv = new NestedValue();\n                getNestedValue(nv, trailing, 0);\n            } else\n                valueStopIndex = lineEnd;\n            String value = line.substring(pair.index + 1, valueStopIndex).trim();\n            /*\n\t\t\t\t * if (nv != null) logger.warn(\"nv = \"+nv+\", value =\n\t\t\t\t * |\"+value+\"|\");\n\t\t\t\t */\n            if (value.length() == 0)\n                throw new IOException(\"Tag found with no value \" + line);\n            if (isSynonym(name)) {\n                Synonym synonym = parseSynonym(name, value);\n                triggerNewSynonym(synonym);\n            } else {\n                //logger.info(\"new key:\" + name + \" \" + value);\n                triggerNewKey(name, value);\n            }\n            //logger.info(\"parsed key: \" + name +\" value: \" + value + \" nv: \" + nv);\n        }\n    }\n}","repo_id":"9","comment":"/**\n * parse an ontology file\n *\n * @param oboFile\n * @throws IOException\n * @throws IOException\n */\n","repo_name":"biojava-master/","id":336,"method_signature":"void parseOBO(BufferedReader)"}