{"callee_method_ids":[3077,3077,3077,3077,3077,2637,2686,2634],"callee_method_names":["ArrayList.size","ArrayList.get","CDSSequence.getCodingSequence","String.substring","String.length","String.substring","String.length","ArrayList.size","ArrayList.get","CDSSequence.getCodingSequence","String.substring","CDSSequence.getCodingSequence","String.substring","String.substring","String.length","String.substring","String.length","ArrayList.size","ArrayList.get","CDSSequence.getCodingSequence","String.substring","CDSSequence.getCodingSequence","String.substring","String.toUpperCase","Logger.error","Enumeration<JarEntry>.getMessage","DNASequence.getRNASequence","RNASequence.getProteinSequence","ProteinSequence.setAccession","CDSSequence.getAccession","ProteinSequence.setParentDNASequence","CDSSequence.getLength","ArrayList<ProteinSequence>.add"],"method_name":"TranscriptSequence.getProteinCDSSequences","method_implementation":"{\n    ArrayList<ProteinSequence> proteinSequenceList = new ArrayList<ProteinSequence>();\n    for (int i = 0; i < cdsSequenceList.size(); i++) {\n        CDSSequence cdsSequence = cdsSequenceList.get(i);\n        String codingSequence = cdsSequence.getCodingSequence();\n        //          logger.debug(\"CDS {} {} = {}\", getStrand(), cdsSequence.getPhase(), codingSequence);\n        if (this.getStrand() == Strand.NEGATIVE) {\n            if (cdsSequence.phase == 1) {\n                codingSequence = codingSequence.substring(1, codingSequence.length());\n            } else if (cdsSequence.phase == 2) {\n                codingSequence = codingSequence.substring(2, codingSequence.length());\n            }\n            if (i < cdsSequenceList.size() - 1) {\n                CDSSequence nextCDSSequence = cdsSequenceList.get(i + 1);\n                if (nextCDSSequence.phase == 1) {\n                    String nextCodingSequence = nextCDSSequence.getCodingSequence();\n                    codingSequence = codingSequence + nextCodingSequence.substring(0, 1);\n                } else if (nextCDSSequence.phase == 2) {\n                    String nextCodingSequence = nextCDSSequence.getCodingSequence();\n                    codingSequence = codingSequence + nextCodingSequence.substring(0, 2);\n                }\n            }\n        } else {\n            if (cdsSequence.phase == 1) {\n                codingSequence = codingSequence.substring(1, codingSequence.length());\n            } else if (cdsSequence.phase == 2) {\n                codingSequence = codingSequence.substring(2, codingSequence.length());\n            }\n            if (i < cdsSequenceList.size() - 1) {\n                CDSSequence nextCDSSequence = cdsSequenceList.get(i + 1);\n                if (nextCDSSequence.phase == 1) {\n                    String nextCodingSequence = nextCDSSequence.getCodingSequence();\n                    codingSequence = codingSequence + nextCodingSequence.substring(0, 1);\n                } else if (nextCDSSequence.phase == 2) {\n                    String nextCodingSequence = nextCDSSequence.getCodingSequence();\n                    codingSequence = codingSequence + nextCodingSequence.substring(0, 2);\n                }\n            }\n        }\n        //    logger.debug(\"Coding Sequence: {}\", codingSequence);\n        DNASequence dnaCodingSequence = null;\n        try {\n            dnaCodingSequence = new DNASequence(codingSequence.toUpperCase());\n        } catch (CompoundNotFoundException e) {\n            // if I understand this should not happen, please correct if I'm wrong - JD 2014-10-24\n            logger.error(\"Could not create DNA coding sequence, {}. This is most likely a bug.\", e.getMessage());\n        }\n        RNASequence rnaCodingSequence = dnaCodingSequence.getRNASequence(TranscriptionEngine.getDefault());\n        ProteinSequence proteinSequence = rnaCodingSequence.getProteinSequence(TranscriptionEngine.getDefault());\n        proteinSequence.setAccession(new AccessionID(cdsSequence.getAccession().getID()));\n        proteinSequence.setParentDNASequence(cdsSequence, 1, cdsSequence.getLength());\n        proteinSequenceList.add(proteinSequence);\n    }\n    return proteinSequenceList;\n}","repo_id":"9","comment":"/**\n * Return a list of protein sequences based on each CDS sequence\n * where the phase shift between two CDS sequences is assigned to the\n * CDS sequence that starts the triplet. This can be used to map\n * a CDS/exon region of a protein sequence back to the DNA sequence\n * If you have a protein sequence and a predicted gene you can take the\n * predict CDS protein sequences and align back to the protein sequence.\n * If you have errors in mapping the predicted protein CDS regions to\n * an the known protein sequence then you can identify possible errors\n * in the prediction\n *\n * @return\n */\n","repo_name":"biojava-master/","id":3170,"method_signature":"ArrayList<ProteinSequence> getProteinCDSSequences()"}