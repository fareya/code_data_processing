{"callee_method_names":["InputStream.close","File.getName","String.endsWith","String.endsWith","ZipFile.entries","Enumeration<JarEntry>.hasMoreElements","Enumeration<JarEntry>.nextElement","ZipFile.getInputStream","String.endsWith","JarFile.entries","Enumeration<JarEntry>.hasMoreElements","Enumeration<JarEntry>.nextElement","JarFile.getInputStream","String.endsWith"],"method_name":"InputStreamProvider.getInputStream","method_implementation":"{\n    // use the magic numbers to determine the compression type,\n    // use file extension only as 2nd choice\n    int magic = 0;\n    InputStream test = getInputStreamFromFile(f);\n    magic = getMagicNumber(test);\n    test.close();\n    InputStream inputStream = null;\n    String fileName = f.getName();\n    if (magic == UncompressInputStream.LZW_MAGIC) {\n        // a Z compressed file\n        return openCompressedFile(f);\n    } else if (magic == GZIP_MAGIC) {\n        return openGZIPFile(f);\n    } else if (fileName.endsWith(\".gz\")) {\n        return openGZIPFile(f);\n    } else if (fileName.endsWith(\".zip\")) {\n        ZipFile zipfile = new ZipFile(f);\n        // stream to first entry is returned ...\n        ZipEntry entry;\n        Enumeration<? extends ZipEntry> e = zipfile.entries();\n        if (e.hasMoreElements()) {\n            entry = e.nextElement();\n            inputStream = zipfile.getInputStream(entry);\n        } else {\n            throw new IOException(\"Zip file has no entries\");\n        }\n    } else if (fileName.endsWith(\".jar\")) {\n        JarFile jarFile = new JarFile(f);\n        // stream to first entry is returned\n        JarEntry entry;\n        Enumeration<JarEntry> e = jarFile.entries();\n        if (e.hasMoreElements()) {\n            entry = e.nextElement();\n            inputStream = jarFile.getInputStream(entry);\n        } else {\n            throw new IOException(\"Jar file has no entries\");\n        }\n    } else if (fileName.endsWith(\".Z\")) {\n        // unix compressed\n        return openCompressedFile(f);\n    } else {\n        // no particular extension found, assume that it is an uncompressed file\n        inputStream = getInputStreamFromFile(f);\n    }\n    return inputStream;\n}","repo_id":"9","comment":"/**\n * Get an InputStream for the file.\n * The caller is responsible for closing the stream or otherwise\n * a resource leak can occur.\n * @param f a File\n * @return an InputStream for the file\n * @throws IOException\n */\n","repo_name":"biojava-master/","id":2626,"method_signature":"InputStream getInputStream(File)"}