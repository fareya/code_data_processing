{"callee_method_names":["PdbxStructOperList.getRowCount","PdbxStructOperList.getMatrix11","PdbxStructOperList.getMatrix12","PdbxStructOperList.getMatrix13","PdbxStructOperList.getMatrix21","PdbxStructOperList.getMatrix22","PdbxStructOperList.getMatrix23","PdbxStructOperList.getMatrix31","PdbxStructOperList.getMatrix32","PdbxStructOperList.getMatrix33","PdbxStructOperList.getVector1","PdbxStructOperList.getVector2","PdbxStructOperList.getVector3","Map<String, Matrix4d>.put","PdbxStructOperList.getId","Logger.warn","PdbxStructOperList.getId","int.getMessage","PdbxStructAssembly.getId","ArrayList<BiologicalAssemblyTransformation>.addAll","ArrayList<BiologicalAssemblyTransformation>.trimToSize"],"method_name":"BiologicalAssemblyBuilder.getBioUnitTransformationList","method_implementation":"{\n    init();\n    // first we populate the list of all operators from pdbx_struct_oper_list so that we can then\n    // get them from getBioUnitTransformationsListUnaryOperators() and getBioUnitTransformationsListBinaryOperators()\n    for (int i = 0; i < pdbxStructOperList.getRowCount(); i++) {\n        try {\n            Matrix4d m = new Matrix4d();\n            m.m00 = pdbxStructOperList.getMatrix11().get(i);\n            m.m01 = pdbxStructOperList.getMatrix12().get(i);\n            m.m02 = pdbxStructOperList.getMatrix13().get(i);\n            m.m10 = pdbxStructOperList.getMatrix21().get(i);\n            m.m11 = pdbxStructOperList.getMatrix22().get(i);\n            m.m12 = pdbxStructOperList.getMatrix23().get(i);\n            m.m20 = pdbxStructOperList.getMatrix31().get(i);\n            m.m21 = pdbxStructOperList.getMatrix32().get(i);\n            m.m22 = pdbxStructOperList.getMatrix33().get(i);\n            m.m03 = pdbxStructOperList.getVector1().get(i);\n            m.m13 = pdbxStructOperList.getVector2().get(i);\n            m.m23 = pdbxStructOperList.getVector3().get(i);\n            m.m30 = 0;\n            m.m31 = 0;\n            m.m32 = 0;\n            m.m33 = 1;\n            allTransformations.put(pdbxStructOperList.getId().get(i), m);\n        } catch (NumberFormatException e) {\n            logger.warn(\"Could not parse a matrix value from pdbx_struct_oper_list for id {}. The operator id will be ignored. Error: {}\", pdbxStructOperList.getId().get(i), e.getMessage());\n        }\n    }\n    String assemblyId = pdbxStructAssembly.getId().get(assemblyIndex);\n    ArrayList<BiologicalAssemblyTransformation> transformations = getBioUnitTransformationsListUnaryOperators(assemblyId, pdbxStructAssemblyGen);\n    transformations.addAll(getBioUnitTransformationsListBinaryOperators(assemblyId, pdbxStructAssemblyGen));\n    transformations.trimToSize();\n    return transformations;\n}","repo_id":"9","comment":"/**\n * Returns a list of transformation matrices for the generation of a macromolecular\n * assembly for the specified assembly Id.\n *\n * @param pdbxStructAssembly\n * @param assemblyIndex\n * @param pdbxStructAssemblyGen\n * @param pdbxStructOperList\n * @return list of transformation matrices to generate macromolecular assembly\n */\n","repo_name":"biojava-master/","id":975,"method_signature":"List<BiologicalAssemblyTransformation> getBioUnitTransformationList(PdbxStructAssembly, int, PdbxStructAssemblyGen, PdbxStructOperList)"}