{"callee_method_names":["String.split","String[].toUpperCase","String.startsWith","File.canRead","File.isDirectory","String.matches","Logger.warn","File.getAbsoluteFile","File.getAbsolutePath","Logger.info","File.getAbsoluteFile","File.getAbsolutePath"],"method_name":"StructureName.init","method_implementation":"{\n    // First try identifying a prefix\n    String[] prefix = name.split(\":\", 2);\n    mySource = null;\n    if (prefix.length > 1) {\n        // Match Source prefixes\n        String suffix = prefix[1];\n        try {\n            mySource = Source.valueOf(prefix[0].toUpperCase());\n        } catch (IllegalArgumentException e) {\n            // unrecognized prefix; fall back on guessing\n            mySource = null;\n        }\n        if (mySource != null) {\n            switch(mySource) {\n                case SCOP:\n                    if (!initFromScop(suffix))\n                        throw new IllegalArgumentException(\"Malformed SCOP domain name:\" + suffix);\n                    return;\n                case CATH:\n                    if (!initFromCATH(suffix))\n                        throw new IllegalArgumentException(\"Malformed CATH domain name:\" + suffix);\n                    return;\n                case BIO:\n                    if (!initFromBIO(name))\n                        throw new IllegalArgumentException(\"Malformed BIO name:\" + suffix);\n                    return;\n                case ECOD:\n                    if (!initFromECOD(suffix))\n                        throw new IllegalArgumentException(\"Malformed ECOD domain name:\" + suffix);\n                    return;\n                case PDB:\n                    if (!initFromPDB(suffix))\n                        throw new IllegalArgumentException(\"Malformed PDB specification:\" + suffix);\n                    return;\n                case FILE:\n                    // Treat file:/ prefixes as URLs\n                    if (!suffix.startsWith(\"/\")) {\n                        // Otherwise, treat as file\n                        initFromFile();\n                        return;\n                    }\n                // fall through to URL case\n                case URL:\n                    if (!initFromURL(name))\n                        throw new IllegalArgumentException(\"Malformed URL specification:\" + suffix);\n                    return;\n                default:\n                    throw new IllegalStateException(\"Unimplemented Source \" + mySource);\n            }\n        }\n    }\n    // No known prefix, so revert to guessing\n    // First guess regex-based identifiers\n    // SCOP domain\n    if (initFromScop(name))\n        return;\n    // CATH\n    if (initFromCATH(name))\n        return;\n    // ECOD\n    if (initFromECOD(name))\n        return;\n    // Never guess BIO or PDP\n    // URL\n    if (initFromURL(name))\n        return;\n    // Guess FILE based on file existence\n    File file = new File(FileDownloadUtils.expandUserHome(name));\n    if (file.canRead() && !file.isDirectory()) {\n        // an attempt to mitigate issue #398. It doesn't fix it but it catches the most common case of passing a pdb id and finding a file in working dir matching it\n        if (name.matches(\"\\\\d\\\\w\\\\w\\\\w\")) {\n            // the plain pdb id case, this is unlikely to be what the user wants: let's let it through but warn about it\n            logger.warn(\"Provided 4-letter structure name '{}' matches \" + \"file name in directory {}. Will read structure \" + \"data from file {} and not consider the name as a \" + \"structure identifier. If this is not what you \" + \"want, use 'FILE:{}'\", name, file.getAbsoluteFile().getParent(), file.getAbsolutePath(), name);\n        } else {\n            logger.info(\"Provided structure name '{}' matches \" + \"file name in directory {}. Will read structure \" + \"data from file {}.\", name, file.getAbsoluteFile().getParent(), file.getAbsolutePath());\n        }\n        initFromFile();\n        return;\n    }\n    // Default to PDB\n    initFromPDB(name);\n}","repo_id":"9","comment":"/**\n * Tries to determine the source and pdbId without fully realizing the identifier,\n * which could require I/O depending on the source\n * @throws IllegalArgumentException if the source is recognizable but invalid\n */\n","repo_name":"biojava-master/","id":464,"method_signature":"void init()"}