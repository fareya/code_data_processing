{"callee_method_names":["RotationGroup.getPointGroup","RotationGroup.getPointGroup","RotationGroup.getPointGroup","RotationGroup.getPointGroup","RotationGroup.getPointGroup","RotationGroup.getPointGroup","Logger.warn"],"method_name":"RotationAxisAligner.calcReferenceVector","method_implementation":"{\n    referenceVector = null;\n    if (rotationGroup.getPointGroup().startsWith(\"C\")) {\n        referenceVector = getReferenceAxisCylic();\n    } else if (rotationGroup.getPointGroup().startsWith(\"D\")) {\n        referenceVector = getReferenceAxisDihedral();\n    } else if (\"T\".equals(rotationGroup.getPointGroup())) {\n        referenceVector = getReferenceAxisTetrahedral();\n    } else if (\"O\".equals(rotationGroup.getPointGroup())) {\n        referenceVector = getReferenceAxisOctahedral();\n    } else if (\"I\".equals(rotationGroup.getPointGroup())) {\n        referenceVector = getReferenceAxisIcosahedral();\n    } else if (\"Helical\".equals(rotationGroup.getPointGroup())) {\n        // TODO what should the reference vector be??\n        referenceVector = getReferenceAxisCylic();\n    }\n    if (referenceVector == null) {\n        logger.warn(\"no reference vector found. Using y-axis.\");\n        referenceVector = new Vector3d(Y_AXIS);\n    }\n    // make sure reference vector is perpendicular principal roation vector\n    referenceVector = orthogonalize(principalRotationVector, referenceVector);\n}","repo_id":"9","comment":"/**\n * Returns a vector perpendicular to the principal rotation vector\n * for the alignment of structures in the xy-plane\n * @return reference vector\n */\n","repo_name":"biojava-master/","id":1994,"method_signature":"void calcReferenceVector()"}