{"callee_method_names":["OutputStream.write","LinkedHashMap<String,ChromosomeSequence>.keySet","LinkedHashMap<String,ChromosomeSequence>.get","ChromosomeSequence.getGeneSequences","OutputStream.write","String.getBytes","OutputStream.write","String.getBytes","OutputStream.write","String.getBytes"],"method_name":"GFF3Writer.write","method_implementation":"{\n    outputStream.write(\"##gff-version 3\\n\".getBytes());\n    for (String key : chromosomeSequenceList.keySet()) {\n        ChromosomeSequence chromosomeSequence = chromosomeSequenceList.get(key);\n        String gff3line = \"\";\n        //         if(source.length() == 0){\n        //             Collection<GeneSequence> genes = chromosomeSequence.getGeneSequences().values();\n        //             for(GeneSequence gene : genes){\n        //                 source = gene.getSource();\n        //                 break;\n        //             }\n        //         }\n        //         gff3line = key + \"\\t\" + source + \"\\t\" + \"size\" + \"\\t\" + \"1\" + \"\\t\" + chromosomeSequence.getBioEnd() + \"\\t.\\t.\\t.\\tName=\" + key + \"\\r\\n\";\n        //         outputStream.write(gff3line.getBytes());\n        for (GeneSequence geneSequence : chromosomeSequence.getGeneSequences().values()) {\n            gff3line = key + \"\\t\" + geneSequence.getSource() + \"\\t\" + \"gene\" + \"\\t\" + geneSequence.getBioBegin() + \"\\t\" + geneSequence.getBioEnd() + \"\\t\";\n            Double score = geneSequence.getSequenceScore();\n            if (score == null) {\n                gff3line = gff3line + \".\\t\";\n            } else {\n                gff3line = gff3line + score + \"\\t\";\n            }\n            gff3line = gff3line + geneSequence.getStrand().getStringRepresentation() + \"\\t\";\n            gff3line = gff3line + \".\\t\";\n            gff3line = gff3line + \"ID=\" + geneSequence.getAccession().getID() + \";Name=\" + geneSequence.getAccession().getID();\n            gff3line = gff3line + getGFF3Note(geneSequence.getNotesList());\n            gff3line = gff3line + \"\\n\";\n            outputStream.write(gff3line.getBytes());\n            int transcriptIndex = 0;\n            for (TranscriptSequence transcriptSequence : geneSequence.getTranscripts().values()) {\n                transcriptIndex++;\n                gff3line = key + \"\\t\" + transcriptSequence.getSource() + \"\\t\" + \"mRNA\" + \"\\t\" + transcriptSequence.getBioBegin() + \"\\t\" + transcriptSequence.getBioEnd() + \"\\t\";\n                score = transcriptSequence.getSequenceScore();\n                if (score == null) {\n                    gff3line = gff3line + \".\\t\";\n                } else {\n                    gff3line = gff3line + score + \"\\t\";\n                }\n                gff3line = gff3line + transcriptSequence.getStrand().getStringRepresentation() + \"\\t\";\n                gff3line = gff3line + \".\\t\";\n                String id = geneSequence.getAccession().getID() + \".\" + transcriptIndex;\n                gff3line = gff3line + \"ID=\" + id + \";Parent=\" + geneSequence.getAccession().getID() + \";Name=\" + id;\n                gff3line = gff3line + getGFF3Note(transcriptSequence.getNotesList());\n                gff3line = gff3line + \"\\n\";\n                outputStream.write(gff3line.getBytes());\n                String transcriptParentName = geneSequence.getAccession().getID() + \".\" + transcriptIndex;\n                ArrayList<CDSSequence> cdsSequenceList = new ArrayList<CDSSequence>(transcriptSequence.getCDSSequences().values());\n                Collections.sort(cdsSequenceList, new SequenceComparator());\n                for (CDSSequence cdsSequence : cdsSequenceList) {\n                    gff3line = key + \"\\t\" + cdsSequence.getSource() + \"\\t\" + \"CDS\" + \"\\t\" + cdsSequence.getBioBegin() + \"\\t\" + cdsSequence.getBioEnd() + \"\\t\";\n                    score = cdsSequence.getSequenceScore();\n                    if (score == null) {\n                        gff3line = gff3line + \".\\t\";\n                    } else {\n                        gff3line = gff3line + score + \"\\t\";\n                    }\n                    gff3line = gff3line + cdsSequence.getStrand().getStringRepresentation() + \"\\t\";\n                    gff3line = gff3line + cdsSequence.getPhase() + \"\\t\";\n                    gff3line = gff3line + \"ID=\" + cdsSequence.getAccession().getID() + \";Parent=\" + transcriptParentName;\n                    gff3line = gff3line + getGFF3Note(cdsSequence.getNotesList());\n                    gff3line = gff3line + \"\\n\";\n                    outputStream.write(gff3line.getBytes());\n                }\n            }\n        }\n    }\n}","repo_id":"9","comment":"/**\n * Output gff3 format for a DNA Sequence\n * @param outputStream\n * @param chromosomeSequenceList\n * @throws Exception\n */\n","repo_name":"biojava-master/","id":2474,"method_signature":"void write(OutputStream, LinkedHashMap)"}