{"callee_method_ids":[625,2626],"callee_method_names":["AtomCache.getCachePath","String.toLowerCase","String.substring","File.exists","Logger.info","File.toString","File.mkdir","File.exists","Logger.info","File.toString","File.mkdir","Logger.debug","File.getAbsolutePath","File.exists","Logger.debug","Logger.debug","InputStreamProvider.getInputStream","SiftsXMLParser.parseXmlFile","SiftsXMLParser.getEntities"],"method_name":"SiftsMappingProvider.getSiftsMapping","method_implementation":"{\n    // grab files from here:\n    AtomCache cache = new AtomCache();\n    String path = cache.getCachePath();\n    pdbId = pdbId.toLowerCase();\n    String dirHash = pdbId.substring(1, 3);\n    File siftsDir = new File(path, \"SIFTS\");\n    if (!siftsDir.exists()) {\n        logger.info(\"Creating directory {}\", siftsDir.toString());\n        siftsDir.mkdir();\n    }\n    File hashDir = new File(siftsDir, dirHash);\n    if (!hashDir.exists()) {\n        logger.info(\"Creating directory {}\", hashDir.toString());\n        hashDir.mkdir();\n    }\n    File dest = new File(hashDir, pdbId + \".sifts.xml.gz\");\n    logger.debug(\"testing SIFTS file {}\", dest.getAbsolutePath());\n    if (!dest.exists()) {\n        String u = String.format(fileLoc, pdbId);\n        URL url = new URL(u);\n        logger.debug(\"Downloading SIFTS file {} validation metadata.\", url);\n        FileDownloadUtils.createValidationFiles(url, dest, null, FileDownloadUtils.Hash.UNKNOWN);\n        logger.debug(\"Downloading SIFTS file {} to {}\", url, dest);\n        FileDownloadUtils.downloadFile(url, dest);\n    }\n    if (!FileDownloadUtils.validateFile(dest))\n        throw new IOException(\"Downloaded file invalid: \" + dest);\n    InputStreamProvider prov = new InputStreamProvider();\n    InputStream is = prov.getInputStream(dest);\n    SiftsXMLParser parser = new SiftsXMLParser();\n    parser.parseXmlFile(is);\n    //System.out.println(parser.getEntities());\n    return parser.getEntities();\n}","repo_id":"9","comment":"/**\n * Return the SIFTS mappings by getting the info from individual SIFTS xml files at URL {@value EBI_SIFTS_FILE_LOCATION}\n * @param pdbId the pdb identifier\n * @return\n * @throws IOException if problems downloading or parsing the file\n */\n","repo_name":"biojava-master/","id":1121,"method_signature":"List<SiftsEntity> getSiftsMapping(String)"}