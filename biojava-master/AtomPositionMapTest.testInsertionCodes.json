{"callee_method_ids":[619,1004,1002,1002,1002],"callee_method_names":["AtomCache.getAtoms","AtomPositionMap.getNavMap","NavigableMap<ResidueNumber, Integer>.keySet","AtomPositionMap.getPosition","NavigableMap<ResidueNumber, Integer>.get","AtomPositionMap.getLength","AtomPositionMap.getLength","AtomPositionMap.getLength"],"method_name":"AtomPositionMapTest.testInsertionCodes","method_implementation":"{\n    String pdbId = \"1qdm\";\n    // has 2 insertion code regions, lettered P and S, as well as disordered regions:\n    // 6P-26P,2-163,169-247,1S-37S,65S-104S,248-338\n    // Len:21,  162,     79,    37,      40,     91 = 430\n    AtomPositionMap map = new AtomPositionMap(cache.getAtoms(pdbId));\n    NavigableMap<ResidueNumber, Integer> navMap = map.getNavMap();\n    for (ResidueNumber n : navMap.keySet()) {\n        assertEquals(\"An element is missing\", map.getPosition(n).intValue(), navMap.get(n).intValue());\n    }\n    // 2+37+21\n    int length1 = 60;\n    // 2+37+40+53\n    int length2 = 132;\n    ResidueNumber start = new ResidueNumber(\"A\", 246, null);\n    ResidueNumber mid = new ResidueNumber(\"A\", 85, 'S');\n    ResidueNumber end = new ResidueNumber(\"A\", 300, null);\n    int realLength1 = map.getLength(start, mid);\n    assertEquals(\"Real atom length is wrong\", length1, realLength1);\n    int realLength2 = map.getLength(start, end);\n    assertEquals(\"Real atom length is wrong\", length2, realLength2);\n    int realLength = map.getLength(new ResidueNumber(\"A\", 6, 'P'), new ResidueNumber(\"A\", 338, null));\n    assertEquals(\"Full length wrong\", 430, realLength);\n}","repo_id":"9","comment":"/**\n * Tests with insertion codes.\n * @throws StructureException\n * @throws IOException\n */\n","repo_name":"biojava-master/","id":2201,"method_signature":"void testInsertionCodes()"}