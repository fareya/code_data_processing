{"callee_method_ids":[477],"callee_method_names":["AFPChain.getNrEQR","List<Atom>.add","List<Atom>.toArray","List<Atom>.size"],"method_name":"DisplayAFP.createArtificalStructure","method_implementation":"{\n    if (afpChain.getNrEQR() < 1) {\n        return AlignmentTools.getAlignedStructure(ca1, ca2);\n    }\n    Group[] twistedGroups = AlignmentTools.prepareGroupsForDisplay(afpChain, ca1, ca2);\n    List<Atom> twistedAs = new ArrayList<Atom>();\n    for (Group g : twistedGroups) {\n        if (g == null)\n            continue;\n        if (g.size() < 1)\n            continue;\n        Atom a = g.getAtom(0);\n        twistedAs.add(a);\n    }\n    Atom[] twistedAtoms = twistedAs.toArray(new Atom[twistedAs.size()]);\n    List<Group> hetatms = StructureTools.getUnalignedGroups(ca1);\n    List<Group> hetatms2 = StructureTools.getUnalignedGroups(ca2);\n    Atom[] arr1 = DisplayAFP.getAtomArray(ca1, hetatms);\n    Atom[] arr2 = DisplayAFP.getAtomArray(twistedAtoms, hetatms2);\n    Structure artificial = AlignmentTools.getAlignedStructure(arr1, arr2);\n    return artificial;\n}","repo_id":"9","comment":"/**\n * Create a \"fake\" Structure objects that contains the two sets of atoms aligned on top of each other.\n *\n * @param afpChain the container of the alignment\n * @param ca1 atoms for protein 1\n * @param ca2 atoms for protein 2\n * @return a protein structure with 2 models.\n * @throws StructureException\n */\n","repo_name":"biojava-master/","id":3288,"method_signature":"Structure createArtificalStructure(AFPChain, Atom[], Atom[])"}