{"callee_method_names":["List<CeSymmResult>.size","List<CeSymmResult>.get","CeSymmResult.setSelfAlignment","List<CeSymmResult>.get","CeSymmResult.setStructureId","List<CeSymmResult>.get","CeSymmResult.setAtoms","List<CeSymmResult>.get","CeSymmResult.setParams","List<CeSymmResult>.get","MultipleAlignment.getEnsemble","MultipleAlignment.getEnsemble","MultipleAlignment.getEnsemble","MultipleAlignment.getEnsemble","Block.setAlignRes","ConnectivityInspector<Integer, DefaultEdge>.connectedSets","List<Set<Integer>>.size","List<ResidueGroup>.add","Block.getAlignRes","Group.order","Group.combineWith","Block.getAlignRes","Block.length","List<CeSymmResult>.get","Block.getAlignRes","MultipleAlignment.getEnsemble","MultipleAlignment.getEnsemble","CeSymmResult.getStructureId","CeSymmResult.setMultipleAlignment","CeSymmResult.setRefined","CeSymmResult.setNumRepeats","CeSymmResult.setAxes","CeSymmResult.getAxes","MultipleAlignment.size","MultipleAlignment.putScore","MultipleAlignment.putScore"],"method_name":"CeSymmIterative.reconstructSymmResult","method_implementation":"{\n    // If one level, nothing to build or calculate\n    if (levels.size() == 1)\n        return levels.get(0);\n    CeSymmResult result = new CeSymmResult();\n    result.setSelfAlignment(levels.get(0).getSelfAlignment());\n    result.setStructureId(levels.get(0).getStructureId());\n    result.setAtoms(levels.get(0).getAtoms());\n    result.setParams(levels.get(0).getParams());\n    // Initialize a new multiple alignment\n    MultipleAlignment msa = new MultipleAlignmentImpl();\n    msa.getEnsemble().setAtomArrays(new ArrayList<Atom[]>());\n    msa.getEnsemble().setStructureIdentifiers(new ArrayList<StructureIdentifier>());\n    msa.getEnsemble().setAlgorithmName(CeSymm.algorithmName);\n    msa.getEnsemble().setVersion(CeSymm.version);\n    BlockSet bs = new BlockSetImpl(msa);\n    Block b = new BlockImpl(bs);\n    b.setAlignRes(new ArrayList<List<Integer>>());\n    // Calculate the connected groups of the alignment graph\n    ConnectivityInspector<Integer, DefaultEdge> inspector = new ConnectivityInspector<Integer, DefaultEdge>(alignGraph);\n    List<Set<Integer>> comps = inspector.connectedSets();\n    List<ResidueGroup> groups = new ArrayList<ResidueGroup>(comps.size());\n    for (Set<Integer> comp : comps) groups.add(new ResidueGroup(comp));\n    // Calculate the total number of repeats\n    int order = 1;\n    for (CeSymmResult sr : levels) order *= sr.getMultipleAlignment().size();\n    for (int su = 0; su < order; su++) b.getAlignRes().add(new ArrayList<Integer>());\n    // Construct the resulting MultipleAlignment from ResidueGroups\n    for (ResidueGroup group : groups) {\n        if (group.order() != order)\n            continue;\n        group.combineWith(b.getAlignRes());\n    }\n    // The reconstruction failed, so the top level is returned\n    if (b.length() == 0)\n        return levels.get(0);\n    for (int su = 0; su < order; su++) {\n        Collections.sort(b.getAlignRes().get(su));\n        msa.getEnsemble().getAtomArrays().add(atoms);\n        msa.getEnsemble().getStructureIdentifiers().add(result.getStructureId());\n    }\n    result.setMultipleAlignment(msa);\n    result.setRefined(true);\n    result.setNumRepeats(order);\n    SymmetryAxes axes = recoverAxes(result);\n    result.setAxes(axes);\n    // Set the transformations and scores of the final alignment\n    SymmetryTools.updateSymmetryTransformation(result.getAxes(), msa);\n    double tmScore = MultipleAlignmentScorer.getAvgTMScore(msa) * msa.size();\n    double rmsd = MultipleAlignmentScorer.getRMSD(msa);\n    msa.putScore(MultipleAlignmentScorer.AVGTM_SCORE, tmScore);\n    msa.putScore(MultipleAlignmentScorer.RMSD, rmsd);\n    return result;\n}","repo_id":"9","comment":"/**\n * After all the analysis iterations have finished, the final Result object\n * is reconstructed using the cumulative alignment graph.\n *\n * @param atoms\n *            the original structure atoms\n * @return CeSymmResult reconstructed symmetry result\n * @throws StructureException\n */\n","repo_name":"biojava-master/","id":2059,"method_signature":"CeSymmResult reconstructSymmResult(Atom[])"}