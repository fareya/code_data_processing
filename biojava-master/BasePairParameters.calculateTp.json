{"callee_method_names":["Matrix4d.getElement"],"method_name":"BasePairParameters.calculateTp","method_implementation":"{\n    double[][] A = new double[4][4];\n    for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) {\n        A[i][j] = input.getElement(i, j);\n    }\n    double[] M = new double[6];\n    double cosgamma, gamma, phi, omega, sgcp, omega2_minus_phi, sm, cm, sp, cp, sg, cg;\n    cosgamma = A[2][2];\n    if (cosgamma > 1.0)\n        cosgamma = 1.0;\n    else if (cosgamma < -1.0)\n        cosgamma = -1.0;\n    gamma = acos(cosgamma);\n    sgcp = A[1][1] * A[0][2] - A[0][1] * A[1][2];\n    if (gamma == 0.0)\n        omega = -atan2(A[0][1], A[1][1]);\n    else\n        omega = atan2(A[2][1] * A[0][2] + sgcp * A[1][2], sgcp * A[0][2] - A[2][1] * A[1][2]);\n    omega2_minus_phi = atan2(A[1][2], A[0][2]);\n    phi = omega / 2.0 - omega2_minus_phi;\n    M[0] = gamma * sin(phi) * 180.0 / PI;\n    M[1] = gamma * cos(phi) * 180.0 / PI;\n    M[2] = omega * 180.0 / PI;\n    sm = sin(omega / 2.0 - phi);\n    cm = cos(omega / 2.0 - phi);\n    sp = sin(phi);\n    cp = cos(phi);\n    sg = sin(gamma / 2.0);\n    cg = cos(gamma / 2.0);\n    M[3] = (cm * cg * cp - sm * sp) * A[0][3] + (sm * cg * cp + cm * sp) * A[1][3] - sg * cp * A[2][3];\n    M[4] = (-cm * cg * sp - sm * cp) * A[0][3] + (-sm * cg * sp + cm * cp) * A[1][3] + sg * sp * A[2][3];\n    M[5] = (cm * sg) * A[0][3] + (sm * sg) * A[1][3] + cg * A[2][3];\n    return M;\n}","repo_id":"9","comment":"/**\n * This method calculates pairing and step parameters from 4x4 transformation matrices (used internally)\n * that comes out as a Matrix4d.\n * @param input the 4x4 matrix representing the transformation from strand II -> strand I or pair i to pair i+1\n * @return Six parameters as double[6]\n */\n","repo_name":"biojava-master/","id":1739,"method_signature":"double[] calculateTp(Matrix4d)"}