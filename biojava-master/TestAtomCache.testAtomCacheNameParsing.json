{"callee_method_ids":[628,628,628,628,628,628,628,628],"callee_method_names":["AtomCache.getStructure","Structure.getPolyChains","AtomCache.getStructure","Structure.getPolyChains","Structure.getChains","Structure.getPolyChainByPDB","Chain.getName","Chain.getAtomLength","Structure.getChainByIndex","Structure.getChainByIndex","Structure.getChainByIndex","AtomCache.getStructure","AtomCache.getStructure","Structure.getPolyChains","Structure.getPolyChainByPDB","Chain.getName","AtomCache.getStructure","Structure.getPolyChains","Structure.getChains","Structure.getPolyChainByPDB","Chain.getAtomLength","AtomCache.getStructure","Structure.getPolyChains","Structure.getChains","Structure.getPolyChainByPDB","Chain.getAtomLength","AtomCache.getStructure","AtomCache.getStructure","Structure.getPolyChains","Structure.getPolyChainByPDB","Chain.getName"],"method_name":"TestAtomCache.testAtomCacheNameParsing","method_implementation":"{\n    String name1 = \"4hhb\";\n    Structure s = cache.getStructure(name1);\n    assertNotNull(s);\n    assertEquals(4, s.getPolyChains().size());\n    String name2 = \"4hhb.C\";\n    String chainId2 = \"C\";\n    s = cache.getStructure(name2);\n    assertEquals(1, s.getPolyChains().size());\n    // Chain name 'C' corresponds to three IDs: C (141 res), I (1 HEM), and M (59 water)\n    assertEquals(3, s.getChains().size());\n    Chain c = s.getPolyChainByPDB(chainId2);\n    assertEquals(chainId2, c.getName());\n    // Number of groups: Polymer + water + ligand\n    assertEquals(141, c.getAtomLength());\n    assertEquals(141, s.getChainByIndex(0).getAtomLength());\n    assertEquals(1, s.getChainByIndex(1).getAtomLength());\n    assertEquals(59, s.getChainByIndex(2).getAtomLength());\n    // Colon separators removed in BioJava 4.1.0\n    String name2b = \"4hhb:A\";\n    try {\n        s = cache.getStructure(name2b);\n        fail(\"Invalid structure format\");\n    } catch (StructureException e) {\n    }\n    // Numeric chain IDs are allowed but deprecated.\n    String name3 = \"4hhb.1\";\n    String chainId3 = \"B\";\n    s = cache.getStructure(name3);\n    assertNotNull(s);\n    assertEquals(1, s.getPolyChains().size());\n    c = s.getPolyChainByPDB(chainId3);\n    assertEquals(chainId3, c.getName());\n    String name4 = \"4hhb.A:10-20,B:10-20,C:10-20\";\n    s = cache.getStructure(name4);\n    assertNotNull(s);\n    assertEquals(3, s.getPolyChains().size());\n    assertEquals(3, s.getChains().size());\n    c = s.getPolyChainByPDB(\"B\");\n    assertEquals(11, c.getAtomLength());\n    String name5 = \"4hhb.(A:10-20,A:30-40)\";\n    s = cache.getStructure(name5);\n    assertNotNull(s);\n    assertEquals(1, s.getPolyChains().size());\n    // two chains: A (22 res), and G (1 HEM)\n    assertEquals(2, s.getChains().size());\n    c = s.getPolyChainByPDB(\"A\");\n    assertEquals(22, c.getAtomLength());\n    try {\n        // This syntax used to work, since the first paren is treated as a separator\n        String name6 = \"4hhb(A:10-20,A:30-40)\";\n        s = cache.getStructure(name6);\n        fail(\"A chain separator is required after the ID since 4.2.0\");\n    } catch (StructureException e) {\n    }\n    // Works since we detect a separator\n    String name8 = \"4hhb.(C)\";\n    s = cache.getStructure(name8);\n    assertEquals(1, s.getPolyChains().size());\n    c = s.getPolyChainByPDB(chainId2);\n    assertEquals(chainId2, c.getName());\n}","repo_id":"9","comment":"// TODO dmyersturnbull: Which of these syntaxes do we support? We should re-enable after\n","repo_name":"biojava-master/","id":2328,"method_signature":"void testAtomCacheNameParsing()"}