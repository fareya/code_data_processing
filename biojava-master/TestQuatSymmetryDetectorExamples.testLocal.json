{"callee_method_ids":[641,1633,1623,628,1929],"callee_method_names":["AtomCache.setFiletype","List<String>.add","List<String>.add","Map<String, String>.put","List<Map<String, String>>.add","List<String>.add","List<String>.add","Map<String, String>.put","List<Map<String, String>>.add","List<String>.add","List<String>.add","Map<String, String>.put","List<Map<String, String>>.add","List<String>.add","List<String>.add","Map<String, String>.put","List<Map<String, String>>.add","List<String>.add","List<String>.add","Map<String, String>.put","List<Map<String, String>>.add","List<String>.add","List<String>.add","Map<String, String>.put","List<Map<String, String>>.add","List<String>.add","List<String>.add","Map<String, String>.put","List<Map<String, String>>.add","List<String>.add","List<String>.add","Map<String, String>.put","Map<String, String>.put","List<Map<String, String>>.add","List<String>.add","List<String>.add","Map<String, String>.put","Map<String, String>.put","List<Map<String, String>>.add","List<String>.add","List<String>.add","Map<String, String>.put","Map<String, String>.put","List<Map<String, String>>.add","List<String>.add","List<String>.add","Map<String, String>.put","Map<String, String>.put","List<Map<String, String>>.add","List<String>.add","List<String>.add","Map<String, String>.put","Map<String, String>.put","List<Map<String, String>>.add","List<String>.add","List<String>.add","Map<String, String>.put","Map<String, String>.put","Map<String, String>.put","List<Map<String, String>>.add","SubunitClustererParameters.setClustererMethod","SubunitClustererParameters.setSequenceIdentityThreshold","List<String>.size","Logger.info","List<String>.get","AtomCache.getStructure","List<String>.get","List<String>.get","QuatSymmetryResults.getSymmetry","List<String>.get","List<String>.get","QuatSymmetryResults.getStoichiometry","List<Map<String, String>>.get","Logger.info","boolean.getStoichiometry","boolean.getSymmetry","boolean.getStoichiometry","List<String>.get","Map<String, String>.containsKey","boolean.getStoichiometry","boolean.getSymmetry","boolean.getStoichiometry","List<String>.get","Map<String, String>.get","boolean.getStoichiometry","boolean.getSymmetry"],"method_name":"TestQuatSymmetryDetectorExamples.testLocal","method_implementation":"{\n    AtomCache atomCache = new AtomCache();\n    atomCache.setFiletype(StructureFiletype.MMTF);\n    List<String> testIds = new ArrayList<>();\n    List<String> testStoichiometries = new ArrayList<>();\n    List<Map<String, String>> testLocalSymmetries = new ArrayList<>();\n    Map<String, String> localSymmetries;\n    testIds.add(\"BIO:5NUQ:1\");\n    testStoichiometries.add(\"A3B\");\n    localSymmetries = new HashMap<>();\n    localSymmetries.put(\"A3\", \"C3\");\n    testLocalSymmetries.add(localSymmetries);\n    testIds.add(\"BIO:4P2C:1\");\n    testStoichiometries.add(\"A5B5C\");\n    localSymmetries = new HashMap<>();\n    localSymmetries.put(\"A5B5\", \"C5\");\n    testLocalSymmetries.add(localSymmetries);\n    testIds.add(\"BIO:3J96:1\");\n    testStoichiometries.add(\"A6B4CDE\");\n    localSymmetries = new HashMap<>();\n    localSymmetries.put(\"B4\", \"C4\");\n    testLocalSymmetries.add(localSymmetries);\n    testIds.add(\"BIO:5WVK:1\");\n    testStoichiometries.add(\"A2B2C2D2E2F2G2H2I2J2K2L2M2N2OPQRSTUVWXYZabcdef\");\n    localSymmetries = new HashMap<>();\n    localSymmetries.put(\"A2B2C2D2E2F2G2H2I2J2K2L2M2N2\", \"C2\");\n    testLocalSymmetries.add(localSymmetries);\n    testIds.add(\"BIO:5JXT:1\");\n    testStoichiometries.add(\"A16\");\n    localSymmetries = new HashMap<>();\n    localSymmetries.put(\"A8\", \"D2\");\n    testLocalSymmetries.add(localSymmetries);\n    /* Bioassembly for 3R8R changed in January 2020 (PR #867)\n\t\ttestIds.add(\"BIO:3R8R:1\");\n\t\t\ttestStoichiometries.add(\"A12\");\n\t\t\tlocalSymmetries = new HashMap<>();\n\t\t\t\tlocalSymmetries.put(\"A10\",\"D5\");\n\t\t\ttestLocalSymmetries.add(localSymmetries);*/\n    testIds.add(\"BIO:1O18:1\");\n    testStoichiometries.add(\"A14B6C5D5\");\n    localSymmetries = new HashMap<>();\n    localSymmetries.put(\"A14\", \"H\");\n    testLocalSymmetries.add(localSymmetries);\n    testIds.add(\"BIO:4A8A:1\");\n    testStoichiometries.add(\"A12B\");\n    localSymmetries = new HashMap<>();\n    localSymmetries.put(\"A12\", \"T\");\n    testLocalSymmetries.add(localSymmetries);\n    testIds.add(\"BIO:5DN6:1\");\n    testStoichiometries.add(\"A12B3C3DEFGHIJKL\");\n    localSymmetries = new HashMap<>();\n    localSymmetries.put(\"B3C3\", \"C3\");\n    localSymmetries.put(\"A12\", \"C12\");\n    testLocalSymmetries.add(localSymmetries);\n    testIds.add(\"BIO:5FL7:1\");\n    testStoichiometries.add(\"A10B3C3DE\");\n    localSymmetries = new HashMap<>();\n    localSymmetries.put(\"B3C3\", \"C3\");\n    localSymmetries.put(\"A10\", \"C10\");\n    testLocalSymmetries.add(localSymmetries);\n    testIds.add(\"BIO:2OF5:1\");\n    testStoichiometries.add(\"A7B5\");\n    localSymmetries = new HashMap<>();\n    localSymmetries.put(\"A7\", \"H\");\n    localSymmetries.put(\"A5B5\", \"H\");\n    testLocalSymmetries.add(localSymmetries);\n    testIds.add(\"BIO:6EM9:1\");\n    testStoichiometries.add(\"A8B2\");\n    localSymmetries = new HashMap<>();\n    localSymmetries.put(\"B2\", \"C2\");\n    localSymmetries.put(\"A7\", \"H\");\n    testLocalSymmetries.add(localSymmetries);\n    testIds.add(\"BIO:4NTP:1\");\n    testStoichiometries.add(\"A16\");\n    localSymmetries = new HashMap<>();\n    localSymmetries.put(\"A2\", \"C2\");\n    localSymmetries.put(\"A6\", \"D3\");\n    testLocalSymmetries.add(localSymmetries);\n    testIds.add(\"BIO:3JC9:1\");\n    testStoichiometries.add(\"A12B12C12D12E12F12G5H2\");\n    localSymmetries = new HashMap<>();\n    localSymmetries.put(\"A12B12C12D12E12H2\", \"C2\");\n    localSymmetries.put(\"A12B12C12D12E12F12\", \"C12\");\n    localSymmetries.put(\"G5\", \"H\");\n    testLocalSymmetries.add(localSymmetries);\n    QuatSymmetryParameters symmParams = new QuatSymmetryParameters();\n    SubunitClustererParameters clusterParams = new SubunitClustererParameters(true);\n    clusterParams.setClustererMethod(SubunitClustererMethod.SEQUENCE);\n    clusterParams.setSequenceIdentityThreshold(0.75);\n    for (int iTest = 0; iTest < testIds.size(); iTest++) {\n        logger.info(\"Processing \" + testIds.get(iTest));\n        Structure pdb = atomCache.getStructure(testIds.get(iTest));\n        Stoichiometry composition = SubunitClusterer.cluster(pdb, clusterParams);\n        // no global symmetry\n        QuatSymmetryResults globalSymmetry = QuatSymmetryDetector.calcGlobalSymmetry(composition, symmParams);\n        assertEquals(\"Unexpected global symmetry in \" + testIds.get(iTest), \"C1\", globalSymmetry.getSymmetry());\n        assertEquals(\"Unexpected global stoichiometry in \" + testIds.get(iTest), testStoichiometries.get(iTest), globalSymmetry.getStoichiometry().toString());\n        List<QuatSymmetryResults> foundLocal = QuatSymmetryDetector.calcLocalSymmetries(composition, symmParams);\n        Map<String, String> refLocal = testLocalSymmetries.get(iTest);\n        for (QuatSymmetryResults local : foundLocal) {\n            logger.info(\"Found stoichiometry \" + local.getStoichiometry().toString() + \" with symmetry \" + local.getSymmetry());\n            assertTrue(\"Stoichiometry \" + local.getStoichiometry().toString() + \" not expected for \" + testIds.get(iTest), refLocal.containsKey(local.getStoichiometry().toString()));\n            assertEquals(\"Symmetry \" + local.getSymmetry() + \" with stoichiometry \" + local.getStoichiometry().toString() + \" not expected for \" + testIds.get(iTest), refLocal.get(local.getStoichiometry().toString()), local.getSymmetry());\n        }\n    }\n}","repo_id":"9","comment":"/**\n * A selection of structures with no global symmetry, but local symmetry\n *\n * @throws IOException\n * @throws StructureException\n */\n","repo_name":"biojava-master/","id":186,"method_signature":"void testLocal()"}