{"callee_method_names":["File.getParentFile","File.getName","File.exists","Scanner.nextLong","File.length","Logger.warn","Logger.warn","File.getParentFile","File.getName","String.matches","File.getName","String.substring","String.lastIndexOf"],"method_name":"FileDownloadUtils.validateFile","method_implementation":"{\n    File sizeFile = new File(localFile.getParentFile(), localFile.getName() + SIZE_EXT);\n    if (sizeFile.exists()) {\n        try (Scanner scanner = new Scanner(sizeFile)) {\n            long expectedSize = scanner.nextLong();\n            long actualSize = localFile.length();\n            if (expectedSize != actualSize) {\n                logger.warn(\"File [{}] size ({}) does not match expected size ({}).\", localFile, actualSize, expectedSize);\n                return false;\n            }\n        } catch (FileNotFoundException e) {\n            logger.warn(\"could not validate size of file [{}] because no size metadata file exists.\", localFile);\n        }\n    }\n    File[] hashFiles = localFile.getParentFile().listFiles(new FilenameFilter() {\n\n        final String hashPattern = String.format(\"%s%s_(%s|%s|%s)\", localFile.getName(), HASH_EXT, Hash.MD5, Hash.SHA1, Hash.SHA256);\n\n        @Override\n        public boolean accept(File dir, String name) {\n            return name.matches(hashPattern);\n        }\n    });\n    if (hashFiles.length > 0) {\n        File hashFile = hashFiles[0];\n        String name = hashFile.getName();\n        String algo = name.substring(name.lastIndexOf('_') + 1);\n        switch(Hash.valueOf(algo)) {\n            case MD5:\n            case SHA1:\n            case SHA256:\n                throw new UnsupportedOperationException(\"Not yet implemented\");\n            case UNKNOWN:\n            default:\n                // No need. Already checked above\n                throw new IllegalArgumentException(\"Hashing algorithm not known: \" + algo);\n        }\n    }\n    return true;\n}","repo_id":"9","comment":"/**\n * Validate a local file based on pre-existing metadata files for size and hash.<br>\n * If the passed in <code>localFile<\/code> parameter is a file named <code>file.ext<\/code>, the function searches in the same folder for:\n * <ul>\n * <li><code>file.ext.size<\/code>: If found, it compares the size stored in it to the length of <code>localFile<\/code> (in bytes).<\/li>\n * <li><code>file.ext.hash_XXXX (where XXXX is DM5, SHA1, or SHA256)<\/code>: If found, it compares the size stored in it to the hash code of <code>localFile<\/code>.<\/li>\n * <\/ul>\n * If any of these comparisons fail, the function returns <code>false<\/code>. otherwise it returns true.\n * <p>\n * <b>N.B.<\/b> None of the 3 common verification hashing algorithms are implement yet.\n * @param localFile The file to validate\n * @return <code>false<\/code> if any of the size or hash code metadata files exists but its contents does not match the expected value in the file, <code>true<\/code> otherwise.\n * @since 7.0.0\n */\n","repo_name":"biojava-master/","id":2572,"method_signature":"boolean validateFile(File)"}