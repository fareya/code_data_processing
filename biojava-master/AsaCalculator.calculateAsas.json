{"callee_method_names":["Logger.debug","Logger.debug","Logger.debug","Logger.debug","Logger.debug","ExecutorService.submit","ExecutorService.shutdown","ExecutorService.isTerminated","Logger.debug"],"method_name":"AsaCalculator.calculateAsas","method_implementation":"{\n    double[] asas = new double[atomCoords.length];\n    long start = System.currentTimeMillis();\n    if (useSpatialHashingForNeighbors) {\n        logger.debug(\"Will use spatial hashing to find neighbors\");\n        neighborIndices = findNeighborIndicesSpatialHashing();\n    } else {\n        logger.debug(\"Will not use spatial hashing to find neighbors\");\n        neighborIndices = findNeighborIndices();\n    }\n    long end = System.currentTimeMillis();\n    logger.debug(\"Took {} s to find neighbors\", (end - start) / 1000.0);\n    start = System.currentTimeMillis();\n    if (nThreads <= 1) {\n        // (i.e. it will also be 1 thread if 0 or negative number specified)\n        logger.debug(\"Will use 1 thread for ASA calculation\");\n        for (int i = 0; i < atomCoords.length; i++) {\n            asas[i] = calcSingleAsa(i);\n        }\n    } else {\n        logger.debug(\"Will use {} threads for ASA calculation\", nThreads);\n        ExecutorService threadPool = Executors.newFixedThreadPool(nThreads);\n        for (int i = 0; i < atomCoords.length; i++) {\n            threadPool.submit(new AsaCalcWorker(i, asas));\n        }\n        threadPool.shutdown();\n        while (!threadPool.isTerminated()) ;\n    }\n    end = System.currentTimeMillis();\n    logger.debug(\"Took {} s to calculate all {} atoms ASAs (excluding neighbors calculation)\", (end - start) / 1000.0, atomCoords.length);\n    return asas;\n}","repo_id":"9","comment":"/**\n * Calculates the Accessible Surface Areas for the atoms given in constructor and with parameters given.\n * Beware that the parallel implementation is quite memory hungry. It scales well as long as there is\n * enough memory available.\n * @return an array with asa values corresponding to each atom of the input array\n */\n","repo_name":"biojava-master/","id":832,"method_signature":"double[] calculateAsas()"}