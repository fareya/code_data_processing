{"callee_method_names":[],"method_name":"Alignments.getPairwiseScorer","method_implementation":"{\n    switch(type) {\n        default:\n        case GLOBAL:\n            return getPairwiseAligner(query, target, PairwiseSequenceAlignerType.GLOBAL, gapPenalty, subMatrix);\n        case GLOBAL_IDENTITIES:\n            return new FractionalIdentityScorer<S, C>(getPairwiseAligner(query, target, PairwiseSequenceAlignerType.GLOBAL, gapPenalty, subMatrix));\n        case GLOBAL_SIMILARITIES:\n            return new FractionalSimilarityScorer<S, C>(getPairwiseAligner(query, target, PairwiseSequenceAlignerType.GLOBAL, gapPenalty, subMatrix));\n        case LOCAL:\n            return getPairwiseAligner(query, target, PairwiseSequenceAlignerType.LOCAL, gapPenalty, subMatrix);\n        case LOCAL_IDENTITIES:\n            return new FractionalIdentityScorer<S, C>(getPairwiseAligner(query, target, PairwiseSequenceAlignerType.LOCAL, gapPenalty, subMatrix));\n        case LOCAL_SIMILARITIES:\n            return new FractionalSimilarityScorer<S, C>(getPairwiseAligner(query, target, PairwiseSequenceAlignerType.LOCAL, gapPenalty, subMatrix));\n        case KMERS:\n        case WU_MANBER:\n            // TODO other scoring options\n            throw new UnsupportedOperationException(Alignments.class.getSimpleName() + \" does not yet support \" + type + \" scoring\");\n    }\n}","repo_id":"9","comment":"/**\n * Factory method which constructs a pairwise sequence scorer.\n *\n * @param <S> each {@link Sequence} of a pair is of type S\n * @param <C> each element of a {@link Sequence} is a {@link Compound} of type C\n * @param query the first {@link Sequence} to score\n * @param target the second {@link Sequence} to score\n * @param type chosen type from list of pairwise sequence scoring routines\n * @param gapPenalty the gap penalties used during alignment\n * @param subMatrix the set of substitution scores used during alignment\n * @return sequence pair scorer\n */\n","repo_name":"biojava-master/","id":45,"method_signature":"PairwiseSequenceScorer<S,C> getPairwiseScorer(S, S, PairwiseSequenceScorerType, GapPenalty, SubstitutionMatrix)"}