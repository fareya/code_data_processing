{"callee_method_names":["String.isEmpty","String.indexOf","String.indexOf","String.substring"],"method_name":"ScopDescription.getClassificationId","method_implementation":"{\n    if (classificationId == null || classificationId.isEmpty()) {\n        return null;\n    }\n    int numParts = 0;\n    switch(category) {\n        case Family:\n            numParts++;\n        case Superfamily:\n            numParts++;\n        case Fold:\n            numParts++;\n        case Class:\n            numParts++;\n            break;\n        default:\n            throw new IllegalArgumentException(\"Only Class, Fold, Superfamily, and Family are supported.\");\n    }\n    int endChar = -1;\n    for (int i = 0; i < numParts - 1; i++) {\n        endChar = classificationId.indexOf('.', endChar + 1);\n        if (endChar < 0) {\n            // Not enough items in the classification for this category\n            return null;\n        }\n    }\n    endChar = classificationId.indexOf('.', endChar + 1);\n    if (endChar < 0) {\n        // category goes to the end\n        return classificationId;\n    } else {\n        return classificationId.substring(0, endChar);\n    }\n}","repo_id":"9","comment":"/**\n * Return a portion of the classificationID corresponding to the specified\n * category (class, fold, superfamily, family).\n *\n * <p>Example: for SCOP family \"b.5.1.1\",\n * getClassificationId(ScopCategory.Superfamily) => \"b.5.1\"\n */\n","repo_name":"biojava-master/","id":1556,"method_signature":"String getClassificationId(ScopCategory)"}