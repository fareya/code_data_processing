{"callee_method_names":["StringBuffer.append","StringBuffer.append","StringBuffer.append","ProteinSequence.getSequenceAsString","URL.openConnection","HttpURLConnection.setDoOutput","HttpURLConnection.setDoInput","HttpURLConnection.setConnectTimeout","HttpURLConnection.setInstanceFollowRedirects","HttpURLConnection.setRequestMethod","HttpURLConnection.setRequestProperty","HttpURLConnection.setRequestProperty","HttpURLConnection.setRequestProperty","StringBuffer.toString","HttpURLConnection.getOutputStream","DataOutputStream.write","StringBuffer.toString","DataOutputStream.flush","DataOutputStream.close","HttpURLConnection.getHeaderField","HttpURLConnection.getResponseCode","Logger.warn","HttpURLConnection.getResponseMessage","URL.openConnection","HttpURLConnection.setRequestMethod","HttpURLConnection.setRequestProperty","HttpURLConnection.setConnectTimeout","HttpURLConnection.getInputStream","BufferedReader.readLine","StringBuffer.append","BufferedReader.close","StringBuffer.toString","JSONObject.getJSONObject","JSONObject.getJSONArray","JSONArray.size","JSONArray.getJSONObject","JSONObject.get","Long.intValue","HmmerResult.setAcc","JSONObject.get","HmmerResult.setDcl","HmmerResult.setDesc","JSONObject.get","HmmerResult.setEvalue","JSONObject.get","HmmerResult.setName","JSONObject.get","HmmerResult.setNdom","JSONObject.get","HmmerResult.setNreported","JSONObject.get","HmmerResult.setPvalue","JSONObject.get","HmmerResult.setScore","JSONObject.get","JSONObject.getJSONArray","JSONArray.size","JSONArray.getJSONObject","JSONObject.get","JSONObject.get","JSONObject.get","HmmerDomain.setAliLenth","JSONObject.get","HmmerDomain.setHmmAcc","JSONObject.get","HmmerDomain.setHmmDesc","JSONObject.get","HmmerDomain.setHmmFrom","JSONObject.get","HmmerDomain.setHmmTo","JSONObject.get","HmmerDomain.setSimCount","JSONObject.get","HmmerDomain.setSqFrom","JSONObject.get","HmmerDomain.setSqTo","JSONObject.get","HmmerDomain.setHmmName","JSONObject.get","HmmerDomain.setEvalue","JSONObject.get","SortedSet<HmmerDomain>.add","HmmerResult.setDomains","SortedSet<HmmerResult>.add","Logger.warn","MouseEvent.getMessage"],"method_name":"RemoteHmmerScan.scan","method_implementation":"{\n    StringBuffer postContent = new StringBuffer();\n    postContent.append(\"hmmdb=pfam\");\n    // by default hmmscan runs with the HMMER3 cut_ga parameter enabled, the \"gathering threshold\", which depends on\n    // the cutoffs defined in the underlying HMM files.\n    // to request a different cutoff by e-value this could be enabled:\n    //postContent.append(\"&E=1\");\n    postContent.append(\"&seq=\");\n    postContent.append(sequence.getSequenceAsString());\n    HttpURLConnection connection = (HttpURLConnection) serviceLocation.openConnection();\n    connection.setDoOutput(true);\n    connection.setDoInput(true);\n    // 15 sec\n    connection.setConnectTimeout(15000);\n    connection.setInstanceFollowRedirects(false);\n    connection.setRequestMethod(\"POST\");\n    connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n    connection.setRequestProperty(\"Accept\", \"application/json\");\n    connection.setRequestProperty(\"Content-Length\", \"\" + Integer.toString(postContent.toString().getBytes().length));\n    //Send request\n    DataOutputStream wr = new DataOutputStream(connection.getOutputStream());\n    wr.write(postContent.toString().getBytes());\n    wr.flush();\n    wr.close();\n    //Now get the redirect URL\n    URL respUrl = new URL(connection.getHeaderField(\"Location\"));\n    int responseCode = connection.getResponseCode();\n    if (responseCode == 500) {\n        LOGGER.warn(\"Got 500 response code for URL {}. Response message: {}.\", serviceLocation, connection.getResponseMessage());\n    }\n    HttpURLConnection connection2 = (HttpURLConnection) respUrl.openConnection();\n    connection2.setRequestMethod(\"GET\");\n    connection2.setRequestProperty(\"Accept\", \"application/json\");\n    // 1 minute\n    connection2.setConnectTimeout(60000);\n    //Get the response\n    BufferedReader in = new BufferedReader(new InputStreamReader(connection2.getInputStream()));\n    String inputLine;\n    StringBuffer result = new StringBuffer();\n    while ((inputLine = in.readLine()) != null) {\n        result.append(inputLine);\n    }\n    in.close();\n    // process the response and build up a container for the data.\n    SortedSet<HmmerResult> results = new TreeSet<HmmerResult>();\n    try {\n        JSONObject json = JSONObject.fromObject(result.toString());\n        JSONObject hmresults = json.getJSONObject(\"results\");\n        JSONArray hits = hmresults.getJSONArray(\"hits\");\n        for (int i = 0; i < hits.size(); i++) {\n            JSONObject hit = hits.getJSONObject(i);\n            HmmerResult hmmResult = new HmmerResult();\n            Object dclO = hit.get(\"dcl\");\n            Integer dcl = -1;\n            if (dclO instanceof Long) {\n                Long dclL = (Long) dclO;\n                dcl = dclL.intValue();\n            } else if (dclO instanceof Integer) {\n                dcl = (Integer) dclO;\n            }\n            hmmResult.setAcc((String) hit.get(\"acc\"));\n            hmmResult.setDcl(dcl);\n            hmmResult.setDesc((String) hit.get(\"desc\"));\n            hmmResult.setEvalue(Float.parseFloat((String) hit.get(\"evalue\")));\n            hmmResult.setName((String) hit.get(\"name\"));\n            hmmResult.setNdom((Integer) hit.get(\"ndom\"));\n            hmmResult.setNreported((Integer) hit.get(\"nreported\"));\n            hmmResult.setPvalue((Double) hit.get(\"pvalue\"));\n            hmmResult.setScore(Float.parseFloat((String) hit.get(\"score\")));\n            JSONArray hmmdomains = hit.getJSONArray(\"domains\");\n            SortedSet<HmmerDomain> domains = new TreeSet<HmmerDomain>();\n            for (int j = 0; j < hmmdomains.size(); j++) {\n                JSONObject d = hmmdomains.getJSONObject(j);\n                Integer is_included = getInteger(d.get(\"is_included\"));\n                if (is_included == 0) {\n                    continue;\n                }\n                // this filters out multiple hits to the same clan\n                Integer outcompeted = getInteger(d.get(\"outcompeted\"));\n                if (outcompeted != null && outcompeted == 1) {\n                    continue;\n                }\n                Integer significant = getInteger(d.get(\"significant\"));\n                if (significant != 1) {\n                    continue;\n                }\n                HmmerDomain dom = new HmmerDomain();\n                dom.setAliLenth((Integer) d.get(\"aliL\"));\n                dom.setHmmAcc((String) d.get(\"alihmmacc\"));\n                dom.setHmmDesc((String) d.get(\"alihmmdesc\"));\n                dom.setHmmFrom(getInteger(d.get(\"alihmmfrom\")));\n                dom.setHmmTo(getInteger(d.get(\"alihmmto\")));\n                dom.setSimCount((Integer) d.get(\"aliSimCount\"));\n                dom.setSqFrom(getInteger(d.get(\"alisqfrom\")));\n                dom.setSqTo(getInteger(d.get(\"alisqto\")));\n                dom.setHmmName((String) d.get(\"alihmmname\"));\n                dom.setEvalue(Float.parseFloat((String) d.get(\"ievalue\")));\n                domains.add(dom);\n            }\n            hmmResult.setDomains(domains);\n            results.add(hmmResult);\n        }\n    } catch (NumberFormatException e) {\n        LOGGER.warn(\"Could not parse number in Hmmer web service json response: {}\", e.getMessage());\n    }\n    return results;\n}","repo_id":"9","comment":"/**\n * Scans a protein sequence for Pfam profile matches.\n *\n * @param sequence\n * @param serviceLocation\n * @return\n * @throws IOException\n */\n","repo_name":"biojava-master/","id":3502,"method_signature":"SortedSet<HmmerResult> scan(ProteinSequence, URL)"}