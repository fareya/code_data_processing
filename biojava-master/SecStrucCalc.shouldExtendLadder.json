{"callee_method_names":["BetaBridge.equals"],"method_name":"SecStrucCalc.shouldExtendLadder","method_implementation":"{\n    //Only extend if they are of the same type\n    boolean sameType = b.type.equals(ladder.btype);\n    if (!sameType)\n        return false;\n    //Only extend if residue 1 is sequential to ladder strand\n    boolean sequential = (b.partner1 == ladder.to + 1);\n    if (!sequential)\n        return false;\n    switch(b.type) {\n        case parallel:\n            //Residue 2 should be sequential to second strand\n            if (b.partner2 == ladder.lto + 1)\n                return true;\n            break;\n        case antiparallel:\n            //Residue 2 should be previous to second strand\n            if (b.partner2 == ladder.lfrom - 1)\n                return true;\n            break;\n    }\n    return false;\n}","repo_id":"9","comment":"/**\n * Conditions to extend a ladder with a given beta Bridge:\n * <li>The bridge and ladder are of the same type.\n * <li>The smallest bridge residue is sequential to the first\n * \t\tstrand ladder.\n * <li>The second bridge residue is either sequential (parallel)\n * \t\tor previous (antiparallel) to the second strand of the ladder\n * <\/li>\n * @param ladder the ladder candidate to extend\n * @param b the beta bridge that would extend the ladder\n * @return true if the bridge b extends the ladder\n */\n","repo_name":"biojava-master/","id":1592,"method_signature":"boolean shouldExtendLadder(Ladder, BetaBridge)"}