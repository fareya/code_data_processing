{"callee_method_names":["ReadWriteLock.readLock","Logger.trace","Logger.trace","ReadWriteLock.readLock","ReadWriteLock.readLock","Logger.trace","Map<PdbId, List<EcodDomain>>.get","List<EcodDomain>.size","List<EcodDomain>.add","Logger.trace","ReadWriteLock.readLock"],"method_name":"EcodInstallation.getDomainsForPdb","method_implementation":"{\n    domainsFileLock.readLock().lock();\n    try {\n        logger.trace(\"LOCK readlock\");\n        while (domainMap == null) {\n            // unlock to allow ensureDomainsFileInstalled to get the write lock\n            logger.trace(\"UNLOCK readlock\");\n            domainsFileLock.readLock().unlock();\n            indexDomains();\n            domainsFileLock.readLock().lock();\n            logger.trace(\"LOCK readlock\");\n        }\n        PdbId pdbId = null;\n        try {\n            pdbId = new PdbId(id);\n        } catch (IllegalArgumentException e) {\n            return null;\n        }\n        List<EcodDomain> doms = domainMap.get(pdbId);\n        if (doms == null) {\n            return null;\n        }\n        // Deep clone\n        List<EcodDomain> clonedDoms = new ArrayList<EcodDomain>(doms.size());\n        for (EcodDomain d : doms) {\n            clonedDoms.add(new EcodDomain(d));\n        }\n        return clonedDoms;\n    } finally {\n        logger.trace(\"UNLOCK readlock\");\n        domainsFileLock.readLock().unlock();\n    }\n}","repo_id":"9","comment":"/**\n * \tpublic EcodInstallation(String cacheLocation) {\n * \t\tthis( cacheLocation, DEFAULT_VERSION );\n * \t}\n *\n * \t/**\n *  Get a list of all ECOD domains for a particular PDB ID\n *  @param id\n *  @return the list of domains, or null if no matching domains were found\n *  @throws IOException\n */\n","repo_name":"biojava-master/","id":1801,"method_signature":"List<EcodDomain> getDomainsForPdb(String)"}