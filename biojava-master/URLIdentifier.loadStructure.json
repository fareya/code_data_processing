{"callee_method_ids":[626,637,636],"callee_method_names":["Map<String, String>.containsKey","Map<String, String>.get","Logger.error","URL.getPath","AtomCache.getFileParsingParams","URL.openStream","AtomCache.getPath","PDBFileReader.setFetchBehavior","AtomCache.getFetchBehavior","PDBFileReader.setObsoleteBehavior","AtomCache.getObsoleteBehavior","PDBFileReader.setFileParsingParameters","AtomCache.getFileParsingParams","PDBFileReader.getStructure"],"method_name":"URLIdentifier.loadStructure","method_implementation":"{\n    StructureFiletype format = StructureFiletype.UNKNOWN;\n    // Use user-specified format\n    try {\n        Map<String, String> params = parseQuery(url);\n        if (params.containsKey(FORMAT_PARAM)) {\n            String formatStr = params.get(FORMAT_PARAM);\n            format = StructureIO.guessFiletype(\".\" + formatStr);\n        }\n    } catch (UnsupportedEncodingException e) {\n        logger.error(\"Unable to decode URL {}\", url, e);\n    }\n    // Guess format from extension\n    if (format == StructureFiletype.UNKNOWN) {\n        format = StructureIO.guessFiletype(url.getPath());\n    }\n    switch(format) {\n        case CIF:\n        case BCIF:\n            return CifStructureConverter.fromURL(url, cache.getFileParsingParams());\n        case MMTF:\n            return MmtfActions.readFromInputStream(url.openStream());\n        default:\n        case PDB:\n            // pdb file based parsing\n            PDBFileReader reader = new PDBFileReader(cache.getPath());\n            reader.setFetchBehavior(cache.getFetchBehavior());\n            reader.setObsoleteBehavior(cache.getObsoleteBehavior());\n            reader.setFileParsingParameters(cache.getFileParsingParams());\n            return reader.getStructure(url);\n    }\n}","repo_id":"9","comment":"/**\n * Load the structure from the URL\n * @return null\n */\n","repo_name":"biojava-master/","id":1070,"method_signature":"Structure loadStructure(AtomCache)"}