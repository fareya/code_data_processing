{"callee_method_ids":[491,720,498,486,725,502],"callee_method_names":["AFPChain.setAlignScore","PairwiseSequenceAligner<ProteinSequence,AminoAcidCompound>.getScore","AFPChain.setCa1Length","AFPChain.setCa2Length","SequencePair<ProteinSequence,AminoAcidCompound>.getLength","SequencePair<ProteinSequence,AminoAcidCompound>.getCompoundAt","SequencePair<ProteinSequence,AminoAcidCompound>.getCompoundAt","SequencePair<ProteinSequence,AminoAcidCompound>.getIndexInQueryAt","SequencePair<ProteinSequence,AminoAcidCompound>.getIndexInTargetAt","Compound.equals","Compound.equals","Atom[].getGroup","Atom[].getGroup","Compound.equals","Atom[].getGroup","Compound.equals","Atom[].getGroup","AFPChain.setAlnbeg1","SequencePair<ProteinSequence,AminoAcidCompound>.getIndexInQueryAt","AFPChain.setAlnbeg2","SequencePair<ProteinSequence,AminoAcidCompound>.getIndexInTargetAt","AFPChain.setGapLen","AFPChain.setAlnseq1","AFPChain.setAlnseq2","AFPChain.setAlnsymb","AFPChain.setIdentity","AFPChain.setSimilarity","AFPChain.setAlnLength","AFPChain.setOptLength","AFPChain.setOptLen","CECalculator.calc_rmsd","AFPChain.setBlockRmsd","AFPChain.setOptRmsd","AFPChain.setTotalRmsdOpt","AFPChain.setChainRmsd","CECalculator.setnAtom","CECalculator.setAlign_se1","CECalculator.setAlign_se2","CECalculator.setLcmp","CECalculator.convertAfpChain","AFPChain.setAlgorithmName","AFPChain.setVersion"],"method_name":"SmithWaterman3Daligner.convert","method_implementation":"{\n    AFPChain afpChain = new AFPChain(algorithmName);\n    int ca1Length = ca1.length;\n    int ca2Length = ca2.length;\n    afpChain.setAlignScore(smithWaterman.getScore());\n    afpChain.setCa1Length(ca1Length);\n    afpChain.setCa2Length(ca2Length);\n    int nrCols = pair.getLength();\n    int nAtom = 0;\n    int nGaps = 0;\n    Atom[] strBuf1 = new Atom[nrCols];\n    Atom[] strBuf2 = new Atom[nrCols];\n    char[] alnseq1 = new char[ca1Length + ca2Length + 1];\n    char[] alnseq2 = new char[ca1Length + ca2Length + 1];\n    char[] alnsymb = new char[ca1Length + ca2Length + 1];\n    Compound gapSymbol = AminoAcidCompoundSet.getAminoAcidCompoundSet().getCompoundForString(\"-\");\n    // aligned positions\n    int pos = 0;\n    int nrIdent = 0;\n    int nrSim = 0;\n    int[] align_se1 = new int[nrCols + 1];\n    int[] align_se2 = new int[nrCols + 1];\n    for (int i = 1; i <= nrCols; i++) {\n        int myI = i - 1;\n        Compound s1 = pair.getCompoundAt(1, i);\n        Compound s2 = pair.getCompoundAt(2, i);\n        // alignment is using internal index start at 1...\n        int pos1 = pair.getIndexInQueryAt(i) - 1;\n        int pos2 = pair.getIndexInTargetAt(i) - 1;\n        if ((!s1.equals(gapSymbol)) && (!s2.equals(gapSymbol))) {\n            strBuf1[nAtom] = ca1[pos1];\n            strBuf2[nAtom] = ca2[pos2];\n            //\n            char l1 = getOneLetter(ca1[pos1].getGroup());\n            char l2 = getOneLetter(ca2[pos2].getGroup());\n            //\n            alnseq1[myI] = Character.toUpperCase(l1);\n            alnseq2[myI] = Character.toUpperCase(l2);\n            alnsymb[myI] = ' ';\n            //\n            if (l1 == l2) {\n                nrIdent++;\n                nrSim++;\n                alnsymb[myI] = '|';\n            } else if (AFPAlignmentDisplay.aaScore(l1, l2) > 0) {\n                nrSim++;\n                alnsymb[myI] = ':';\n            }\n            //\n            align_se1[myI] = pos1;\n            align_se2[myI] = pos2;\n            //\n            pos++;\n            nAtom++;\n        } else {\n            // there is a gap at this position\n            nGaps++;\n            alnsymb[myI] = ' ';\n            align_se1[myI] = -1;\n            align_se2[myI] = -1;\n            if (s1.equals(gapSymbol)) {\n                alnseq1[myI] = '-';\n            } else {\n                char l1 = getOneLetter(ca1[pos1].getGroup());\n                alnseq1[myI] = Character.toUpperCase(l1);\n                align_se1[myI] = pos1;\n            }\n            if (s2.equals(gapSymbol)) {\n                alnseq2[myI] = '-';\n            } else {\n                char l2 = getOneLetter(ca2[pos2].getGroup());\n                alnseq2[myI] = Character.toUpperCase(l2);\n                align_se2[myI] = pos2;\n            }\n        }\n    }\n    afpChain.setAlnbeg1(pair.getIndexInQueryAt(1) - 1);\n    afpChain.setAlnbeg2(pair.getIndexInTargetAt(1) - 1);\n    afpChain.setGapLen(nGaps);\n    afpChain.setAlnseq1(alnseq1);\n    afpChain.setAlnseq2(alnseq2);\n    afpChain.setAlnsymb(alnsymb);\n    // CE uses the aligned pairs as reference not the whole alignment including gaps...\n    afpChain.setIdentity(nrIdent * 1.0 / pos);\n    afpChain.setSimilarity(nrSim * 1.0 / pos);\n    afpChain.setAlnLength(nrCols);\n    afpChain.setOptLength(nAtom);\n    int[] optLen = new int[] { nAtom };\n    afpChain.setOptLen(optLen);\n    if (nAtom < 4)\n        return afpChain;\n    CeParameters params = new CeParameters();\n    CECalculator cecalc = new CECalculator(params);\n    // here we don't store the rotation matrix for the user!\n    double rmsd = cecalc.calc_rmsd(strBuf1, strBuf2, nAtom, true);\n    afpChain.setBlockRmsd(new double[] { rmsd });\n    afpChain.setOptRmsd(new double[] { rmsd });\n    afpChain.setTotalRmsdOpt(rmsd);\n    afpChain.setChainRmsd(rmsd);\n    // let's hijack the CE implementation\n    // and use some utilities from there to\n    // build up the afpChain object\n    cecalc.setnAtom(nAtom);\n    cecalc.setAlign_se1(align_se1);\n    cecalc.setAlign_se2(align_se2);\n    cecalc.setLcmp(nrCols);\n    cecalc.convertAfpChain(afpChain, ca1, ca2);\n    afpChain.setAlgorithmName(algorithmName);\n    afpChain.setVersion(version);\n    return afpChain;\n}","repo_id":"9","comment":"/**\n * Converts a sequence alignment into a structural alignment\n * @param smithWaterman The sequence aligner\n * @param ca1 CA atoms from the query sequence\n * @param ca2 CA atoms from the target sequence\n * @param smithWaterman pairwise Sequence aligner\n * @param pair The sequence alignment calculated by aligner\n * @return an AFPChain encapsulating the alignment in aligPair\n * @throws StructureException\n */\n","repo_name":"biojava-master/","id":516,"method_signature":"AFPChain convert(Atom[], Atom[], SequencePair, PairwiseSequenceAligner)"}