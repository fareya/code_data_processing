{"callee_method_names":["String.length","String.length","String.length","String.substring","String.equals","String.equals","String.equals","StringTokenizer.hasMoreTokens","StringTokenizer.nextToken","Synonym.setScope","Synonym.setCategory","Synonym.setName","String.length"],"method_name":"OboFileParser.parseSynonym","method_implementation":"{\n    //logger.info(\"PARSE SYNONYM \" + key +  \" \" + value);\n    int startIndex = findUnescaped(value, '\"', 0, value.length());\n    if (startIndex == -1)\n        throw new IOException(\"Expected \\\"\" + line + \" \" + linenum);\n    SOPair p = unescape(value, '\"', startIndex + 1, value.length(), true);\n    int defIndex = findUnescaped(value, '[', p.index, value.length());\n    if (defIndex == -1) {\n        throw new IOException(\"Badly formatted synonym. \" + \"No dbxref list found.\" + line + \" \" + linenum);\n    }\n    String leftovers = value.substring(p.index + 1, defIndex).trim();\n    StringTokenizer tokenizer = new StringTokenizer(leftovers, \" \\t\");\n    int scope = Synonym.RELATED_SYNONYM;\n    if (key.equals(OboFileHandler.EXACT_SYNONYM))\n        scope = Synonym.EXACT_SYNONYM;\n    else if (key.equals(OboFileHandler.BROAD_SYNONYM))\n        scope = Synonym.BROAD_SYNONYM;\n    else if (key.equals(OboFileHandler.NARROW_SYNONYM))\n        scope = Synonym.NARROW_SYNONYM;\n    String catID = null;\n    for (int i = 0; tokenizer.hasMoreTokens(); i++) {\n        String token = tokenizer.nextToken();\n        //logger.info(\"TOKEN:\" +token);\n        if (i == 0) {\n            if (\"RELATED\".equals(token))\n                scope = Synonym.RELATED_SYNONYM;\n            else if (\"UNSPECIFIED\".equals(token))\n                scope = Synonym.RELATED_SYNONYM;\n            else if (\"EXACT\".equals(token))\n                scope = Synonym.EXACT_SYNONYM;\n            else if (\"BROAD\".equals(token))\n                scope = Synonym.BROAD_SYNONYM;\n            else if (\"NARROW\".equals(token))\n                scope = Synonym.NARROW_SYNONYM;\n            else\n                throw new IOException(\"Found unexpected scope \" + \"identifier \" + token + line);\n        } else if (i == 1) {\n            catID = token;\n        } else\n            throw new IOException(\"Expected dbxref list,\" + \" instead found \" + token + line);\n    }\n    Synonym synonym = new Synonym();\n    synonym.setScope(scope);\n    synonym.setCategory(catID);\n    synonym.setName(p.str);\n    //logger.info(\"SYNONYM: \" + p.str +\" \" + synonym.getCategory() + \" \" + synonym.getScope());\n    Map<String, Object>[] refs = getDbxrefList(value, defIndex + 1, value.length());\n    // set the refs in the synonym\n    for (Map<String, Object> ref : refs) {\n        @SuppressWarnings(\"unused\")\n        String xref = (String) ref.get(\"xref\");\n        @SuppressWarnings(\"unused\")\n        String desc = (String) ref.get(\"desc\");\n        //logger.info(xref + \" \" + desc);\n        @SuppressWarnings(\"unused\")\n        NestedValue nv = (NestedValue) ref.get(\"nv\");\n        //TODO: add implementation for this...\n    }\n    return synonym;\n}","repo_id":"9","comment":"/**\n * parse the Synonym String from the Term.\n * value can be:\n * <pre>\"ca_bind\" RELATED [uniprot:curation]<\/pre>\n * @param value\n * @return the synonym text\n */\n","repo_name":"biojava-master/","id":337,"method_signature":"Synonym parseSynonym(String, String)"}