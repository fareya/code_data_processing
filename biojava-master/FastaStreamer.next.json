{"callee_method_names":["Iterator<Map.Entry<String, ProteinSequence>>.hasNext","FastaReader<ProteinSequence,AminoAcidCompound>.process","FastaReader<ProteinSequence,AminoAcidCompound>.close","LinkedHashMap.entrySet","Iterator<Map.Entry<String, ProteinSequence>>.hasNext","Iterator<Map.Entry<String, ProteinSequence>>.next","Map.Entry<String, ProteinSequence>.getValue","FastaReader<ProteinSequence,AminoAcidCompound>.close"],"method_name":"FastaStreamer.next","method_implementation":"{\n    try {\n        if (!iterator.hasNext()) {\n            chunk = reader.process(getBatchSize());\n            if (null == chunk) {\n                closed = true;\n                reader.close();\n                return null;\n            }\n            iterator = chunk.entrySet().iterator();\n        }\n        if (iterator.hasNext()) {\n            Map.Entry<String, ProteinSequence> entry = iterator.next();\n            return createSequence(entry.getValue());\n        }\n        closed = true;\n        reader.close();\n    } catch (IOException exception) {\n        throw new UncheckedIOException(String.format(\"I/O error reading the FASTA file from '%s'\", getPath()), exception);\n    }\n    return null;\n}","repo_id":"9","comment":"/**\n * Fetch the next header/protein tuple from the cache.  If the cache is empty, fetch another\n * batch from the source file\n *\n * @param reader\n * \t\tthe input stream from which the FASTA content is read\n * @return the protein sequence\n */\n","repo_name":"biojava-master/","id":2698,"method_signature":"ProteinSequence next(FastaReader)"}