{"callee_method_ids":[2053],"callee_method_names":["Logger.debug","CESymmParameters.getWinSize","CESymmParameters.getMinCoreLength","List<CeSymmResult>.isEmpty","Logger.debug","CESymmParameters.getSymmLevels","List<CeSymmResult>.size","CESymmParameters.getSymmLevels","CESymmParameters.getRefineMethod","CeSymmResult.isSignificant","List<CeSymmResult>.isEmpty","List<CeSymmResult>.add","CeSymmResult.getMultipleAlignment","CeSymmResult.getMultipleAlignment","CeSymmResult.getMultipleAlignment","CESymmParameters.getSSEThreshold","List<CeSymmResult>.isEmpty","List<CeSymmResult>.add","CeSymmResult.getMultipleAlignment","Block.length","Block.size","Block.getAlignRes","Block.getAlignRes","Graph<Integer, DefaultEdge>.addVertex","Graph<Integer, DefaultEdge>.addVertex","Graph<Integer, DefaultEdge>.addEdge","List<CeSymmResult>.add"],"method_name":"CeSymmIterative.iterate","method_implementation":"{\n    logger.debug(\"Starting new iteration...\");\n    // Return if the Atom array is too short\n    if ((atoms.length <= params.getWinSize() || atoms.length <= params.getMinCoreLength()) && !levels.isEmpty()) {\n        logger.debug(\"Aborting iteration due to insufficient Atom array length: %d\", atoms.length);\n        return;\n    }\n    // Return if the maximum levels of symmetry have been reached\n    if (params.getSymmLevels() > 0) {\n        if (levels.size() == params.getSymmLevels())\n            return;\n    }\n    // Perform one level CeSymm alignment\n    CeSymmResult result = CeSymm.analyzeLevel(atoms, params);\n    if (params.getRefineMethod() == RefineMethod.NOT_REFINED || !result.isSignificant()) {\n        if (levels.isEmpty())\n            levels.add(result);\n        return;\n    }\n    // Generate the Atoms of one of the symmetric repeat\n    Integer start = null;\n    int it = 0;\n    while (start == null) {\n        start = result.getMultipleAlignment().getBlocks().get(0).getAlignRes().get(0).get(it);\n        it++;\n    }\n    Integer end = null;\n    it = result.getMultipleAlignment().getBlocks().get(0).getAlignRes().get(0).size() - 1;\n    while (end == null) {\n        end = result.getMultipleAlignment().getBlocks().get(0).getAlignRes().get(0).get(it);\n        it--;\n    }\n    Atom[] atomsR = Arrays.copyOfRange(atoms, start, end + 1);\n    // Check the SSE requirement\n    if (countHelixStrandSSE(atomsR) < params.getSSEThreshold()) {\n        if (levels.isEmpty())\n            levels.add(result);\n        return;\n    }\n    // If symmetric store the residue dependencies in alignment graph\n    Block b = result.getMultipleAlignment().getBlock(0);\n    for (int pos = 0; pos < b.length(); pos++) {\n        for (int su = 0; su < b.size() - 1; su++) {\n            Integer pos1 = b.getAlignRes().get(su).get(pos);\n            Integer pos2 = b.getAlignRes().get(su + 1).get(pos);\n            // Add edge from lower to higher positions\n            if (pos1 != null && pos2 != null) {\n                alignGraph.addVertex(pos1);\n                alignGraph.addVertex(pos2);\n                alignGraph.addEdge(pos1, pos2);\n            }\n        }\n    }\n    // Iterate further on those Atoms (of the first repeat only)\n    levels.add(result);\n    iterate(atomsR);\n}","repo_id":"9","comment":"/**\n * This method runs iteratively the analysis of one level of symmetry with\n * CeSymm on the input Atom array until no more symmetries exist.\n *\n * @param atoms\n *            representative Atom array of the Structure\n * @return true if any symmetry was found, false if asymmetric\n * @throws StructureException\n */\n","repo_name":"biojava-master/","id":2058,"method_signature":"void iterate(Atom[])"}