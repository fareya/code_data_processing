{"callee_method_names":["Reader.read"],"method_name":"BufferedReaderBytesRead.fill","method_implementation":"{\n    int dst;\n    if (markedChar <= UNMARKED) {\n        /* No mark */\n        dst = 0;\n    } else {\n        /* Marked */\n        int delta = nextChar - markedChar;\n        if (delta >= readAheadLimit) {\n            /* Gone past read-ahead limit: Invalidate mark */\n            markedChar = INVALIDATED;\n            readAheadLimit = 0;\n            dst = 0;\n        } else {\n            if (readAheadLimit <= cb.length) {\n                /* Shuffle in the current buffer */\n                System.arraycopy(cb, markedChar, cb, 0, delta);\n                markedChar = 0;\n                dst = delta;\n            } else {\n                /* Reallocate buffer to accommodate read-ahead limit */\n                char[] ncb = new char[readAheadLimit];\n                System.arraycopy(cb, markedChar, ncb, 0, delta);\n                cb = ncb;\n                markedChar = 0;\n                dst = delta;\n            }\n            nextChar = nChars = delta;\n        }\n    }\n    int n;\n    do {\n        n = in.read(cb, dst, cb.length - dst);\n    } while (n == 0);\n    if (n > 0) {\n        nChars = dst + n;\n        nextChar = dst;\n    }\n}","repo_id":"9","comment":"/**\n * Fills the input buffer, taking the mark into account if it is valid.\n */\n","repo_name":"biojava-master/","id":2711,"method_signature":"void fill()"}