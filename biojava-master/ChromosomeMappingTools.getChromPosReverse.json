{"callee_method_names":["List<Integer>.size","Logger.debug","List<Integer>.size","List<Integer>.get","List<Integer>.get","Logger.debug","Logger.debug","Logger.debug","Logger.debug","Logger.isDebugEnabled","StringBuffer.append","StringBuffer.append","StringBuffer.append","StringBuffer.append","StringBuffer.append","Logger.debug","StringBuffer.toString","Logger.debug","Logger.debug","Logger.debug","Logger.debug","Logger.debug","Logger.debug","Logger.debug","Logger.debug","Logger.debug","Logger.debug","Logger.debug","Logger.debug"],"method_name":"ChromosomeMappingTools.getChromPosReverse","method_implementation":"{\n    boolean inCoding = false;\n    int codingLength = 0;\n    if (cdsEnd < cdsStart) {\n        int tmp = cdsEnd;\n        cdsEnd = cdsStart;\n        cdsStart = tmp;\n    }\n    int lengthExons = 0;\n    // map reverse\n    for (int i = exonStarts.size() - 1; i >= 0; i--) {\n        logger.debug(\"Exon #\" + (i + 1) + \"/\" + exonStarts.size());\n        int end = exonStarts.get(i);\n        int start = exonEnds.get(i);\n        if (end < start) {\n            int tmp = end;\n            end = start;\n            start = tmp;\n        }\n        lengthExons += end - start;\n        logger.debug(\"     is \" + cdsPos + \" part of Reverse exon? \" + format(start + 1) + \" - \" + format(end) + \" | \" + (end - start + 1));\n        logger.debug(\"     CDS start: \" + format(cdsStart + 1) + \"-\" + format(cdsEnd) + \" coding length counter:\" + codingLength);\n        if (start + 1 <= cdsEnd && end >= cdsEnd) {\n            // FIRST EXON\n            inCoding = true;\n            int tmpstart = start;\n            if (start < cdsStart) {\n                tmpstart = cdsStart;\n            }\n            // here one of the few places where we don't say start+1\n            int check = codingLength + cdsEnd - tmpstart;\n            logger.debug(\"First Exon    | \" + (check) + \" | \" + format(start + 1) + \" \" + format(end) + \" | \" + (cdsEnd - tmpstart) + \" | \" + cdsPos);\n            if ((check > cdsPos)) {\n                int tmp = cdsPos - codingLength;\n                logger.debug(\" -> found position in UTR exon:  \" + format(cdsPos) + \" \" + format(tmpstart + 1) + \" tmp:\" + format(tmp) + \" cs:\" + format(cdsStart + 1) + \" ce:\" + format(cdsEnd) + \" cl:\" + codingLength);\n                return new ChromPos((cdsEnd - tmp), -1);\n            }\n            // don't add 1 here\n            codingLength += (cdsEnd - tmpstart);\n            boolean debug = logger.isDebugEnabled();\n            if (debug) {\n                StringBuffer b = new StringBuffer();\n                b.append(\"     UTR         :\" + format(cdsEnd + 1) + \" - \" + format(end) + newline);\n                if (tmpstart == start)\n                    b.append(\" ->  \");\n                else\n                    b.append(\" <-> \");\n                b.append(\"Exon        :\" + format(tmpstart + 1) + \" - \" + (cdsEnd) + \" | \" + format(cdsEnd - tmpstart + 1) + \" - \" + codingLength + \" | \" + (codingLength % 3) + newline);\n                // single exon with UTR on both ends\n                if (tmpstart != start)\n                    b.append(\"     UTR         :\" + format(cdsStart) + \" - \" + format(start + 1) + newline);\n                logger.debug(b.toString());\n            }\n        } else if (start <= cdsStart && end >= cdsStart) {\n            // LAST EXON\n            inCoding = false;\n            if (codingLength + end - cdsStart >= cdsPos) {\n                // how many remaining coding nucleotides?\n                int tmp = codingLength + end - cdsStart - cdsPos;\n                logger.debug(\"cdl: \" + codingLength + \" tmp:\" + tmp + \" cdsStart: \" + format(cdsStart));\n                logger.debug(\" -> XXX found position noncoding exon:  cdsPos:\" + cdsPos + \" s:\" + format(start + 1) + \" tmp:\" + format(tmp) + \" cdsStart:\" + (cdsStart + 1) + \" codingLength:\" + codingLength + \" cdsEnd:\" + format(cdsEnd));\n                return new ChromPos((cdsStart + tmp), -1);\n            }\n            codingLength += (end - cdsStart);\n            logger.debug(\" <-  Exon        : \" + format(cdsStart + 1) + \" - \" + format(end) + \" | \" + format(end - cdsStart + 1) + \" | \" + codingLength + \" | \" + (codingLength % 3));\n            logger.debug(\"     UTR         : \" + format(start + 1) + \" - \" + format(cdsStart));\n        } else if (inCoding) {\n            if (codingLength + end - start - 1 >= cdsPos) {\n                int tmp = cdsPos - codingLength;\n                if (tmp > (end - start)) {\n                    tmp = (end - start);\n                    logger.debug(\"changing tmp to {}\", tmp);\n                }\n                logger.debug(\"     \" + cdsPos + \" \" + codingLength + \" | \" + (cdsPos - codingLength) + \" | \" + (end - start) + \" | \" + tmp);\n                logger.debug(\"     Exon        : \" + format(start + 1) + \" - \" + format(end) + \" | \" + format(end - start) + \" | \" + codingLength + \" | \" + (codingLength % 3));\n                logger.debug(\" ->  RRR found position coding exon:  \" + cdsPos + \" \" + format(start + 1) + \" \" + format(end) + \" \" + tmp + \" \" + format(cdsStart + 1) + \" \" + codingLength);\n                return new ChromPos((end - tmp), cdsPos % 3);\n            }\n            // full exon is coding\n            codingLength += (end - start);\n            logger.debug(\"     Exon        : \" + format(start + 1) + \" - \" + format(end) + \" | \" + format(end - start + 1) + \" | \" + codingLength + \" | \" + (codingLength % 3));\n        } else {\n            // e.g. see UBQLN3\n            logger.debug(\" no translation!\");\n        }\n        logger.debug(\"     coding length: \" + codingLength + \"(phase:\" + (codingLength % 3) + \") CDS POS trying to map:\" + cdsPos);\n    }\n    logger.debug(\"length exons: {}\", lengthExons);\n    // could not map, or map over the full length??\n    return new ChromPos(-1, -1);\n}","repo_id":"9","comment":"/**\n * Get the CDS position mapped on the chromosome position\n *\n * @param exonStarts\n * @param exonEnds\n * @param cdsStart\n * @param cdsEnd\n * @return\n */\n","repo_name":"biojava-master/","id":2481,"method_signature":"ChromPos getChromPosReverse(int, List, List, int, int)"}