{"callee_method_ids":[1971],"callee_method_names":["HelixAxisAligner.getSubunits","HelixAxisAligner.getHelixLayers","StringBuilder.append","StringBuilder.append","StringBuilder.append","StringBuilder.append","StringBuilder.append","List<Point3d>.get","StringBuilder.append","StringBuilder.append","StringBuilder.append","StringBuilder.append","StringBuilder.append","List<Point3d>.size","StringBuilder.append","StringBuilder.append","StringBuilder.append","StringBuilder.append","StringBuilder.append","List<Point3d>.get","StringBuilder.append","List<Point3d>.get","StringBuilder.append","StringBuilder.append","StringBuilder.append","StringBuilder.append","StringBuilder.append","StringBuilder.toString"],"method_name":"JmolSymmetryScriptGeneratorH.drawPolyhedron","method_implementation":"{\n    StringBuilder s = new StringBuilder();\n    // for now, return empty script until this has been implemented properly\n    //\t\tif (s.length() == 0)\n    //\t\t\treturn s.toString();\n    //\t\tPoint3d[] vertices = getRepeatUnitCenters();\n    List<Point3d> vertices = helixAxisAligner.getSubunits().getOriginalCenters();\n    vertices = extendUnitCenters(vertices);\n    int index = 0;\n    Color4f c = new Color4f(Color.MAGENTA);\n    //\t\tdouble width = getMaxExtension()*0.015;\n    double width = getMaxExtension() * 0.007;\n    //\t\tList<List<Integer>> layerLines = helixAxisAligner.getHelixLayers().getByLargestContactsNotLowestAngle().getLayerLines();\n    //\t\tlayerLines.addAll(helixAxisAligner.getHelixLayers().getByLowestAngle().getLayerLines());\n    List<List<Integer>> layerLines = helixAxisAligner.getHelixLayers().getByLargestContacts().getLayerLines();\n    for (List<Integer> line : layerLines) {\n        s.append(\"draw polyhedron\");\n        s.append(name);\n        s.append(index++);\n        s.append(\" line\");\n        for (int i : line) {\n            s.append(getJmolPoint(vertices.get(i)));\n        }\n        s.append(\"width \");\n        s.append(fDot2(width));\n        s.append(\" color\");\n        s.append(getJmolColor(c));\n        s.append(\" off;\");\n    }\n    List<Point3d> interiorVertices = interiorCenters(vertices);\n    for (int i = 0; i < vertices.size(); i++) {\n        s.append(\"draw polyhedron\");\n        s.append(name);\n        s.append(index++);\n        s.append(\" line\");\n        s.append(getJmolPoint(vertices.get(i)));\n        s.append(getJmolPoint(interiorVertices.get(i)));\n        s.append(\"width \");\n        s.append(fDot2(width));\n        s.append(\" color\");\n        s.append(getJmolColor(c));\n        s.append(\" off;\");\n    }\n    //\t\tMatrix4d transformation = helixAxisTransformation.getHelixLayers().getByLowestAngle().getTransformation();\n    //\n    //\t\tPoint3d[] vertices2 = SuperPosition.clonePoint3dArray(vertices);\n    //\t\tfor (Point3d p: vertices2) {\n    //\t\t\ttransformation.transform(p);\n    //\t\t}\n    //\n    //\t\t// extend grid by one turn in +z direction\n    //\t\tfor (int[] lineLoop: getLayerLines()) {\n    //\t\t\ts.append(\"draw line\");\n    //\t\t\ts.append(name);\n    //\t\t\ts.append(index++);\n    //\t\t\ts.append(\" line\");\n    //\t\t\tint count = 0;\n    //\t\t\tfor (int i: lineLoop) {\n    //\t\t\t\tfor (Point3d v: vertices) {\n    //\t\t\t\t\tif (v.distance(vertices2[i]) > 0.1) {\n    //\t\t\t\t\t\tcount++;\n    //\t\t\t\t\t\tbreak;\n    //\t\t\t\t\t}\n    //\t\t\t\t}\n    //\t\t\t\tif (count > 0) {\n    //\t\t\t\t\ts.append(getJmolPoint(vertices2[i]));\n    //\t\t\t\t} else {\n    //\t\t\t\t\ts.append(\" \");\n    //\t\t\t\t}\n    //\t\t\t}\n    //\t\t\ts.append(\"width \");\n    //\t\t    s.append(fDot2(width));\n    //\t\t\ts.append(\" color\");\n    //\t\t\ts.append(getJmolColor(c));\n    //\t\t\ts.append(\" off;\");\n    //\t\t}\n    //\n    //\n    //\t\t// extend grid by one turn into -z direction\n    //\t\tPoint3d[] vertices3 = SuperPosition.clonePoint3dArray(vertices);\n    //\t\tMatrix4d m = new Matrix4d();\n    //\t\tm.set(transformation);\n    //\t\tm.invert();\n    //\t\tfor (Point3d p: vertices3) {\n    //\t\t\tm.transform(p);\n    //\t\t}\n    //\n    //\t\tfor (int[] lineLoop: getLayerLines()) {\n    //\t\t\ts.append(\"draw line\");\n    //\t\t\ts.append(name);\n    //\t\t\ts.append(index++);\n    //\t\t\ts.append(\" line\");\n    //\t\t\tint count = 0;\n    //\t\t\tfor (int i: lineLoop) {\n    //\t\t\t\tfor (Point3d v: vertices) {\n    //\t\t\t\t\tif (v.distance(vertices3[i]) > 0.1) {\n    //\t\t\t\t\t\tcount++;\n    //\t\t\t\t\t}\n    //\t\t\t\t}\n    //\t\t\t\tif (count > 0) {\n    //\t\t\t\t\ts.append(getJmolPoint(vertices3[i]));\n    //\t\t\t\t} else {\n    //\t\t\t\t\ts.append(\" \");\n    //\t\t\t\t}\n    //\t\t\t}\n    //\t\t\ts.append(\"width \");\n    //\t\t    s.append(fDot2(width));\n    //\t\t\ts.append(\" color\");\n    //\t\t\ts.append(getJmolColor(c));\n    //\t\t\ts.append(\" off;\");\n    //\t\t}\n    return s.toString();\n}","repo_id":"9","comment":"/**\n * Returns a Jmol script that draws an invisible polyhedron around a structure.\n * Use showPolyhedron() and hidePolyhedron() to toggle visibility.\n * @return Jmol script\n */\n","repo_name":"biojava-master/","id":3413,"method_signature":"String drawPolyhedron()"}