{"callee_method_names":["List<Atom[]>.size","List<Atom[]>.get","List<Atom[]>.get","List<Atom[]>.get","List<Atom[]>.get","Matrix.get","Matrix.set","Matrix.set","Matrix.get","Matrix.get","Matrix.set","Matrix.set","Matrix.get","Matrix.get","Matrix.get","Matrix.set","Matrix.get"],"method_name":"MultipleAlignmentTools.getAverageResidueDistances","method_implementation":"{\n    int size = transformed.size();\n    int length = transformed.get(0).length;\n    Matrix resDist = new Matrix(size, length, -1);\n    // Calculate the average residue distances\n    for (int r1 = 0; r1 < size; r1++) {\n        for (int c = 0; c < transformed.get(r1).length; c++) {\n            Atom refAtom = transformed.get(r1)[c];\n            if (refAtom == null)\n                continue;\n            for (int r2 = r1 + 1; r2 < size; r2++) {\n                Atom atom = transformed.get(r2)[c];\n                if (atom != null) {\n                    double distance = Calc.getDistance(refAtom, atom);\n                    if (resDist.get(r1, c) == -1) {\n                        resDist.set(r1, c, 1 + distance);\n                    } else {\n                        resDist.set(r1, c, resDist.get(r1, c) + distance);\n                    }\n                    if (resDist.get(r2, c) == -1) {\n                        resDist.set(r2, c, 1 + distance);\n                    } else {\n                        resDist.set(r2, c, resDist.get(r2, c) + distance);\n                    }\n                }\n            }\n        }\n    }\n    for (int c = 0; c < length; c++) {\n        int nonNullRes = 0;\n        for (int r = 0; r < size; r++) {\n            if (resDist.get(r, c) != -1)\n                nonNullRes++;\n        }\n        for (int r = 0; r < size; r++) {\n            if (resDist.get(r, c) != -1) {\n                resDist.set(r, c, resDist.get(r, c) / nonNullRes);\n            }\n        }\n    }\n    return resDist;\n}","repo_id":"9","comment":"/**\n * The average residue distance Matrix contains the average distance from\n * each residue to all other residues aligned with it.\n * <p>\n * Complexity: T(n,l) = O(l*n^2), if n=number of structures and l=alignment\n * length.\n *\n * @param transformed\n *            List of Atom arrays containing only the aligned atoms of each\n *            structure, or null if there is a gap.\n * @return Matrix containing all average residue distances. Entry -1 means\n *         there is a gap in the position.\n */\n","repo_name":"biojava-master/","id":660,"method_signature":"Matrix getAverageResidueDistances(List)"}