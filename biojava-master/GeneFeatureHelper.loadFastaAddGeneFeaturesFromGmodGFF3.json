{"callee_method_names":["File.getAbsolutePath"],"method_name":"GeneFeatureHelper.loadFastaAddGeneFeaturesFromGmodGFF3","method_implementation":"{\n    LinkedHashMap<String, DNASequence> dnaSequenceList = FastaReaderHelper.readFastaDNASequence(fastaSequenceFile, lazyloadsequences);\n    LinkedHashMap<String, ChromosomeSequence> chromosomeSequenceList = GeneFeatureHelper.getChromosomeSequenceFromDNASequence(dnaSequenceList);\n    FeatureList listGenes = GFF3Reader.read(gffFile.getAbsolutePath());\n    addGmodGFF3GeneFeatures(chromosomeSequenceList, listGenes);\n    return chromosomeSequenceList;\n}","repo_id":"9","comment":"/**\n * Lots of variations in the ontology or descriptors that can be used in GFF3 which requires writing a custom parser to handle a GFF3 generated or used\n * by a specific application. Probably could be abstracted out but for now easier to handle with custom code to deal with gff3 elements that are not\n * included but can be extracted from other data elements.\n * @param fastaSequenceFile\n * @param gffFile\n * @param lazyloadsequences If set to true then the fasta file will be parsed for accession id but sequences will be read from disk when needed to save memory\n * @return\n * @throws Exception\n */\n","repo_name":"biojava-master/","id":2498,"method_signature":"LinkedHashMap<String,ChromosomeSequence> loadFastaAddGeneFeaturesFromGmodGFF3(File, File, boolean)"}