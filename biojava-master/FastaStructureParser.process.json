{"callee_method_ids":[628],"callee_method_names":["FastaReader<ProteinSequence, AminoAcidCompound>.process","LinkedHashMap<String, ProteinSequence>.values","ProteinSequence[].getAccession","AtomCache.getStructure","ProteinSequence[].getLength"],"method_name":"FastaStructureParser.process","method_implementation":"{\n    if (sequences == null) {\n        // only process once, then return cached values\n        LinkedHashMap<String, ProteinSequence> sequenceMap = reader.process();\n        sequences = sequenceMap.values().toArray(new ProteinSequence[0]);\n        accessions = new String[sequences.length];\n        structures = new Structure[sequences.length];\n        residues = new ResidueNumber[sequences.length][];\n        // Match each sequence  to a series of PDB Residue numbers\n        for (int i = 0; i < sequences.length; i++) {\n            accessions[i] = sequences[i].getAccession().getID();\n            //System.out.println(\"Fetching \"+accession);\n            structures[i] = cache.getStructure(accessions[i]);\n            residues[i] = StructureSequenceMatcher.matchSequenceToStructure(sequences[i], structures[i]);\n            assert (residues[i].length == sequences[i].getLength());\n        }\n    }\n}","repo_id":"9","comment":"/**\n * Parses the fasta file and loads it into memory.\n *\n * Information can be subsequently accessed through\n * {@link #getSequences()},\n * {@link #getStructures()},\n * {@link #getResidues()}, and\n * {@link #getAccessions()}.\n *\n * @throws IOException\n * @throws StructureException\n */\n","repo_name":"biojava-master/","id":1237,"method_signature":"void process()"}