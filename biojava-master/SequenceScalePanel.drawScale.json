{"callee_method_ids":[3339,3339],"callee_method_names":["Graphics2D.getClipBounds","Graphics2D.setColor","CoordManager.getSeqPos","CoordManager.getSeqPos","List<AlignedPosition>.size","List<AlignedPosition>.size","CoordManager.getPanelPos","CoordManager.getPanelPos","Graphics2D.setColor","Graphics2D.fill","Graphics2D.setColor","Graphics2D.fill","List<AlignedPosition>.size","CoordManager.getPanelPos","List<AlignedPosition>.get","AlignedPosition.getPos","Graphics2D.setColor","Graphics2D.fillRect","Graphics2D.setColor","AlignedPosition.getPos","Graphics2D.setColor","Graphics2D.fillRect","Graphics2D.setColor","Graphics2D.drawString","Graphics2D.setColor","Graphics2D.fillRect","Graphics2D.setColor","Graphics2D.drawString","Graphics2D.setColor","Graphics2D.fillRect","Graphics2D.setColor","Graphics2D.drawString","CoordManager.getPanelPos","Graphics2D.drawString"],"method_name":"SequenceScalePanel.drawScale","method_implementation":"{\n    // only draw within the ranges of the Clip\n    Rectangle drawHere = g2D.getClipBounds();\n    g2D.setColor(SCALE_COLOR);\n    int aminosize = Math.round(1 * scale);\n    if (aminosize < 1)\n        aminosize = 1;\n    int startpos = coordManager.getSeqPos(drawHere.x);\n    int endpos = coordManager.getSeqPos(drawHere.x + drawHere.width);\n    if (endpos > apos.size())\n        endpos = apos.size();\n    int l = endpos - startpos + 1;\n    int drawStart = coordManager.getPanelPos(startpos);\n    int drawEnd = coordManager.getPanelPos(l) - DEFAULT_X_START + aminosize;\n    //\t\tSystem.out.println(\"SeqScalePanel drawing scale s:\" + startpos + \" e: \" + endpos +\n    //\t\t\t\t\" ps: \" + drawStart + \" pe:\" + drawEnd  + \" draw.x \" + drawHere.x + \" draw.w \" + drawHere.width +\n    //\t\t\t\t\" scale \" + scale);\n    //\t\tthe frame around the sequence box\n    if (scale < SEQUENCE_SHOW) {\n        g2D.setColor(SEQUENCE_COLOR);\n        //g2D.setColor(Color.blue);\n        Rectangle seqline = new Rectangle(drawStart, y, drawEnd, LINE_HEIGHT);\n        //g2D=  (Graphics2D)g;\n        g2D.fill(seqline);\n        //g2D.setColor(Color.blue);\n        //g2D.draw(seqline);\n    }\n    // the top line for the scale\n    g2D.setColor(SCALE_COLOR);\n    Rectangle baseline = new Rectangle(drawStart, y, drawEnd, 2);\n    g2D.fill(baseline);\n    // draw the vertical ticks\n    int lineH = 11;\n    if (scale <= 3)\n        lineH = 8;\n    for (int gap = startpos; ((gap <= endpos) && (gap < apos.size())); gap++) {\n        int xpos = coordManager.getPanelPos(gap);\n        AlignedPosition m = apos.get(gap);\n        if (m.getPos(position) == -1) {\n            // a gap position\n            g2D.setColor(GAP_COLOR);\n            g2D.fillRect(xpos, y + 2, aminosize + 1, y + lineH);\n            g2D.setColor(GAP_COLOR);\n            continue;\n        }\n        int i = m.getPos(position);\n        if (((i + 1) % 100) == 0) {\n            if (scale > 0.1) {\n                g2D.setColor(TEXT_SCALE_COLOR);\n                g2D.fillRect(xpos, y + 2, aminosize, y + lineH);\n                g2D.setColor(SCALE_COLOR);\n                if (scale < SEQUENCE_SHOW)\n                    g2D.drawString(String.valueOf(i + 1), xpos, y + DEFAULT_Y_STEP);\n            }\n        } else if (((i + 1) % 50) == 0) {\n            if (scale > 1.4) {\n                g2D.setColor(TEXT_SCALE_COLOR);\n                g2D.fillRect(xpos, y + 2, aminosize, y + lineH);\n                g2D.setColor(SCALE_COLOR);\n                if (scale < SEQUENCE_SHOW)\n                    g2D.drawString(String.valueOf(i + 1), xpos, y + DEFAULT_Y_STEP);\n            }\n        } else if (((i + 1) % 10) == 0) {\n            if (scale > 3) {\n                g2D.setColor(TEXT_SCALE_COLOR);\n                g2D.fillRect(xpos, y + 2, aminosize, y + lineH);\n                g2D.setColor(SCALE_COLOR);\n                if (scale < SEQUENCE_SHOW)\n                    g2D.drawString(String.valueOf(i + 1), xpos, y + DEFAULT_Y_STEP);\n            }\n        }\n    }\n    int length = chainLength;\n    if (endpos >= length - 1) {\n        int endPanel = coordManager.getPanelPos(endpos);\n        g2D.drawString(String.valueOf(length), endPanel + 10, y + DEFAULT_Y_STEP);\n    }\n    return y;\n}","repo_id":"9","comment":"/**\n * draw the Scale\n *\n * @param g2D\n * @param y the height on which to draw the scale\n * @return the new y position\n */\n","repo_name":"biojava-master/","id":3376,"method_signature":"int drawScale(Graphics2D, int)"}