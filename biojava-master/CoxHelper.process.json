{"callee_method_ids":[3756,3740,3740,3740,3740,3672,3658,3660,3741,3647,3741,3668,3563],"callee_method_names":["WorkSheet.getRows","WorkSheet.getCellDouble","WorkSheet.getCellDouble","String.length","WorkSheet.getCellDouble","String.length","WorkSheet.getCellDouble","SurvivalInfo.setOrder","SurvivalInfo.setWeight","SurvivalInfo.setStrata","int.contains","WorkSheet.getCell","SurvivalInfo.addUnknownDataTypeVariable","String.length","WorkSheet.getCell","SurvivalInfo.setClusterValue","ArrayList<SurvivalInfo>.add","String.length","CoxR.process","double[][].printStackTrace"],"method_name":"CoxHelper.process","method_implementation":"{\n    try {\n        ArrayList<SurvivalInfo> survivalInfoList = new ArrayList<SurvivalInfo>();\n        int i = 1;\n        for (String row : worksheet.getRows()) {\n            double time = worksheet.getCellDouble(row, timeColumn);\n            double c = worksheet.getCellDouble(row, statusColumn);\n            double weight = 1.0;\n            if (weightColumn != null && weightColumn.length() > 0) {\n                weight = worksheet.getCellDouble(row, weightColumn);\n            }\n            int strata = 0;\n            if (strataColumn != null && strataColumn.length() > 0) {\n                strata = worksheet.getCellDouble(row, strataColumn).intValue();\n            }\n            int censor = (int) c;\n            if (weight <= 0) {\n                //   System.out.println(\"Weight <= 0 Sample=\" + row + \" weight=\" + weight);\n                i++;\n                continue;\n            }\n            SurvivalInfo si = new SurvivalInfo(time, censor);\n            si.setOrder(i);\n            si.setWeight(weight);\n            si.setStrata(strata);\n            for (String column : variables) {\n                if (column.contains(\":\")) {\n                    continue;\n                }\n                String value = worksheet.getCell(row, column);\n                si.addUnknownDataTypeVariable(column, value);\n            }\n            if (clusterColumn != null && clusterColumn.length() > 0) {\n                String v = worksheet.getCell(row, clusterColumn);\n                si.setClusterValue(v);\n            }\n            survivalInfoList.add(si);\n            i++;\n        }\n        boolean cluster = false;\n        boolean robust = false;\n        if (clusterColumn != null && clusterColumn.length() > 0) {\n            cluster = true;\n            robust = true;\n        }\n        //       variables.add(\"TREAT:AGE\");\n        CoxR cox = new CoxR();\n        CoxInfo ci = cox.process(variables, survivalInfoList, useStrata, useWeights, robust, cluster);\n        // System.out.println(ci);\n        //applying Bob Gray's correction for weighted strata wtexamples.docx\n        //           CoxCC.process(ci, survivalInfoList);\n        //           ci.dump();\n        //           ci.calcSummaryValues();\n        return ci;\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return null;\n}","repo_id":"9","comment":"/**\n * @param worksheet\n * @param timeColumn The column representing the event/censor time\n * @param statusColumn The column representing an event=1 and censor=0\n * @param weightColumn For case-cohort data sets may require weighting to reflect the entire cohort\n * @param strataColumn A column representing strata data\n * @param clusterColumn If robost variation calculation is required the cluster column will group samples by the value in this column\n * @param variables The variables to be used in the cox regression analysis. For Interactions using variable1:variable2\n * @param useStrata Boolean to indicate if strata column should be used\n * @param useWeights Boolean to indicate if weight column should be used\n * @return\n */\n","repo_name":"biojava-master/","id":3600,"method_signature":"CoxInfo process(WorkSheet, String, String, String, String, String, ArrayList, boolean, boolean)"}