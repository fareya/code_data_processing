{"callee_method_names":[],"method_name":"StructureUtil.findNearestAtomLinkage","method_implementation":"{\n    List<Atom[]> linkages = findAtomLinkages(group1, group2, potentialNamesOfAtomOnGroup1, potentialNamesOfAtomOnGroup2, ignoreNCLinkage, bondLengthTolerance);\n    Atom[] ret = null;\n    double minDistance = Double.POSITIVE_INFINITY;\n    for (Atom[] linkage : linkages) {\n        double distance;\n        distance = Calc.getDistance(linkage[0], linkage[1]);\n        if (distance < minDistance) {\n            minDistance = distance;\n            ret = linkage;\n        }\n    }\n    return ret;\n}","repo_id":"9","comment":"/**\n * Find a linkage between two groups within tolerance of bond length,\n * from potential atoms.\n * @param group1 the first {@link Group}.\n * @param group2 the second {@link Group}.\n * @param potentialNamesOfAtomOnGroup1 potential names of the atom on the first group.\n * \t\t  If null, search all atoms on the first group.\n * @param potentialNamesOfAtomOnGroup2 potential names of the atom on the second group.\n * \t\t  If null, search all atoms on the second group.\n * @param ignoreNCLinkage true to ignore all N-C linkages\n * @param bondLengthTolerance bond length error tolerance.\n * @return an array of two Atoms that form bond between each other\n *  if found; null, otherwise.\n */\n","repo_name":"biojava-master/","id":279,"method_signature":"Atom[] findNearestAtomLinkage(Group, Group, List, List, boolean, double)"}