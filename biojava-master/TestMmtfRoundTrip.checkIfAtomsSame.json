{"callee_method_names":["Structure.nrModels","Structure.nrModels","Structure.getPDBCode","Structure.getChains","Structure.getChains","List<Chain>.size","List<Chain>.size","Structure.getPDBCode","List<Chain>.size","List<Chain>.get","List<Chain>.get","Chain.getId","Chain.getId","Chain.getAtomGroups","Chain.getAtomGroups","List<Group>.size","List<Group>.size","Structure.getPDBCode","Chain.getId","List<Group>.size","List<Group>.size","List<Group>.size","List<Group>.get","List<Group>.get","Group.getType","Group.getType","Structure.getPDBCode","Group.getPDBName","Group.getType","Group.getPDBName","Group.getType","Group.getChemComp","Group.getChemComp","Group.getChemComp","Group.getChemComp","Group.getPDBName","Group.getChemComp","Group.getChemComp","Group.getType","Group.getType","Group.getPDBName","Group.getPDBName","Group.getResidueNumber","Group.getResidueNumber","Group.getResidueNumber","Group.getResidueNumber","Group.getResidueNumber","Group.getResidueNumber","Group.getAltLocs","Group.getAltLocs","Structure.getPDBCode","Group.getPDBName","Group.getResidueNumber","Group.getAltLocs","Group.getAltLocs","Group.getAtoms","Group.getAtoms","Group.getAltLocs","List<Atom>.add","Group.getAltLocs","List<Atom>.add","List<Atom>.size","List<Atom>.size","Structure.getPDBCode","Group.getResidueNumber","Group.getPDBName","Group.getPDBName","List<Atom>.size","List<Atom>.size","List<Atom>.size","List<Atom>.get","List<Atom>.get","Atom.getGroup","Atom.getGroup","Atom.getCharge","Atom.getCharge","Atom.getCoords","Atom.getCoords","Atom.getTempFactor","Atom.getTempFactor","Atom.getOccupancy","Atom.getOccupancy","Atom.getElement","Atom.getElement","Atom.getName","Atom.getName","Atom.getAltLoc","Atom.getAltLoc","Atom.getBonds","Atom.getBonds","Atom.getBonds","Atom.getBonds","Atom.getBonds","Structure.getPDBCode","Atom.getBonds","Atom.getBonds","Atom.getBonds","Atom.getBonds"],"method_name":"TestMmtfRoundTrip.checkIfAtomsSame","method_implementation":"{\n    // Check the same number of models\n    int numModels = structOne.nrModels();\n    if (numModels != structTwo.nrModels()) {\n        System.out.println(\"Error - diff number models: \" + structOne.getPDBCode());\n        return false;\n    }\n    for (int i = 0; i < numModels; i++) {\n        List<Chain> chainsOne = structOne.getChains(i);\n        List<Chain> chainsTwo = structTwo.getChains(i);\n        if (chainsOne.size() != chainsTwo.size()) {\n            System.out.println(\"Error - diff number chains: \" + structOne.getPDBCode());\n            return false;\n        }\n        // Now make sure they're sorted in the right order\n        sortChains(chainsOne, chainsTwo);\n        // Check that each one has the same number of poly, non-poly and water chains\n        checkDiffChains(structOne, structTwo, i);\n        // Now loop over\n        for (int j = 0; j < chainsOne.size(); j++) {\n            Chain chainOne = chainsOne.get(j);\n            Chain chainTwo = chainsTwo.get(j);\n            // Check they have the same chain id\n            assertEquals(chainOne.getId(), chainTwo.getId());\n            checkSeqresGroups(chainOne, chainTwo);\n            List<Group> groupsOne = chainOne.getAtomGroups();\n            List<Group> groupsTwo = chainTwo.getAtomGroups();\n            if (groupsOne.size() != groupsTwo.size()) {\n                System.out.println(\"Error - diff number groups: \" + structOne.getPDBCode());\n                System.out.println(chainOne.getId() + \":\" + groupsOne.size() + \" \" + groupsTwo.size());\n                return false;\n            }\n            for (int k = 0; k < groupsOne.size(); k++) {\n                Group groupOne = groupsOne.get(k);\n                Group groupTwo = groupsTwo.get(k);\n                // Check if the groups are of the same type\n                if (!groupOne.getType().equals(groupTwo.getType())) {\n                    System.out.println(\"Error - diff group type: \" + structOne.getPDBCode());\n                    System.out.println(groupOne.getPDBName() + \" and type: \" + groupOne.getType());\n                    System.out.println(groupTwo.getPDBName() + \" and type: \" + groupTwo.getType());\n                    ;\n                }\n                // Check the single letter amino acid is correct\n                if (groupOne.getChemComp().getOneLetterCode().length() == 1 && groupTwo.getChemComp().getOneLetterCode().length() == 1) {\n                    if (!groupOne.getChemComp().getOneLetterCode().equals(groupTwo.getChemComp().getOneLetterCode())) {\n                        System.out.println(groupOne.getPDBName());\n                    }\n                    assertEquals(groupOne.getChemComp().getOneLetterCode(), groupTwo.getChemComp().getOneLetterCode());\n                }\n                assertEquals(groupOne.getType(), groupTwo.getType());\n                assertEquals(groupOne.getPDBName(), groupTwo.getPDBName());\n                assertEquals(groupOne.getResidueNumber().getSeqNum(), groupTwo.getResidueNumber().getSeqNum());\n                assertEquals(groupOne.getResidueNumber().getInsCode(), groupTwo.getResidueNumber().getInsCode());\n                assertEquals(groupOne.getResidueNumber().getChainName(), groupTwo.getResidueNumber().getChainName());\n                if (groupTwo.getAltLocs().size() != groupOne.getAltLocs().size()) {\n                    System.out.println(\"Error - diff number alt locs: \" + structOne.getPDBCode() + \" \" + groupOne.getPDBName() + \" \" + groupOne.getResidueNumber().getSeqNum());\n                    System.out.println(groupOne.getAltLocs().size());\n                    System.out.println(groupTwo.getAltLocs().size());\n                }\n                // Get the first conf\n                List<Atom> atomsOne = new ArrayList<>(groupOne.getAtoms());\n                List<Atom> atomsTwo = new ArrayList<>(groupTwo.getAtoms());\n                for (Group altLocOne : groupOne.getAltLocs()) {\n                    for (Atom atomAltLocOne : altLocOne.getAtoms()) {\n                        atomsOne.add(atomAltLocOne);\n                    }\n                }\n                for (Group altLocTwo : groupTwo.getAltLocs()) {\n                    for (Atom atomAltLocTwo : altLocTwo.getAtoms()) {\n                        atomsTwo.add(atomAltLocTwo);\n                    }\n                }\n                if (atomsOne.size() != atomsTwo.size()) {\n                    System.out.println(\"Error - diff number atoms: \" + structOne.getPDBCode());\n                    System.out.println(groupOne.getResidueNumber());\n                    System.out.println(groupOne.getPDBName() + \" vs \" + groupTwo.getPDBName());\n                    System.out.println(atomsOne.size() + \" vs \" + atomsTwo.size());\n                    return false;\n                }\n                // Now sort the atoms\n                sortAtoms(atomsOne, atomsTwo);\n                // Now loop through the atoms\n                for (int l = 0; l < atomsOne.size(); l++) {\n                    Atom atomOne = atomsOne.get(l);\n                    Atom atomTwo = atomsTwo.get(l);\n                    assertEquals(atomOne.getGroup().getPDBName(), atomTwo.getGroup().getPDBName());\n                    assertEquals(atomOne.getCharge(), atomTwo.getCharge());\n                    // Check the coords are the same to three db\n                    assertArrayEquals(atomOne.getCoords(), atomTwo.getCoords(), 0.0009999999);\n                    assertEquals(atomOne.getTempFactor(), atomTwo.getTempFactor(), 0.009999999);\n                    assertEquals(atomOne.getOccupancy(), atomTwo.getOccupancy(), 0.009999999);\n                    assertEquals(atomOne.getElement(), atomTwo.getElement());\n                    assertEquals(atomOne.getName(), atomTwo.getName());\n                    assertEquals(atomOne.getAltLoc(), atomTwo.getAltLoc());\n                    if (i == 0) {\n                        if (atomOne.getBonds() == null) {\n                            if (atomTwo.getBonds() != null) {\n                                System.out.println(\"Null bonds in one and not the other\");\n                                return false;\n                            }\n                        } else if (atomTwo.getBonds() == null) {\n                            System.out.println(\"Null bonds in one and not the other\");\n                            return false;\n                        } else if (atomOne.getBonds().size() != atomTwo.getBonds().size()) {\n                            System.out.println(\"Error different number of bonds: \" + structOne.getPDBCode());\n                            System.out.println(atomOne.getBonds().size() + \" vs. \" + atomTwo.getBonds().size());\n                            System.out.println(atomOne);\n                            System.out.println(atomTwo);\n                            for (Bond bond : atomOne.getBonds()) {\n                                System.out.println(bond);\n                            }\n                            for (Bond bond : atomTwo.getBonds()) {\n                                System.out.println(bond);\n                            }\n                            return false;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return true;\n}","repo_id":"9","comment":"/**\n * Broad test of atom similarity\n * @param structOne the first input structure\n * @param structTwo the second input structure\n * @return\n */\n","repo_name":"biojava-master/","id":2240,"method_signature":"boolean checkIfAtomsSame(Structure, Structure)"}