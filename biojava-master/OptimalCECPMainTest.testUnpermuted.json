{"callee_method_ids":[619,619,619,784,781,802],"callee_method_names":["AtomCache.getAtoms","AtomCache.getAtoms","AtomCache.getAtoms","OptimalCECPMain.alignPermuted","OptimalCECPMain.getParameters","CeMain.align"],"method_name":"OptimalCECPMainTest.testUnpermuted","method_implementation":"{\n    String name1, name2;\n    //small case\n    name1 = \"d1qdmA1\";\n    name2 = \"d1nklA_\";\n    Atom[] ca1 = cache.getAtoms(name1);\n    Atom[] ca2 = cache.getAtoms(name2);\n    // Calculate all alignments initially\n    OptimalCECPMain cecp = new OptimalCECPMain();\n    Atom[] ca2clone = cache.getAtoms(name2);\n    AFPChain cp0 = cecp.alignPermuted(ca1, ca2clone, cecp.getParameters(), 0);\n    CeMain ce = new CeMain();\n    AFPChain nocp = ce.align(ca1, ca2);\n    Assert.assertEquals(nocp, cp0);\n}","repo_id":"9","comment":"/**\n * Basic test that alignPermuted(..., 0) is equivalent to a normal CE alignment.\n *\n * Also checks that {@link AFPChain#equals(Object)} is working the way we expect.\n * @throws IOException\n * @throws StructureException\n */\n","repo_name":"biojava-master/","id":148,"method_signature":"void testUnpermuted()"}