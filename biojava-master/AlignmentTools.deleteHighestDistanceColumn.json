{"callee_method_ids":[489],"callee_method_names":["AFPChain.getOptAln","AFPChain.getBlockRotationMatrix","AFPChain.getBlockShiftVector"],"method_name":"AlignmentTools.deleteHighestDistanceColumn","method_implementation":"{\n    int[][][] optAln = afpChain.getOptAln();\n    int maxBlock = 0;\n    int maxPos = 0;\n    double maxDistance = Double.MIN_VALUE;\n    for (int b = 0; b < optAln.length; b++) {\n        for (int p = 0; p < optAln[b][0].length; p++) {\n            Atom ca2clone = ca2[optAln[b][1][p]];\n            Calc.rotate(ca2clone, afpChain.getBlockRotationMatrix()[b]);\n            Calc.shift(ca2clone, afpChain.getBlockShiftVector()[b]);\n            double distance = Calc.getDistance(ca1[optAln[b][0][p]], ca2clone);\n            if (distance > maxDistance) {\n                maxBlock = b;\n                maxPos = p;\n                maxDistance = distance;\n            }\n        }\n    }\n    return deleteColumn(afpChain, ca1, ca2, maxBlock, maxPos);\n}","repo_id":"9","comment":"/**\n * Find the alignment position with the highest atomic distance between the\n * equivalent atomic positions of the arrays and remove it from the\n * alignment.\n *\n * @param afpChain\n *            original alignment, will be modified\n * @param ca1\n *            atom array, will not be modified\n * @param ca2\n *            atom array, will not be modified\n * @return the original alignment, with the alignment position at the\n *         highest distance removed\n * @throws StructureException\n */\n","repo_name":"biojava-master/","id":606,"method_signature":"AFPChain deleteHighestDistanceColumn(AFPChain, Atom[], Atom[])"}