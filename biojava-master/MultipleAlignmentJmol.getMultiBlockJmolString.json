{"callee_method_names":["StringWriter.append","StringWriter.append","MultipleAlignment.getBlocks","ColorBrewer.getColorPalette","List<Atom[]>.size","StringWriter.append","MultipleAlignment.getBlockSets","Integer.getAlignRes","List<Atom[]>.get","StringWriter.append","StringWriter.append","StringWriter.toString"],"method_name":"MultipleAlignmentJmol.getMultiBlockJmolString","method_implementation":"{\n    StringWriter jmol = new StringWriter();\n    jmol.append(DEFAULT_SCRIPT);\n    jmol.append(\"select *; color lightgrey; backbone 0.1; \");\n    int blockNum = multAln.getBlocks().size();\n    Color[] colors = colorPalette.getColorPalette(blockNum);\n    // For every structure color all the blocks with the printBlock method\n    for (int str = 0; str < transformedAtoms.size(); str++) {\n        jmol.append(\"select */\" + (str + 1) + \"; color lightgrey; model \" + (str + 1) + \"; \");\n        int index = 0;\n        for (BlockSet bs : multAln.getBlockSets()) {\n            for (Block b : bs.getBlocks()) {\n                List<List<Integer>> alignRes = b.getAlignRes();\n                printJmolScript4Block(transformedAtoms.get(str), alignRes, colors[index], jmol, str, index, blockNum);\n                index++;\n            }\n        }\n    }\n    jmol.append(\"model 0;  \");\n    jmol.append(LIGAND_DISPLAY_SCRIPT);\n    return jmol.toString();\n}","repo_id":"9","comment":"/**\n * Colors every Block of the structures with a different color, following\n * the palette. It colors each Block differently, no matter if it is from\n * the same or different BlockSet.\n */\n","repo_name":"biojava-master/","id":3282,"method_signature":"String getMultiBlockJmolString(MultipleAlignment, List, ColorBrewer, boolean)"}