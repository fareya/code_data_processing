{"callee_method_ids":[1317,1323,1323,1689,1687,1691,1701,1688],"callee_method_names":["FileParsingParameters.isHeaderOnly","String.substring","Chain.getName","List<Chain>.add","Chain.addGroup","Chain.setId","Chain.setName","List<List<Chain>>.add","String.substring","String.substring","String.substring","String.substring","Character.equals","Group.setPDBName","Group.setResidueNumber","Group.setHetAtomInFile","String.substring","ResidueNumber.equals","Group.getResidueNumber","Chain.addGroup","Group.trimToSize","Group.setPDBName","Group.setResidueNumber","Group.setHetAtomInFile","Character.equals","Logger.debug","Group.getChain","Group.setChain","Logger.warn","List<Chain>.clear","Logger.warn","String.substring","FileParsingParameters.getAcceptedAtomNames","FileParsingParameters.getAcceptedAtomNames","String.trim","String.substring","AtomImpl.setPDBserial","AtomImpl.setAltLoc","AtomImpl.setName","String.trim","String.substring","String.substring","String.substring","AtomImpl.setCoords","String.length","String.substring","String.length","String.substring","AtomImpl.setOccupancy","AtomImpl.setTempFactor","String.length","String.substring","String.isEmpty","Logger.info","String.trim","Logger.info","String.trim","Logger.info","String.trim","Group.getChemComp","Group.getChemComp","float.getAtomId","String.trim","float.getTypeSymbol","Logger.info","String.trim","Group.getPDBName","Logger.info","String.trim","Logger.warn","String.trim","AtomImpl.setElement","Group.addAtom","Group.addAtom","Group.hasAtom","AtomImpl.getName","Group.addAtom"],"method_name":"PDBFileParser.pdb_ATOM_Handler","method_implementation":"{\n    if (params.isHeaderOnly())\n        return;\n    // let's first get the chain name which will serve to identify if we are starting a new molecule\n    String chainName = line.substring(21, 22);\n    if (\" \".equals(chainName)) {\n        blankChainIdsPresent = true;\n    }\n    if (currentChain != null && !currentChain.getName().equals(chainName)) {\n        // new chain name: another molecule coming\n        startOfMolecule = true;\n    }\n    if (startOfMolecule) {\n        // we add last chain if there was one\n        if (currentChain != null) {\n            currentModel.add(currentChain);\n            // let's not forget adding the last group to the finishing chain\n            if (currentGroup != null) {\n                currentChain.addGroup(currentGroup);\n            }\n        }\n        // we initialise the new molecule to come\n        currentChain = new ChainImpl();\n        // note that the chainId (asym id) is set properly later in assignAsymIds\n        currentChain.setId(chainName);\n        currentChain.setName(chainName);\n    }\n    if (startOfModel) {\n        // we add last model if there was one\n        if (currentModel != null) {\n            allModels.add(currentModel);\n        }\n        // we initialise the model to come\n        currentModel = new ArrayList<>();\n    }\n    // let's get the residue number and see if we need to start a new group\n    String groupCode3 = line.substring(17, 20).trim();\n    String resNum = line.substring(22, 26).trim();\n    Character iCode = line.substring(26, 27).charAt(0);\n    if (iCode == ' ')\n        iCode = null;\n    ResidueNumber residueNumber = new ResidueNumber(chainName, Integer.valueOf(resNum), iCode);\n    //recordName      groupCode3\n    //|                |    resNum\n    //|                |    |   iCode\n    //|     |          | |  |   ||\n    //ATOM      1  N   ASP A  15     110.964  24.941  59.191  1.00 83.44           N\n    //ATOM   1964  N   ARG H 221A      5.963 -16.715  27.669  1.00 28.59           N\n    Character aminoCode1 = StructureTools.get1LetterCode(groupCode3);\n    String recordName = line.substring(0, 6).trim();\n    boolean isHetAtomInFile = false;\n    if (\"HETATM\".equals(recordName)) {\n        // HETATOM RECORDS are treated slightly differently\n        // some modified amino acids that we want to treat as amino acids\n        // can be found as HETATOM records\n        if (aminoCode1 != null && aminoCode1.equals(StructureTools.UNKNOWN_GROUP_LABEL))\n            aminoCode1 = null;\n        isHetAtomInFile = true;\n    }\n    if (startOfMolecule) {\n        currentGroup = getNewGroup(recordName, aminoCode1, groupCode3);\n        currentGroup.setPDBName(groupCode3);\n        currentGroup.setResidueNumber(residueNumber);\n        currentGroup.setHetAtomInFile(isHetAtomInFile);\n    }\n    // resetting states\n    startOfModel = false;\n    startOfMolecule = false;\n    Character altLoc = line.substring(16, 17).charAt(0);\n    Group altGroup = null;\n    // check if residue number is the same ...\n    if (!residueNumber.equals(currentGroup.getResidueNumber())) {\n        currentChain.addGroup(currentGroup);\n        currentGroup.trimToSize();\n        currentGroup = getNewGroup(recordName, aminoCode1, groupCode3);\n        currentGroup.setPDBName(groupCode3);\n        currentGroup.setResidueNumber(residueNumber);\n        currentGroup.setHetAtomInFile(isHetAtomInFile);\n    } else {\n        // same residueNumber, but altLocs...\n        // test altLoc\n        if (!altLoc.equals(' ')) {\n            logger.debug(\"found altLoc! \" + currentGroup + \" \" + altGroup);\n            altGroup = getCorrectAltLocGroup(altLoc, recordName, aminoCode1, groupCode3);\n            if (altGroup.getChain() == null) {\n                // need to set current chain\n                altGroup.setChain(currentChain);\n            }\n        }\n    }\n    atomCount++;\n    if (atomCount == atomCAThreshold) {\n        // throw away the SEQRES lines - too much to deal with...\n        logger.warn(\"more than \" + atomCAThreshold + \" atoms in this structure, ignoring the SEQRES lines\");\n        seqResChains.clear();\n        switchCAOnly();\n    }\n    if (atomCount == loadMaxAtoms) {\n        logger.warn(\"File has more atoms than max specified in parsing parameters ({}). Ignoring atoms after line: {}\", loadMaxAtoms, line);\n        return;\n    }\n    if (atomCount > loadMaxAtoms) {\n        return;\n    }\n    //          1         2         3         4         5         6\n    //012345678901234567890123456789012345678901234567890123456789\n    //ATOM      1  N   MET     1      20.154  29.699   5.276   1.0\n    //ATOM    112  CA  ASP   112      41.017  33.527  28.371  1.00  0.00\n    //ATOM     53  CA  MET     7      23.772  33.989 -21.600  1.00  0.00           C\n    //ATOM    112  CA  ASP   112      37.613  26.621  33.571     0     0\n    String fullname = line.substring(12, 16);\n    // check for CA only if requested\n    if (parseCAonly) {\n        // yes , user wants to get CA only\n        // only parse CA atoms...\n        if (!\" CA \".equals(fullname)) {\n            //System.out.println(\"ignoring \" + line);\n            atomCount--;\n            return;\n        }\n    }\n    if (params.getAcceptedAtomNames() != null) {\n        boolean found = false;\n        for (String ok : params.getAcceptedAtomNames()) {\n            //System.out.println(ok + \"< >\" + fullname +\"<\");\n            if (ok.equals(fullname.trim())) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            atomCount--;\n            return;\n        }\n    }\n    // create new atom\n    int pdbnumber = Integer.parseInt(line.substring(6, 11).trim());\n    AtomImpl atom = new AtomImpl();\n    atom.setPDBserial(pdbnumber);\n    atom.setAltLoc(altLoc);\n    atom.setName(fullname.trim());\n    double x = Double.parseDouble(line.substring(30, 38).trim());\n    double y = Double.parseDouble(line.substring(38, 46).trim());\n    double z = Double.parseDouble(line.substring(46, 54).trim());\n    double[] coords = new double[3];\n    coords[0] = x;\n    coords[1] = y;\n    coords[2] = z;\n    atom.setCoords(coords);\n    float occu = 1.0f;\n    if (line.length() > 59) {\n        try {\n            // occu and tempf are sometimes not used :-/\n            occu = Float.parseFloat(line.substring(54, 60).trim());\n        } catch (NumberFormatException e) {\n        }\n    }\n    float tempf = 0.0f;\n    if (line.length() > 65) {\n        try {\n            tempf = Float.parseFloat(line.substring(60, 66).trim());\n        } catch (NumberFormatException e) {\n        }\n    }\n    atom.setOccupancy(occu);\n    atom.setTempFactor(tempf);\n    // Parse element from the element field. If this field is\n    // missing (i.e. misformatted PDB file), then parse the\n    // element from the chemical component.\n    Element element = Element.R;\n    boolean guessElement = true;\n    if (line.length() > 77) {\n        // parse element from element field\n        String elementSymbol = line.substring(76, 78).trim();\n        if (elementSymbol.isEmpty()) {\n            logger.info(\"Element column was empty for atom {} {}. Assigning atom element \" + \"from Chemical Component Dictionary information\", fullname.trim(), pdbnumber);\n        } else {\n            try {\n                element = Element.valueOfIgnoreCase(elementSymbol);\n                guessElement = false;\n            } catch (IllegalArgumentException e) {\n                logger.info(\"Element {} of atom {} {} was not recognised. Assigning atom element \" + \"from Chemical Component Dictionary information\", elementSymbol, fullname.trim(), pdbnumber);\n            }\n        }\n    } else {\n        logger.info(\"Missformatted PDB file: element column of atom {} {} is not present. \" + \"Assigning atom element from Chemical Component Dictionary information\", fullname.trim(), pdbnumber);\n    }\n    if (guessElement) {\n        String elementSymbol = null;\n        if (currentGroup.getChemComp() != null) {\n            for (ChemCompAtom a : currentGroup.getChemComp().getAtoms()) {\n                if (a.getAtomId().equals(fullname.trim())) {\n                    elementSymbol = a.getTypeSymbol();\n                    break;\n                }\n            }\n            if (elementSymbol == null) {\n                logger.info(\"Atom name {} was not found in the Chemical Component Dictionary information of {}. \" + \"Assigning generic element R to it\", fullname.trim(), currentGroup.getPDBName());\n            } else {\n                try {\n                    element = Element.valueOfIgnoreCase(elementSymbol);\n                } catch (IllegalArgumentException e) {\n                    // this can still happen for cases like UNK\n                    logger.info(\"Element symbol {} found in chemical component dictionary for Atom {} {} could not be recognised as a known element. \" + \"Assigning generic element R to it\", elementSymbol, fullname.trim(), pdbnumber);\n                }\n            }\n        } else {\n            logger.warn(\"Chemical Component Dictionary information was not found for Atom name {}. \" + \"Assigning generic element R to it\", fullname.trim());\n        }\n    }\n    atom.setElement(element);\n    //see if chain_id is one of the previous chains ...\n    if (altGroup != null) {\n        altGroup.addAtom(atom);\n        altGroup = null;\n    } else {\n        currentGroup.addAtom(atom);\n    }\n    // make sure that main group has all atoms\n    // GitHub issue: #76\n    if (!currentGroup.hasAtom(atom.getName())) {\n        currentGroup.addAtom(atom);\n    }\n}","repo_id":"9","comment":"/**\n * Handler for ATOM.\n * Record Format:\n *\n * <pre>\n * ATOM      1  N   ASP A  15     110.964  24.941  59.191  1.00 83.44           N\n *\n * COLUMNS        DATA TYPE       FIELD         DEFINITION\n * ---------------------------------------------------------------------------------\n * 1 -  6        Record name     \"ATOM  \"\n * 7 - 11        Integer         serial        Atom serial number.\n * 13 - 16        Atom            name          Atom name.\n * 17             Character       altLoc        Alternate location indicator.\n * 18 - 20        Residue name    resName       Residue name.\n * 22             Character       chainID       Chain identifier.\n * 23 - 26        Integer         resSeq        Residue sequence number.\n * 27             AChar           iCode         Code for insertion of residues.\n * 31 - 38        Real(8.3)       x             Orthogonal coordinates for X in Angstroms.\n * 39 - 46        Real(8.3)       y             Orthogonal coordinates for Y in Angstroms.\n * 47 - 54        Real(8.3)       z             Orthogonal coordinates for Z in Angstroms.\n * 55 - 60        Real(6.2)       occupancy     Occupancy.\n * 61 - 66        Real(6.2)       tempFactor    Temperature factor.\n * 73 - 76        LString(4)      segID         Segment identifier, left-justified.\n * 77 - 78        LString(2)      element       Element symbol, right-justified.\n * 79 - 80        LString(2)      charge        Charge on the atom.\n * <\/pre>\n */\n","repo_name":"biojava-master/","id":1179,"method_signature":"void pdb_ATOM_Handler(String)"}