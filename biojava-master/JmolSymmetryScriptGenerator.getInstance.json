{"callee_method_names":["AxisAligner.getSymmetry","String.startsWith","String.startsWith"],"method_name":"JmolSymmetryScriptGenerator.getInstance","method_implementation":"{\n    String symmetry = axisAligner.getSymmetry();\n    if (\"C1\".equals(symmetry)) {\n        return new JmolSymmetryScriptGeneratorC1((RotationAxisAligner) axisAligner, name);\n    } else if (symmetry.startsWith(\"C\")) {\n        return new JmolSymmetryScriptGeneratorCn((RotationAxisAligner) axisAligner, name);\n    } else if (symmetry.startsWith(\"D\")) {\n        return new JmolSymmetryScriptGeneratorDn((RotationAxisAligner) axisAligner, name);\n    } else if (\"T\".equals(symmetry)) {\n        return new JmolSymmetryScriptGeneratorT((RotationAxisAligner) axisAligner, name);\n    } else if (\"O\".equals(symmetry)) {\n        return new JmolSymmetryScriptGeneratorO((RotationAxisAligner) axisAligner, name);\n    } else if (\"I\".equals(symmetry)) {\n        return new JmolSymmetryScriptGeneratorI((RotationAxisAligner) axisAligner, name);\n    } else if (\"H\".equals(symmetry)) {\n        return new JmolSymmetryScriptGeneratorH((HelixAxisAligner) axisAligner, name);\n    }\n    return null;\n}","repo_id":"9","comment":"/**\n * Returns an instance of a JmolSymmetryScriptGenerator, based on the symmetry of a structure (factory method)\n * @param axisAligner\n * @param rotationGroup\n * @return instance of JmolSymmetryScriptGenerator\n */\n","repo_name":"biojava-master/","id":3380,"method_signature":"JmolSymmetryScriptGenerator getInstance(AxisAligner, String)"}