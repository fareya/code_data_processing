{"callee_method_names":["Grid.getIAtoms","Grid.getJAtoms","Grid.getCutoff","Point3d[].distance","List<Contact>.add","Point3d[].distance","List<Contact>.add"],"method_name":"GridCell.getContactsWithinCell","method_implementation":"{\n    List<Contact> contacts = new ArrayList<Contact>();\n    Point3d[] iAtoms = grid.getIAtoms();\n    Point3d[] jAtoms = grid.getJAtoms();\n    double cutoff = grid.getCutoff();\n    if (jAtoms == null) {\n        for (int i : iIndices) {\n            for (int j : iIndices) {\n                if (j > i) {\n                    double distance = iAtoms[i].distance(iAtoms[j]);\n                    if (distance < cutoff)\n                        contacts.add(new Contact(i, j, distance));\n                }\n            }\n        }\n    } else {\n        for (int i : iIndices) {\n            for (int j : jIndices) {\n                double distance = iAtoms[i].distance(jAtoms[j]);\n                if (distance < cutoff)\n                    contacts.add(new Contact(i, j, distance));\n            }\n        }\n    }\n    return contacts;\n}","repo_id":"9","comment":"/**\n * Calculates all distances of atoms within this cell returning those that are within the given cutoff\n * as a list of Contacts containing the indices of the pair and the calculated distance.\n *\n * If {@link Grid#getJAtoms()} is null, distances are within the iAtoms only\n * @return\n */\n","repo_name":"biojava-master/","id":922,"method_signature":"List<Contact> getContactsWithinCell()"}