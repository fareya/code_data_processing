{"callee_method_names":["Matrix4d.set","Matrix4d.setTranslation","SuperPosition.getRmsd","SuperPosition.getRmsd","Logger.info"],"method_name":"TestSuperPositionQCP.testSymmetryQCP","method_implementation":"{\n    // Generate an array of points with symmetry\n    Point3d[] set1 = new Point3d[16];\n    set1[0] = new Point3d(14.065934, 47.068832, -32.895836);\n    set1[1] = new Point3d(-14.065934, -47.068832, -32.895836);\n    set1[2] = new Point3d(-47.068832, 14.065934, -32.895836);\n    set1[3] = new Point3d(47.068832, -14.065934, -32.895836);\n    set1[4] = new Point3d(-14.065934, 47.068832, 32.895836);\n    set1[5] = new Point3d(14.065934, -47.068832, 32.895836);\n    set1[6] = new Point3d(47.068832, 14.065934, 32.895836);\n    set1[7] = new Point3d(-47.068832, -14.065934, 32.895836);\n    set1[8] = new Point3d(43.813946, 22.748293, -32.14434);\n    set1[9] = new Point3d(-43.813946, -22.748293, -32.14434);\n    set1[10] = new Point3d(-22.748293, 43.813946, -32.14434);\n    set1[11] = new Point3d(22.748293, -43.813946, -32.14434);\n    set1[12] = new Point3d(-43.813946, 22.748293, 32.14434);\n    set1[13] = new Point3d(43.813946, -22.748293, 32.14434);\n    set1[14] = new Point3d(22.748293, 43.813946, 32.14434);\n    set1[15] = new Point3d(-22.748293, -43.813946, 32.14434);\n    Point3d[] set2 = CalcPoint.clonePoint3dArray(set1);\n    // Use a random transformation to set2\n    AxisAngle4d rotAxis = new AxisAngle4d(0.440, 0.302, 0.845, 1.570);\n    Vector3d translation = new Vector3d(0.345, 2.453, 5.324);\n    Matrix4d transform = new Matrix4d();\n    transform.set(rotAxis);\n    transform.setTranslation(translation);\n    CalcPoint.transform(transform, set2);\n    // Use Quaternion superposition to obtain the RMSD\n    SuperPosition algorithm = new SuperPositionQuat(false);\n    long quatStart = System.nanoTime();\n    double quatrmsd = algorithm.getRmsd(set1, set2);\n    long quatTime = (System.nanoTime() - quatStart) / 1000;\n    // Use QCP algorithm to get the RMSD\n    algorithm = new SuperPositionQCP(false);\n    long qcpStart = System.nanoTime();\n    double qcprmsd = algorithm.getRmsd(set1, set2);\n    long qcpTime = (System.nanoTime() - qcpStart) / 1000;\n    LOGGER.info(String.format(\"RMSD Symmetry: Quat time: %d us\" + \", QCP time: %d us\", quatTime, qcpTime));\n    // Check that the returned RMSDs are equal\n    assertEquals(quatrmsd, qcprmsd, 0.001);\n}","repo_id":"9","comment":"/**\n * Test case proposed by Peter Rose from his observations about quaternary\n * symmetry artifacts with the QCP algorithm.\n */\n","repo_name":"biojava-master/","id":2308,"method_signature":"void testSymmetryQCP()"}