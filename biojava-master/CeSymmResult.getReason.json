{"callee_method_ids":[507],"callee_method_names":["AFPChain.getTMScore","CESymmParameters.getUnrefinedScoreThreshold","CESymmParameters.getRefineMethod","MultipleAlignment.getScore","SymmetryAxes.getNumLevels","SymmetryAxes.getNumLevels","SymmetryAxes.getElementaryAxis"],"method_name":"CeSymmResult.getReason","method_implementation":"{\n    // Cases:\n    // 1. Asymmetric because insignificant self-alignment (1itb.A_1-100)\n    double tm = selfAlignment.getTMScore();\n    if (tm < params.getUnrefinedScoreThreshold()) {\n        return String.format(\"Insignificant self-alignment (TM=%.2f)\", tm);\n    }\n    // 2. Asymmetric because order detector returned 1\n    if (numRepeats == 1) {\n        return String.format(\"Order detector found asymmetric alignment (TM=%.2f)\", tm);\n    }\n    // Check that the user requested refinement\n    if (params.getRefineMethod() != RefineMethod.NOT_REFINED) {\n        // 3. Asymmetric because refinement failed\n        if (!refined) {\n            return \"Refinement failed\";\n        }\n        tm = multipleAlignment.getScore(MultipleAlignmentScorer.AVGTM_SCORE);\n        // 4. Asymmetric because refinement & optimization were not\n        // significant\n        if (!isSignificant()) {\n            return String.format(\"Refinement was not significant (TM=%.2f)\", tm);\n        }\n    } else {\n        // 4. Not refined, but result was not significant\n        if (!isSignificant()) {\n            return String.format(\"Result was not significant (TM=%.2f)\", tm);\n        }\n    }\n    String hierarchical = \"\";\n    if (axes.getNumLevels() > 1) {\n        hierarchical = String.format(\"; Contains %d levels of symmetry\", axes.getNumLevels());\n    }\n    // 5. Symmetric.\n    // a. Open. Give # repeats (1n0r.A)\n    if (axes.getElementaryAxis(0).getSymmType() == SymmetryType.OPEN) {\n        return String.format(\"Contains %d open repeats (TM=%.2f)%s\", getNumRepeats(), tm, hierarchical);\n    }\n    // b. Closed, non-hierarchical (1itb.A)\n    // c. Closed, heirarchical (4gcr)\n    return String.format(\"Significant (TM=%.2f)%s\", tm, hierarchical);\n}","repo_id":"9","comment":"/**\n * Return a String describing the reasons for the CE-Symm final decision in\n * this particular result.\n *\n * @return String decision reason\n */\n","repo_name":"biojava-master/","id":2056,"method_signature":"String getReason()"}