{"callee_method_ids":[2803,2803,2803,2803],"callee_method_names":["GenbankProxySequenceReader<AminoAcidCompound>.getHeaderParser","GenbankProxySequenceReader<AminoAcidCompound>.getHeader","GenbankProxySequenceReader<NucleotideCompound>.getHeaderParser","GenbankProxySequenceReader<NucleotideCompound>.getHeader","ClasspathResource.getInputStream","LinkedHashMap<String, DNASequence>.values","Logger.debug","ProteinSequence.getSequenceAsString","ClasspathResource.getInputStream","LinkedHashMap<String, ProteinSequence>.values","Logger.debug","ProteinSequence.getSequenceAsString","ClasspathResource.getInputStream","GenbankReader<DNASequence, NucleotideCompound>.process","Logger.debug","ClasspathResource.getInputStream","GenbankReader<ProteinSequence, AminoAcidCompound>.process","Logger.debug"],"method_name":"GenbankCookbookTest.testProcess","method_implementation":"{\n    /*\n\t\t * Method 1: With the GenbankProxySequenceReader\n\t\t */\n    //Try with the GenbankProxySequenceReader\n    GenbankProxySequenceReader<AminoAcidCompound> genbankProteinReader = new GenbankProxySequenceReader<AminoAcidCompound>(System.getProperty(\"java.io.tmpdir\"), \"NP_000257\", AminoAcidCompoundSet.getAminoAcidCompoundSet());\n    ProteinSequence proteinSequence = new ProteinSequence(genbankProteinReader);\n    genbankProteinReader.getHeaderParser().parseHeader(genbankProteinReader.getHeader(), proteinSequence);\n    //logger.info(\"Sequence({},{}) = {}...\", proteinSequence.getAccession(), proteinSequence.getLength(), proteinSequence.getSequenceAsString().substring(0, 10));\n    GenbankProxySequenceReader<NucleotideCompound> genbankDNAReader = new GenbankProxySequenceReader<NucleotideCompound>(System.getProperty(\"java.io.tmpdir\"), \"NM_001126\", DNACompoundSet.getDNACompoundSet());\n    DNASequence dnaSequence = new DNASequence(genbankDNAReader);\n    genbankDNAReader.getHeaderParser().parseHeader(genbankDNAReader.getHeader(), dnaSequence);\n    //logger.info(\"Sequence({},{}) = {}...\", dnaSequence.getAccession(), dnaSequence.getLength(), dnaSequence.getSequenceAsString().substring(0, 10));\n    /*\n\t\t * Method 2: With the GenbankReaderHelper\n\t\t */\n    //Try with the GenbankReaderHelper\n    ClasspathResource dnaResource = new ClasspathResource(\"NM_000266.gb\", true);\n    //File dnaFile = new File(\"src/test/resources/NM_000266.gb\");\n    //File protFile = new File(\"src/test/resources/BondFeature.gb\");\n    ClasspathResource protResource = new ClasspathResource(\"BondFeature.gb\");\n    LinkedHashMap<String, DNASequence> dnaSequences = GenbankReaderHelper.readGenbankDNASequence(dnaResource.getInputStream());\n    for (DNASequence sequence : dnaSequences.values()) {\n        logger.debug(\"DNA Sequence: {}\", sequence.getSequenceAsString());\n    }\n    LinkedHashMap<String, ProteinSequence> protSequences = GenbankReaderHelper.readGenbankProteinSequence(protResource.getInputStream());\n    for (ProteinSequence sequence : protSequences.values()) {\n        logger.debug(\"Protein Sequence: {}\", sequence.getSequenceAsString());\n    }\n    /*\n\t\t * Method 3: With the GenbankReader Object\n\t\t */\n    //Try reading with the GanbankReader\n    GenbankReader<DNASequence, NucleotideCompound> dnaReader = new GenbankReader<DNASequence, NucleotideCompound>(dnaResource.getInputStream(), new GenericGenbankHeaderParser<DNASequence, NucleotideCompound>(), new DNASequenceCreator(DNACompoundSet.getDNACompoundSet()));\n    dnaSequences = dnaReader.process();\n    logger.debug(\"DNA Sequence: {}\", dnaSequences);\n    GenbankReader<ProteinSequence, AminoAcidCompound> protReader = new GenbankReader<ProteinSequence, AminoAcidCompound>(protResource.getInputStream(), new GenericGenbankHeaderParser<ProteinSequence, AminoAcidCompound>(), new ProteinSequenceCreator(AminoAcidCompoundSet.getAminoAcidCompoundSet()));\n    protSequences = protReader.process();\n    logger.debug(\"Protein Sequence: {}\", protSequences);\n}","repo_id":"9","comment":"/**\n * Test of process method, of class GenbankReader.\n */\n","repo_name":"biojava-master/","id":3226,"method_signature":"void testProcess()"}