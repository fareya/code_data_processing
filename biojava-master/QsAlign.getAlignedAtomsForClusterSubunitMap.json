{"callee_method_ids":[1666,1666],"callee_method_names":["Map<Integer,Map<Integer,Integer>>.keySet","List<SubunitCluster>.get","Map<Integer,Map<Integer,Integer>>.get","SOPair.getKey","SOPair.getValue","List<Atom>.addAll","SubunitCluster.getAlignedAtomsSubunit","List<Atom>.addAll","SubunitCluster.getAlignedAtomsSubunit","List<Atom>.toArray","List<Atom>.toArray"],"method_name":"QsAlign.getAlignedAtomsForClusterSubunitMap","method_implementation":"{\n    List<Atom> atomArray1 = new ArrayList<>();\n    List<Atom> atomArray2 = new ArrayList<>();\n    // For each cluster of subunits\n    for (int key : clusterSubunitMap.keySet()) {\n        // Obtain the cluster and the alignment in it\n        SubunitCluster cluster = clusters.get(key);\n        // For each subunit matching in the cluster\n        for (Entry<Integer, Integer> pair : clusterSubunitMap.get(key).entrySet()) {\n            int i = pair.getKey();\n            int j = pair.getValue();\n            // Apend atoms to the arrays\n            atomArray1.addAll(Arrays.asList(cluster.getAlignedAtomsSubunit(i)));\n            atomArray2.addAll(Arrays.asList(cluster.getAlignedAtomsSubunit(j)));\n        }\n    }\n    return new Pair<>(atomArray1.toArray(new Atom[0]), atomArray2.toArray(new Atom[0]));\n}","repo_id":"9","comment":"/**\n * Returns a pair of Atom arrays corresponding to the alignment of subunit\n * matchings, in order of appearance. Superposition of the two Atom sets\n * gives the transformation of the complex.\n * <p>\n * Utility method to cumulative calculate the alignment Atoms.\n *\n * @param clusters\n *            List of SubunitClusters\n * @param clusterSubunitMap\n *            map from cluster id to subunit matching\n * @return pair of atom arrays to be superposed\n */\n","repo_name":"biojava-master/","id":443,"method_signature":"Pair<Atom[]> getAlignedAtomsForClusterSubunitMap(List, Map)"}