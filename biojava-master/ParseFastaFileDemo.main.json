{"callee_method_ids":[2626],"callee_method_names":["Runtime.totalMemory","Runtime.freeMemory","Runtime.freeMemory","Runtime.totalMemory","Runtime.maxMemory","File.exists","InputStreamProvider.getInputStream","FastaReader<ProteinSequence, AminoAcidCompound>.process","LinkedHashMap<String, ProteinSequence>.keySet","LinkedHashMap<String, ProteinSequence>.get"],"method_name":"ParseFastaFileDemo.main","method_implementation":"{\n    int mb = 1024 * 1024;\n    //Getting the runtime reference from system\n    Runtime runtime = Runtime.getRuntime();\n    System.out.println(\"##### Heap utilization statistics [MB] #####\");\n    //Print used memory\n    System.out.println(\"Used Memory:\" + (runtime.totalMemory() - runtime.freeMemory()) / mb);\n    //Print free memory\n    System.out.println(\"Free Memory:\" + runtime.freeMemory() / mb);\n    //Print total available memory\n    System.out.println(\"Total Memory:\" + runtime.totalMemory() / mb);\n    //Print Maximum available memory\n    System.out.println(\"Max Memory:\" + runtime.maxMemory() / mb);\n    if (args.length < 1) {\n        System.err.println(\"First argument needs to be path to fasta file\");\n        return;\n    }\n    File f = new File(args[0]);\n    if (!f.exists()) {\n        System.err.println(\"File does not exist \" + args[0]);\n        return;\n    }\n    long timeS = System.currentTimeMillis();\n    // automatically uncompress files using InputStreamProvider\n    InputStreamProvider isp = new InputStreamProvider();\n    InputStream inStream = isp.getInputStream(f);\n    FastaReader<ProteinSequence, AminoAcidCompound> fastaReader = new FastaReader<ProteinSequence, AminoAcidCompound>(inStream, new GenericFastaHeaderParser<ProteinSequence, AminoAcidCompound>(), new ProteinSequenceCreator(AminoAcidCompoundSet.getAminoAcidCompoundSet()));\n    LinkedHashMap<String, ProteinSequence> b;\n    int nrSeq = 0;\n    while ((b = fastaReader.process(100)) != null) {\n        for (String key : b.keySet()) {\n            nrSeq++;\n            System.out.println(nrSeq + \" : \" + key + \" \" + b.get(key));\n            if (nrSeq % 100000 == 0)\n                System.out.println(nrSeq);\n        }\n    }\n    long timeE = System.currentTimeMillis();\n    System.out.println(\"parsed a total of \" + nrSeq + \" TREMBL sequences! in \" + (timeE - timeS));\n}","repo_id":"9","comment":"/**\n * e.g. download ftp://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/complete/uniprot_trembl.fasta.gz\n * and pass in path to local location of file\n *\n * @param args\n */\n","repo_name":"biojava-master/","id":2504,"method_signature":"void main(String[])"}