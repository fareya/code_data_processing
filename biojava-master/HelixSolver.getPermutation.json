{"callee_method_names":["QuatSymmetrySubunits.getOriginalCenters","QuatSymmetrySubunits.getClusterIds","List<Point3d>.size","List<Point3d>.size","List<Point3d>.size","List<Point3d>.size","List<Point3d>.get","Matrix4d.transform","List<Point3d>.size","List<Integer>.get","List<Integer>.get","Point3d.distanceSquared","List<Point3d>.get","List<Integer>.size","List<Integer>.add"],"method_name":"HelixSolver.getPermutation","method_implementation":"{\n    double rmsdThresholdSq = Math.pow(this.parameters.getRmsdThreshold(), 2);\n    List<Point3d> centers = subunits.getOriginalCenters();\n    List<Integer> seqClusterId = subunits.getClusterIds();\n    List<Integer> permutations = new ArrayList<Integer>(centers.size());\n    double[] dSqs = new double[centers.size()];\n    boolean[] used = new boolean[centers.size()];\n    Arrays.fill(used, false);\n    for (int i = 0; i < centers.size(); i++) {\n        Point3d tCenter = new Point3d(centers.get(i));\n        transformation.transform(tCenter);\n        int permutation = -1;\n        double minDistSq = Double.MAX_VALUE;\n        for (int j = 0; j < centers.size(); j++) {\n            if (Objects.equals(seqClusterId.get(i), seqClusterId.get(j))) {\n                if (!used[j]) {\n                    double dSq = tCenter.distanceSquared(centers.get(j));\n                    if (dSq < minDistSq && dSq <= rmsdThresholdSq) {\n                        minDistSq = dSq;\n                        permutation = j;\n                        dSqs[j] = dSq;\n                    }\n                }\n            }\n        }\n        // can't map to itself\n        if (permutations.size() == permutation) {\n            permutation = -1;\n        }\n        if (permutation != -1) {\n            used[permutation] = true;\n        }\n        permutations.add(permutation);\n    }\n    return permutations;\n}","repo_id":"9","comment":"/**\n * Returns a permutation of subunit indices for the given helix\n * transformation. An index of -1 is used to indicate subunits that do not\n * superpose onto any other subunit.\n *\n * @param transformation\n * @return\n */\n","repo_name":"biojava-master/","id":1880,"method_signature":"List<Integer> getPermutation(Matrix4d)"}