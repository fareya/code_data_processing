{"callee_method_names":[],"method_name":"BufferedReaderBytesRead.mark","method_implementation":"{\n    if (readAheadLimit < 0) {\n        throw new IllegalArgumentException(\"Read-ahead limit < 0\");\n    }\n    synchronized (lock) {\n        ensureOpen();\n        this.readAheadLimit = readAheadLimit;\n        markedChar = nextChar;\n        markedSkipLF = skipLF;\n    }\n}","repo_id":"9","comment":"/**\n * Marks the present position in the stream.  Subsequent calls to reset()\n * will attempt to reposition the stream to this point.\n *\n * @param readAheadLimit   Limit on the number of characters that may be\n *                         read while still preserving the mark. An attempt\n *                         to reset the stream after reading characters\n *                         up to this limit or beyond may fail.\n *                         A limit value larger than the size of the input\n *                         buffer will cause a new buffer to be allocated\n *                         whose size is no smaller than limit.\n *                         Therefore large values should be used with care.\n *\n * @exception  IllegalArgumentException  If readAheadLimit is < 0\n * @exception  IOException  If an I/O error occurs\n */\n","repo_name":"biojava-master/","id":2720,"method_signature":"void mark(int)"}