{"callee_method_ids":[628],"callee_method_names":["StructureIOFile.getStructure","AtomCache.getStructure","List<Atom[]>.add","MultipleAlignment.getEnsemble","MultipleAlignmentEnsemble.setAtomArrays","MultipleAlignmentEnsemble.setAlgorithmName","MultipleAlignmentEnsemble.setVersion","MultipleAlignmentEnsemble.setCalculationTime","MultipleAlignmentEnsemble.setStructureIdentifiers","List<Integer>.add","List<Integer>.add","List<List<Integer>>.add","Block.setAlignRes","MultipleSuperimposer.superimpose"],"method_name":"TestSampleGenerator.testAlignment1","method_implementation":"{\n    //Obtain the structure atoms from resources\n    StructureIOFile reader = new PDBFileReader();\n    File f = new File(\"src/test/resources/2gox.pdb\");\n    Structure structure = null;\n    try {\n        structure = reader.getStructure(f);\n    } catch (IOException e) {\n        AtomCache cache = new AtomCache();\n        structure = cache.getStructure(\"2gox\");\n    }\n    List<Atom[]> atomArrays = new ArrayList<Atom[]>(3);\n    for (int str = 0; str < 3; str++) {\n        Atom[] atoms = StructureTools.getRepresentativeAtomArray(structure);\n        atomArrays.add(StructureTools.cloneAtomArray(atoms));\n    }\n    //Set the ensemble properties\n    MultipleAlignment msa = new MultipleAlignmentImpl();\n    MultipleAlignmentEnsemble ensemble = msa.getEnsemble();\n    ensemble.setAtomArrays(atomArrays);\n    ensemble.setAlgorithmName(\"testAlignment\");\n    ensemble.setVersion(\"1.0\");\n    ensemble.setCalculationTime((long) 1000000000);\n    ensemble.setStructureIdentifiers(Arrays.<StructureIdentifier>asList(new StructureName(\"2gox\"), new StructureName(\"2gox\"), new StructureName(\"2gox\")));\n    //Generate the MultipleAlignment - 2 blocks with 2 blocksets each\n    int[] nextResidue = new int[3];\n    for (int bs = 0; bs < 2; bs++) {\n        BlockSet blockSet = new BlockSetImpl(msa);\n        for (int b = 0; b < 2; b++) {\n            List<List<Integer>> alnRes = new ArrayList<List<Integer>>(3);\n            for (int str = 0; str < 3; str++) {\n                List<Integer> chain = new ArrayList<Integer>(50);\n                for (int res = 0; res < 10; res++) {\n                    //Introduce gaps and discontinuities\n                    if (nextResidue[str] % (2 + str) == str)\n                        chain.add(null);\n                    else\n                        chain.add(nextResidue[str]);\n                    if (nextResidue[str] % (10) == str)\n                        nextResidue[str]++;\n                    nextResidue[str]++;\n                }\n                alnRes.add(chain);\n                //Spacing between Blocks\n                nextResidue[str] += str;\n            }\n            Block block = new BlockImpl(blockSet);\n            block.setAlignRes(alnRes);\n        }\n    }\n    //Superposition and scores\n    MultipleSuperimposer imposer = new ReferenceSuperimposer();\n    imposer.superimpose(msa);\n    MultipleAlignmentScorer.calculateScores(msa);\n    return msa;\n}","repo_id":"9","comment":"/**\n * Generate a MultipleAlignment of 3 identical structures slightly\n * missaligned by a repetitive pattern. The resulting alignment contains\n * 2 BlockSets with 2 Blocks each. Gaps and discontinuities are also\n * included.<p>\n * Fields left unfilled (null): distanceMatrices and ioTime.<p>\n * Atoms are not downladed, but the structure (2gox) is obtained from the\n * test/resources folder.\n *\n * @return\n * @throws StructureException\n * @throws IOException\n */\n","repo_name":"biojava-master/","id":2192,"method_signature":"MultipleAlignment testAlignment1()"}