{"callee_method_ids":[3447,3447,3447],"callee_method_names":["HashMap.get","BlastJob.getStartTimestamp","BlastJob.getExpectedExecutionTime","BlastJob.setId","BlastJob.setStartTimestamp","BlastJob.setExpectedExecutionTime","BlastJob.getId","URL.openConnection","URLConnection.getOutputStream","OutputStreamWriter.write","OutputStreamWriter.flush","URLConnection.getInputStream","BufferedReader.readLine","String.contains","HashMap.put","BlastJob.getId","String.contains","BlastJob.setExpectedExecutionTime","BlastJob.getExpectedExecutionTime","HashMap.put","BlastJob.getId","String.contains"],"method_name":"NCBIQBlastService.isReady","method_implementation":"{\n    BlastJob job = jobs.get(id);\n    if (job != null) {\n        long expectedJobFinishTime = job.getStartTimestamp() + job.getExpectedExecutionTime();\n        if (System.currentTimeMillis() < expectedJobFinishTime) {\n            return false;\n        }\n    } else {\n        // it might be a valid job from another session\n        job = new BlastJob();\n        job.setId(id);\n        job.setStartTimestamp(System.currentTimeMillis());\n        job.setExpectedExecutionTime(0);\n    }\n    OutputStreamWriter writer = null;\n    BufferedReader reader = null;\n    try {\n        String checkRequest = \"CMD=Get&RID=\" + job.getId() + \"&FORMAT_OBJECT=SearchInfo\";\n        URLConnection serviceConnection = setQBlastServiceProperties(serviceUrl.openConnection());\n        writer = new OutputStreamWriter(serviceConnection.getOutputStream());\n        writer.write(checkRequest);\n        writer.flush();\n        reader = new BufferedReader(new InputStreamReader(serviceConnection.getInputStream()));\n        String line;\n        while ((line = reader.readLine()) != null) {\n            if (line.contains(\"READY\")) {\n                jobs.put(job.getId(), job);\n                return true;\n            } else if (line.contains(\"WAITING\")) {\n                job.setExpectedExecutionTime(job.getExpectedExecutionTime() + WAIT_INCREMENT);\n                jobs.put(job.getId(), job);\n                return false;\n            } else if (line.contains(\"UNKNOWN\")) {\n                throw new IllegalArgumentException(\"Unknown request id - no results exist for it. Given id = \" + id);\n            }\n        }\n        return false;\n    } catch (IOException ioe) {\n        throw new Exception(\"It is not possible to fetch Blast report from NCBI at this time. Cause: \" + ioe.getMessage(), ioe);\n    } finally {\n        IOUtils.close(reader);\n        IOUtils.close(writer);\n    }\n}","repo_id":"9","comment":"/**\n * Checks for completion of request.\n * <p/>\n * If expected execution time (RTOE) is available for request, this method will always return false until that time\n * passes. This is done to prevent sending unnecessary requests to the server.\n *\n * @param id : request id, which was returned by {@code sendAlignmentRequest} method\n * @param present : is not used, can be any value\n * @return a boolean value telling if the request has been completed\n */\n","repo_name":"biojava-master/","id":3468,"method_signature":"boolean isReady(String, long)"}