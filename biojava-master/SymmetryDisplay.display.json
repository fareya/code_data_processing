{"callee_method_ids":[2053,3274,3273,3271,3271,3274,3271,3271,570,3271],"callee_method_names":["CeSymmResult.isSignificant","CeSymmResult.isRefined","CeSymmResult.getMultipleAlignment","MultipleAlignment.getAtomArrays","List<Atom[]>.get","List<Group>.size","List<Group>.size","List<Group>.size","List<Group>.get","MultipleAlignment.size","List<Atom[]>.set","AbstractAlignmentJmol.setTitle","AbstractAlignmentJmol.getStructure","AbstractAlignmentJmol.evalString","AbstractAlignmentJmol.evalString","AbstractAlignmentJmol.setTitle","AbstractAlignmentJmol.evalString","Logger.info","CeSymmResult.getAtoms","CeSymmResult.getSelfAlignment","CeSymmResult.getAtoms","CeSymmResult.getSelfAlignment","AbstractAlignmentJmol.evalString","RotationAxis.getJmolScript","CeSymmResult.getAtoms","AbstractAlignmentJmol.evalString"],"method_name":"SymmetryDisplay.display","method_implementation":"{\n    if (symmResult.isSignificant() && symmResult.isRefined()) {\n        // Show the structure colored by repeat (do not rotate)\n        MultipleAlignment msa = symmResult.getMultipleAlignment();\n        List<Atom[]> atoms = msa.getAtomArrays();\n        // Add non polymer protein groups\n        Atom[] allAtoms = atoms.get(0);\n        List<Group> hetatms = StructureTools.getUnalignedGroups(allAtoms);\n        allAtoms = Arrays.copyOf(allAtoms, allAtoms.length + hetatms.size());\n        for (int h = 0; h < hetatms.size(); h++) {\n            int index = (allAtoms.length - hetatms.size()) + h;\n            allAtoms[index] = hetatms.get(h).getAtom(0);\n        }\n        for (int s = 0; s < msa.size(); s++) atoms.set(s, allAtoms);\n        MultipleAlignmentJmol jmol = new MultipleAlignmentJmol(msa, atoms);\n        jmol.setTitle(jmol.getStructure().getPDBHeader().getTitle());\n        addSymmetryMenu(jmol, symmResult);\n        jmol.evalString(printSymmetryGroup(symmResult));\n        jmol.evalString(printSymmetryAxes(symmResult));\n        jmol.setTitle(getSymmTitle(symmResult));\n        jmol.evalString(\"save STATE state_1\");\n        return jmol;\n    } else {\n        // Show the optimal self-alignment\n        logger.info(\"Showing optimal self-alignment\");\n        Atom[] cloned = StructureTools.cloneAtomArray(symmResult.getAtoms());\n        AbstractAlignmentJmol jmol = StructureAlignmentDisplay.display(symmResult.getSelfAlignment(), symmResult.getAtoms(), cloned);\n        RotationAxis axis = new RotationAxis(symmResult.getSelfAlignment());\n        jmol.evalString(axis.getJmolScript(symmResult.getAtoms()));\n        jmol.evalString(\"save STATE state_1\");\n        return jmol;\n    }\n}","repo_id":"9","comment":"/**\n * Displays a single structure in a cartoon representation with each\n * symmetric repeat colored differently.\n *\n * @param msa\n *            the symmetry multiple alignment obtained from CeSymm\n * @throws StructureException\n */\n","repo_name":"biojava-master/","id":3430,"method_signature":"AbstractAlignmentJmol display(CeSymmResult)"}