{"callee_method_names":["String.equals","StockholmStructure.getConsAnnotation","String.equals","StockholmStructure.getConsAnnotation","String.equals","StockholmStructure.getConsAnnotation","String.equals","StockholmStructure.getConsAnnotation","String.equals","StockholmStructure.getConsAnnotation","String.equals","StockholmStructure.getConsAnnotation","String.equals","StockholmStructure.getConsAnnotation","String.equals","StockholmStructure.getConsAnnotation","String.equals","StockholmStructure.getConsAnnotation","String.equals","StockholmStructure.getConsAnnotation","String.equals","StockholmStructure.getConsAnnotation","String.equals","StockholmStructure.getConsAnnotation","Logger.warn"],"method_name":"StockholmFileParser.handleConsensusAnnotation","method_implementation":"{\n    if (featureName.equals(GC_SECONDARY_STRUCTURE)) {\n        stockholmStructure.getConsAnnotation().setSecondaryStructure(value);\n    } else if (featureName.equals(GC_SEQUENSE_CONSENSUS)) {\n        stockholmStructure.getConsAnnotation().setSequenceConsensus(value);\n    } else if (featureName.equals(GC_SURFACE_ACCESSIBILITY)) {\n        stockholmStructure.getConsAnnotation().setSurfaceAccessibility(value);\n    } else if (featureName.equals(GC_TRANS_MEMBRANE)) {\n        stockholmStructure.getConsAnnotation().setTransMembrane(value);\n    } else if (featureName.equals(GC_POSTERIOR_PROBABILITY)) {\n        stockholmStructure.getConsAnnotation().setPosteriorProbability(value);\n    } else if (featureName.equals(GC_LIGAND_BINDING)) {\n        stockholmStructure.getConsAnnotation().setLigandBinding(value);\n    } else if (featureName.equals(GC_ACTIVE_SITE)) {\n        stockholmStructure.getConsAnnotation().setActiveSite(value);\n    } else if (featureName.equals(GC_AS_PFAM_PREDICTED)) {\n        stockholmStructure.getConsAnnotation().setAsPFamPredicted(value);\n    } else if (featureName.equals(GC_AS_SWISSPROT)) {\n        stockholmStructure.getConsAnnotation().setAsSwissProt(value);\n    } else if (featureName.equals(GC_INTRON)) {\n        stockholmStructure.getConsAnnotation().setIntron(value);\n    } else if (featureName.equals(GC_REFERENCE_ANNOTATION)) {\n        stockholmStructure.getConsAnnotation().setReferenceAnnotation(value);\n    } else if (featureName.equals(GC_MODEL_MASK)) {\n        stockholmStructure.getConsAnnotation().setModelMask(value);\n    } else {\n        // unknown feature\n        logger.warn(\"Unknown Consensus Feature [{}].\\nPlease contact the Biojava team.\", featureName);\n    }\n}","repo_id":"9","comment":"/**\n * usually a single line of:<br>\n * #=GC &lt;feature&gt; &lt;Generic per-Column annotation, exactly 1 char per column&gt;\n *\n * @param featureName\n *            the feature name :)\n * @param value\n *            the line to be parsed.\n */\n","repo_name":"biojava-master/","id":21,"method_signature":"void handleConsensusAnnotation(String, String)"}