{"callee_method_ids":[3637,3673,3675,3659,3657,3661,3654,3643],"callee_method_names":["ArrayList<SurvivalInfo>.size","CoxInfo.getCoefficientsList","ArrayList<String>.size","ArrayList<SurvivalInfo>.get","SurvivalInfo.getTime","SurvivalInfo.getStatus","SurvivalInfo.getStrata","SurvivalInfo.getWeight","SurvivalInfo.getScore","ArrayList<String>.size","ArrayList<String>.get","SurvivalInfo.getVariable","ArrayList<SurvivalInfo>.get","ArrayList<String>.size","SurvivalInfo.setResidualVariable","ArrayList<String>.get"],"method_name":"CoxScore.process","method_implementation":"{\n    int i, j, k;\n    double temp;\n    int n = survivalInfoList.size();\n    ArrayList<String> variables = new ArrayList<String>(coxInfo.getCoefficientsList().keySet());\n    int nvar = variables.size();\n    double deaths;\n    int dd;\n    double[] time = new double[n];\n    double[] status = new double[n];\n    double[] strata = new double[n];\n    double[] weights = new double[n];\n    double[] score = new double[n];\n    double[] a = new double[nvar];\n    double[] a2 = new double[nvar];\n    double denom = 0, e_denom;\n    double risk;\n    double[][] covar = new double[nvar][n];\n    double[][] resid = new double[nvar][n];\n    double hazard, meanwt;\n    double downwt, temp2;\n    double mean;\n    //  n = *nx;\n    //  nvar  = *nvarx;\n    for (int p = 0; p < n; p++) {\n        SurvivalInfo si = survivalInfoList.get(p);\n        time[p] = si.getTime();\n        status[p] = si.getStatus();\n        if (useStrata) {\n            strata[p] = si.getStrata();\n        } else {\n            strata[p] = 0;\n        }\n        weights[p] = si.getWeight();\n        score[p] = si.getScore();\n        for (int v = 0; v < variables.size(); v++) {\n            String variable = variables.get(v);\n            Double value = si.getVariable(variable);\n            covar[v][p] = value;\n        }\n    }\n    //  a = scratch;\n    //  a2 = a+nvar;\n    /*\n\t\t **  Set up the ragged array\n\t\t */\n    //   covar=  dmatrix(covar2, n, nvar);\n    //   resid=  dmatrix(resid2, n, nvar);\n    e_denom = 0;\n    deaths = 0;\n    meanwt = 0;\n    for (i = 0; i < nvar; i++) {\n        a2[i] = 0;\n    }\n    strata[n - 1] = 1;\n    /*failsafe */\n    for (i = n - 1; i >= 0; i--) {\n        if (strata[i] == 1) {\n            denom = 0;\n            for (j = 0; j < nvar; j++) {\n                a[j] = 0;\n            }\n        }\n        risk = score[i] * weights[i];\n        denom += risk;\n        if (status[i] == 1) {\n            deaths++;\n            e_denom += risk;\n            meanwt += weights[i];\n            for (j = 0; j < nvar; j++) {\n                a2[j] += risk * covar[j][i];\n            }\n        }\n        for (j = 0; j < nvar; j++) {\n            a[j] += risk * covar[j][i];\n            resid[j][i] = 0;\n        }\n        if (deaths > 0 && (i == 0 || strata[i - 1] == 1 || time[i] != time[i - 1])) {\n            /* last obs of a set of tied death times */\n            if (deaths < 2 || method == CoxMethod.Breslow) {\n                hazard = meanwt / denom;\n                for (j = 0; j < nvar; j++) {\n                    temp = (a[j] / denom);\n                    /* xbar */\n                    for (k = i; k < n; k++) {\n                        temp2 = covar[j][k] - temp;\n                        if (time[k] == time[i] && status[k] == 1) {\n                            resid[j][k] += temp2;\n                        }\n                        resid[j][k] -= temp2 * score[k] * hazard;\n                        if (strata[k] == 1) {\n                            break;\n                        }\n                    }\n                }\n            } else {\n                /* the harder case */\n                meanwt /= deaths;\n                for (dd = 0; dd < deaths; dd++) {\n                    downwt = dd / deaths;\n                    temp = denom - downwt * e_denom;\n                    hazard = meanwt / temp;\n                    for (j = 0; j < nvar; j++) {\n                        mean = (a[j] - downwt * a2[j]) / temp;\n                        for (k = i; k < n; k++) {\n                            temp2 = covar[j][k] - mean;\n                            if (time[k] == time[i] && status[k] == 1) {\n                                resid[j][k] += temp2 / deaths;\n                                resid[j][k] -= temp2 * score[k] * hazard * (1 - downwt);\n                            } else {\n                                resid[j][k] -= temp2 * score[k] * hazard;\n                            }\n                            if (strata[k] == 1) {\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n            e_denom = 0;\n            deaths = 0;\n            meanwt = 0;\n            for (j = 0; j < nvar; j++) {\n                a2[j] = 0;\n            }\n        }\n    }\n    for (int p = 0; p < n; p++) {\n        SurvivalInfo si = survivalInfoList.get(p);\n        for (int v = 0; v < variables.size(); v++) {\n            si.setResidualVariable(variables.get(v), resid[v][p]);\n        }\n    }\n    //appears to be backward internally\n    double[][] flipresid = new double[n][nvar];\n    for (int s = 0; s < resid.length; s++) {\n        for (int t = 0; t < resid[0].length; t++) {\n            flipresid[t][s] = resid[s][t];\n        }\n    }\n    return flipresid;\n}","repo_id":"9","comment":"/**\n * @param method\n * @param survivalInfoList\n * @param coxInfo\n * @param useStrata\n * @return\n */\n","repo_name":"biojava-master/","id":3683,"method_signature":"double[][] process(CoxMethod, ArrayList, CoxInfo, boolean)"}