{"callee_method_ids":[922,923],"callee_method_names":["List<Contact>.addAll","GridCell.getContactsWithinCell","List<Contact>.addAll","GridCell.getContactsToOtherCell"],"method_name":"Grid.getIndicesContacts","method_implementation":"{\n    List<Contact> list = new ArrayList<>();\n    // if the 2 sets of atoms are not overlapping they are too far away and no need to calculate anything\n    // this won't apply if there's only one set of atoms (iAtoms), where we would want all-to-all contacts\n    if (noOverlap)\n        return list;\n    for (int xind = 0; xind < cells.length; xind++) {\n        for (int yind = 0; yind < cells[xind].length; yind++) {\n            for (int zind = 0; zind < cells[xind][yind].length; zind++) {\n                // distances of points within this cell\n                GridCell thisCell = cells[xind][yind][zind];\n                if (thisCell == null)\n                    continue;\n                list.addAll(thisCell.getContactsWithinCell());\n                // distances of points from this box to all neighbouring boxes: 26 iterations (26 neighbouring boxes)\n                for (int x = xind - 1; x <= xind + 1; x++) {\n                    for (int y = yind - 1; y <= yind + 1; y++) {\n                        for (int z = zind - 1; z <= zind + 1; z++) {\n                            if (x == xind && y == yind && z == zind)\n                                continue;\n                            if (x >= 0 && x < cells.length && y >= 0 && y < cells[x].length && z >= 0 && z < cells[x][y].length) {\n                                if (cells[x][y][z] == null)\n                                    continue;\n                                list.addAll(thisCell.getContactsToOtherCell(cells[x][y][z]));\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return list;\n}","repo_id":"9","comment":"/**\n * Returns all contacts, i.e. all atoms that are within the cutoff distance, as simple Contact objects containing the atom indices pairs and the distance.\n * If both iAtoms and jAtoms are defined then contacts are between iAtoms and jAtoms,\n * if jAtoms is null, then contacts are within the iAtoms.\n * @return\n */\n","repo_name":"biojava-master/","id":939,"method_signature":"List<Contact> getIndicesContacts()"}