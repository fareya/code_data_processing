{"callee_method_ids":[484,487,488,496],"callee_method_names":["AFPChain.isShortAlign","AFPChain.getAfpSet","AFPChain.getBlockNum","AFPChain.getBlockResSize","AFPChain.getBlockResList","AFPChain.getAfpChainList","AFPChain.getBlock2Afp","AFPChain.getBlockSize","AFPChain.getFocusAfpList","AFPChain.getMinLen","AFPChain.setFocusAfpList","Logger.debug","Logger.debug","List<AFP>.get","AFP.getP2","List<AFP>.get","AFP.getP2","Logger.debug","AFPChain.setTotalLenIni","Logger.debug","AFPChain.getFocusRes1","AFPChain.getFocusRes2","AFPChain.setTotalRmsdIni","Logger.debug","Logger.debug","AFPChain.getAlnseq1","Logger.debug","AFPChain.getAlnsymb","Logger.debug","AFPChain.getAlnseq2","AFPChain.setFocusAfpList","AFPChain.setBlock2Afp","AFPChain.setAfpChainList"],"method_name":"AFPTwister.twistPDB","method_implementation":"{\n    // --------------------------------------------------------\n    if (afpChain.isShortAlign())\n        return new Group[0];\n    List<AFP> afpSet = afpChain.getAfpSet();\n    int blockNum = afpChain.getBlockNum();\n    int i, b2, e2;\n    // superimposing according to the initial AFP-chaining\n    Atom[] origCA = StructureTools.cloneAtomArray(ca2);\n    Atom[] iniTwistPdb = StructureTools.cloneAtomArray(ca2);\n    int[] blockResSize = afpChain.getBlockResSize();\n    int[][][] blockResList = afpChain.getBlockResList();\n    int[] afpChainList = afpChain.getAfpChainList();\n    int[] block2Afp = afpChain.getBlock2Afp();\n    int[] blockSize = afpChain.getBlockSize();\n    int[] focusAfpList = afpChain.getFocusAfpList();\n    if (focusAfpList == null) {\n        focusAfpList = new int[afpChain.getMinLen()];\n        afpChain.setFocusAfpList(focusAfpList);\n    }\n    int focusAfpn = 0;\n    e2 = 0;\n    b2 = 0;\n    logger.debug(\"blockNUm at twister: {}\", blockNum);\n    for (int bk = 0; bk < blockNum; bk++) {\n        // THIS IS TRANSFORMING THE ORIGINAL ca2 COORDINATES, NO CLONING...\n        // copies the atoms over to iniTwistPdb later on in modifyCod\n        transformOrigPDB(blockResSize[bk], blockResList[bk][0], blockResList[bk][1], ca1, ca2, null, -1);\n        // transform pro2 according to comparison of pro1 and pro2 at give\n        // residues\n        if (bk > 0) {\n            b2 = e2;\n        }\n        logger.debug(\"b2 is {} before  modifyCon\", b2);\n        if (bk < (blockNum - 1)) {\n            // bend at the middle of two consecutive AFPs\n            int afpPos = afpChainList[block2Afp[bk] + blockSize[bk] - 1];\n            AFP a1 = afpSet.get(afpPos);\n            e2 = a1.getP2();\n            int afpPos2 = afpChainList[block2Afp[bk + 1]];\n            AFP a2 = afpSet.get(afpPos2);\n            e2 = (a2.getP2() - e2) / 2 + e2;\n            logger.debug(\"e2 : {}\", e2);\n        } else {\n            // last one is until the end...\n            e2 = ca2.length;\n        }\n        // this copies the coordinates over into iniTwistPdb\n        cloneAtomRange(iniTwistPdb, ca2, b2, e2);\n        // bound[bk] = e2;\n        for (i = 0; i < blockSize[bk]; i++) {\n            focusAfpList[focusAfpn] = afpChainList[block2Afp[bk] + i];\n            focusAfpn++;\n        }\n    }\n    int focusResn = afp2Res(afpChain, focusAfpn, focusAfpList, 0);\n    afpChain.setTotalLenIni(focusResn);\n    logger.debug(String.format(\"calrmsdini for %d residues\", focusResn));\n    double totalRmsdIni = calCaRmsd(ca1, iniTwistPdb, focusResn, afpChain.getFocusRes1(), afpChain.getFocusRes2());\n    afpChain.setTotalRmsdIni(totalRmsdIni);\n    logger.debug(\"got iniRMSD: {}\", totalRmsdIni);\n    if (totalRmsdIni == 5.76611141613097) {\n        logger.debug(\"{}\", afpChain.getAlnseq1());\n        logger.debug(\"{}\", afpChain.getAlnsymb());\n        logger.debug(\"{}\", afpChain.getAlnseq2());\n    }\n    afpChain.setFocusAfpList(focusAfpList);\n    afpChain.setBlock2Afp(block2Afp);\n    afpChain.setAfpChainList(afpChainList);\n    return twistOptimized(afpChain, ca1, origCA);\n}","repo_id":"9","comment":"/**\n * calculate the total rmsd of the blocks output a merged pdb file for both\n * proteins protein 1, in chain A protein 2 is twisted according to the\n * twists detected, in chain B\n *\n * @return twisted Groups\n */\n","repo_name":"biojava-master/","id":538,"method_signature":"Group[] twistPDB(AFPChain, Atom[], Atom[])"}