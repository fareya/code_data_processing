{"callee_method_names":["List<ResidueRange>.get","List<ResidueRange>.get","List<ResidueRange>.get","List<ResidueRange>.get","List<ResidueRange>.get","ResidueRange.getChainName","ResidueRange.getStart","ResidueRange.getEnd","List<ResidueRange>.get","ResidueRange.getChainName","ResidueRange.getStart","ResidueRange.getEnd","List<ResidueRange>.get","ResidueRange.getChainName","ResidueRange.getStart","ResidueRange.getEnd","List<ResidueRange>.get","ResidueRange.getChainName","ResidueRange.getStart","ResidueRange.getEnd","List<ResidueRange>.get","ResidueRange.getChainName","ResidueRange.getStart","ResidueRange.getEnd","List<ResidueRange>.get","ResidueRange.getChainName","ResidueRange.getStart","ResidueRange.getEnd","List<ResidueRange>.get","ResidueRange.getChainName","ResidueRange.getStart","ResidueRange.getEnd","List<ResidueRange>.get","ResidueRange.getChainName","ResidueRange.getStart","ResidueRange.getEnd"],"method_name":"ResidueRangeTest.testParseAndEqual","method_implementation":"{\n    String rangeStr;\n    List<ResidueRange> ranges;\n    ResidueRange range;\n    // String pdbId1 = \"2eke\";\n    rangeStr = \"C_1023-1063,C_1064-1084\";\n    ranges = ResidueRange.parseMultiple(rangeStr);\n    assertEquals(new ResidueRange(\"C\", new ResidueNumber(\"C\", 1023, null), new ResidueNumber(\"C\", 1063, null)), ranges.get(0));\n    assertEquals(new ResidueRange(\"C\", new ResidueNumber(\"C\", 1064, null), new ResidueNumber(\"C\", 1084, null)), ranges.get(1));\n    // String pdbId = \"1qdm\";\n    rangeStr = \"A_3S-37S,A_65S-99S\";\n    ranges = ResidueRange.parseMultiple(rangeStr);\n    assertEquals(new ResidueRange(\"A\", new ResidueNumber(\"A\", 3, 'S'), new ResidueNumber(\"A\", 37, 'S')), ranges.get(0));\n    assertEquals(new ResidueRange(\"A\", new ResidueNumber(\"A\", 65, 'S'), new ResidueNumber(\"A\", 99, 'S')), ranges.get(1));\n    // Multi-character chains\n    rangeStr = \"AB,A1,ABCD_1-55,NotAG00dID:-5-1R\";\n    ranges = ResidueRange.parseMultiple(rangeStr);\n    range = ranges.get(0);\n    assertEquals(\"Error parsing \" + rangeStr, \"AB\", range.getChainName());\n    assertNull(\"Error parsing \" + rangeStr, range.getStart());\n    assertNull(\"Error parsing \" + rangeStr, range.getEnd());\n    range = ranges.get(1);\n    assertEquals(\"Error parsing \" + rangeStr, \"A1\", range.getChainName());\n    assertNull(\"Error parsing \" + rangeStr, range.getStart());\n    assertNull(\"Error parsing \" + rangeStr, range.getEnd());\n    range = ranges.get(2);\n    assertEquals(\"Error parsing \" + rangeStr, \"ABCD\", range.getChainName());\n    assertEquals(\"Error parsing \" + rangeStr, new ResidueNumber(\"ABCD\", 1, null), range.getStart());\n    assertEquals(\"Error parsing \" + rangeStr, new ResidueNumber(\"ABCD\", 55, null), range.getEnd());\n    range = ranges.get(3);\n    assertEquals(\"Error parsing \" + rangeStr, \"NotAG00dID\", range.getChainName());\n    assertEquals(\"Error parsing \" + rangeStr, new ResidueNumber(\"NotAG00dID\", -5, null), range.getStart());\n    assertEquals(\"Error parsing \" + rangeStr, new ResidueNumber(\"NotAG00dID\", 1, 'R'), range.getEnd());\n    // Wildcard chains\n    rangeStr = \"_,__,_:1-5,_:+1-+5\";\n    ranges = ResidueRange.parseMultiple(rangeStr);\n    range = ranges.get(0);\n    assertEquals(\"Error parsing \" + rangeStr, \"_\", range.getChainName());\n    assertNull(\"Error parsing \" + rangeStr, range.getStart());\n    assertNull(\"Error parsing \" + rangeStr, range.getEnd());\n    range = ranges.get(1);\n    assertEquals(\"Error parsing \" + rangeStr, \"_\", range.getChainName());\n    assertNull(\"Error parsing \" + rangeStr, range.getStart());\n    assertNull(\"Error parsing \" + rangeStr, range.getEnd());\n    range = ranges.get(2);\n    assertEquals(\"Error parsing \" + rangeStr, \"_\", range.getChainName());\n    assertEquals(\"Error parsing \" + rangeStr, new ResidueNumber(\"_\", 1, null), range.getStart());\n    assertEquals(\"Error parsing \" + rangeStr, new ResidueNumber(\"_\", 5, null), range.getEnd());\n    range = ranges.get(3);\n    assertEquals(\"Error parsing \" + rangeStr, \"_\", range.getChainName());\n    assertEquals(\"Error parsing \" + rangeStr, new ResidueNumber(\"_\", 1, null), range.getStart());\n    assertEquals(\"Error parsing \" + rangeStr, new ResidueNumber(\"_\", 5, null), range.getEnd());\n}","repo_id":"9","comment":"/**\n * Tests {@link ResidueRange#parseMultiple(String)}.\n */\n","repo_name":"biojava-master/","id":2171,"method_signature":"void testParseAndEqual()"}