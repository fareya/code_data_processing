{"callee_method_names":["Group.getPDBName","Group.getPDBName","Group.getAtoms","Group.getAtoms","Group.getAtoms","Group.getAtoms","Atom.getAltLoc","Atom.getAltLoc"],"method_name":"TestAltLocs.ensureAllAtomsSameAltCode","method_implementation":"{\n    // If they're the exact same group just return\n    if (groupInputAltLocGroup == inputMainGroup) {\n        return;\n    }\n    // Check that the atom group is the same size as the alt loc group (as long as it's not a case of microheterogenity\n    if (groupInputAltLocGroup.getPDBName().equals(inputMainGroup.getPDBName())) {\n        assertEquals(groupInputAltLocGroup.getAtoms().size(), inputMainGroup.getAtoms().size());\n    }\n    Character defaultAltLoc = null;\n    for (Atom atom : groupInputAltLocGroup.getAtoms()) {\n        // If this is in the original atom group just carry on\n        if (inputMainGroup.getAtoms().contains(atom)) {\n            continue;\n        }\n        if (defaultAltLoc == null) {\n            defaultAltLoc = atom.getAltLoc();\n            continue;\n        }\n        Character altLoc = atom.getAltLoc();\n        assertEquals(defaultAltLoc, altLoc);\n    }\n}","repo_id":"9","comment":"/**\n * Test to check that all atoms have the same alt code (unless they're in the main group)\n * @param groupInputAltLocGroup The input alt loc group\n */\n","repo_name":"biojava-master/","id":2211,"method_signature":"void ensureAllAtomsSameAltCode(Group, Group)"}