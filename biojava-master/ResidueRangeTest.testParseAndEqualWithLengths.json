{"callee_method_ids":[619,619],"callee_method_names":["AtomCache.getAtoms","List<ResidueRangeAndLength>.get","List<ResidueRangeAndLength>.get","List<ResidueRangeAndLength>.get","AtomCache.getAtoms","List<ResidueRangeAndLength>.get","ResidueRangeAndLength.getChainName","ResidueRangeAndLength.getStart","ResidueRangeAndLength.getEnd","List<ResidueRangeAndLength>.get","ResidueRangeAndLength.getChainName","ResidueRangeAndLength.getStart","ResidueRangeAndLength.getEnd","List<ResidueRangeAndLength>.get","ResidueRangeAndLength.getChainName","ResidueRangeAndLength.getStart","ResidueRangeAndLength.getEnd","ResidueRange.getChainName","ResidueRange.getStart","ResidueRange.getEnd"],"method_name":"ResidueRangeTest.testParseAndEqualWithLengths","method_implementation":"{\n    String rangeStr;\n    List<ResidueRangeAndLength> ranges;\n    ResidueRangeAndLength range;\n    AtomPositionMap map;\n    String pdbId = \"2eke\";\n    map = new AtomPositionMap(cache.getAtoms(pdbId));\n    //C is 105-112,1013-1095\n    rangeStr = \"C_1023-1063,C_1064-1084,C\";\n    ranges = ResidueRangeAndLength.parseMultiple(rangeStr, map);\n    assertEquals(new ResidueRangeAndLength(\"C\", new ResidueNumber(\"C\", 1023, null), new ResidueNumber(\"C\", 1063, null), 1063 - 1023 + 1), ranges.get(0));\n    assertEquals(new ResidueRangeAndLength(\"C\", new ResidueNumber(\"C\", 1064, null), new ResidueNumber(\"C\", 1084, null), 1084 - 1064 + 1), ranges.get(1));\n    assertEquals(new ResidueRangeAndLength(\"C\", new ResidueNumber(\"C\", 105, null), new ResidueNumber(\"C\", 1095, null), 91), ranges.get(2));\n    // Wildcard chains\n    // A:8-52,58-109,119-161\n    pdbId = \"4r61\";\n    map = new AtomPositionMap(cache.getAtoms(pdbId));\n    rangeStr = \"_,__,_:52-58\";\n    ranges = ResidueRangeAndLength.parseMultiple(rangeStr, map);\n    range = ranges.get(0);\n    assertEquals(\"Error parsing \" + rangeStr, \"A\", range.getChainName());\n    assertEquals(\"Error parsing \" + rangeStr, new ResidueNumber(\"A\", 8, null), range.getStart());\n    assertEquals(\"Error parsing \" + rangeStr, new ResidueNumber(\"A\", 161, null), range.getEnd());\n    range = ranges.get(1);\n    assertEquals(\"Error parsing \" + rangeStr, \"A\", range.getChainName());\n    assertEquals(\"Error parsing \" + rangeStr, new ResidueNumber(\"A\", 8, null), range.getStart());\n    assertEquals(\"Error parsing \" + rangeStr, new ResidueNumber(\"A\", 161, null), range.getEnd());\n    range = ranges.get(2);\n    assertEquals(\"Error parsing \" + rangeStr, \"A\", range.getChainName());\n    assertEquals(\"Error parsing \" + rangeStr, new ResidueNumber(\"A\", 52, null), range.getStart());\n    assertEquals(\"Error parsing \" + rangeStr, new ResidueNumber(\"A\", 58, null), range.getEnd());\n    // wildcards not converted without the map\n    ResidueRange range2 = ResidueRange.parse(\"_\");\n    assertEquals(\"Error parsing \" + rangeStr, \"_\", range2.getChainName());\n    assertNull(\"Error parsing \" + rangeStr, range2.getStart());\n    assertNull(\"Error parsing \" + rangeStr, range2.getEnd());\n}","repo_id":"9","comment":"/**\n * Tests\n * {@link org.biojava.nbio.structure.ResidueRangeAndLength#parseMultiple(String, org.biojava.nbio.structure.AtomPositionMap)}\n * .\n *\n * @throws StructureException\n * @throws IOException\n */\n","repo_name":"biojava-master/","id":2172,"method_signature":"void testParseAndEqualWithLengths()"}