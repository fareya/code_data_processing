{"callee_method_names":["String.length","String.length","StringBuilder.length","StringBuilder.insert","StringBuilder.toString"],"method_name":"FastaSequence.getFormatedSequence","method_implementation":"{\n    if (sequence == null) {\n        return \"\";\n    }\n    assert width >= 0 : \"Wrong width parameter \";\n    final StringBuilder sb = new StringBuilder(sequence);\n    int nchunks = sequence.length() / width;\n    // add up inserted new line chars\n    nchunks = (nchunks + sequence.length()) / width;\n    int nlineCharcounter = 0;\n    for (int i = 1; i <= nchunks; i++) {\n        final int insPos = width * i + nlineCharcounter;\n        // to prevent inserting new line in the very end of a sequence then\n        // it would have failed.\n        // Also covers the case when the sequences shorter than width\n        if (sb.length() <= insPos) {\n            break;\n        }\n        sb.insert(insPos, \"\\n\");\n        nlineCharcounter++;\n    }\n    return sb.toString();\n}","repo_id":"9","comment":"/**\n * Format sequence per width letter in one string. Without spaces.\n *\n * @return multiple line formated sequence, one line width letters length\n */\n","repo_name":"biojava-master/","id":206,"method_signature":"String getFormatedSequence(int)"}