{"callee_method_names":["Atom[].getGroup","TreeMap<ResidueNumber, GroupAsa>.containsKey","Group.getResidueNumber","GroupAsa.addAtomAsaU","TreeMap<ResidueNumber, GroupAsa>.put","Group.getResidueNumber","TreeMap<ResidueNumber, GroupAsa>.get","Group.getResidueNumber","GroupAsa.addAtomAsaU","TreeMap<ResidueNumber, GroupAsa>.values"],"method_name":"AsaCalculator.getGroupAsas","method_implementation":"{\n    TreeMap<ResidueNumber, GroupAsa> asas = new TreeMap<>();\n    double[] asasPerAtom = calculateAsas();\n    for (int i = 0; i < atomCoords.length; i++) {\n        Group g = atoms[i].getGroup();\n        if (!asas.containsKey(g.getResidueNumber())) {\n            GroupAsa groupAsa = new GroupAsa(g);\n            groupAsa.addAtomAsaU(asasPerAtom[i]);\n            asas.put(g.getResidueNumber(), groupAsa);\n        } else {\n            GroupAsa groupAsa = asas.get(g.getResidueNumber());\n            groupAsa.addAtomAsaU(asasPerAtom[i]);\n        }\n    }\n    return asas.values().toArray(new GroupAsa[0]);\n}","repo_id":"9","comment":"/**\n * Calculates ASA for all atoms and return them as a GroupAsa\n * array (one element per residue in structure) containing ASAs per residue\n * and per atom.\n * The sorting of Groups in returned array is as specified by {@link org.biojava.nbio.structure.ResidueNumber}\n * @return\n */\n","repo_name":"biojava-master/","id":831,"method_signature":"GroupAsa[] getGroupAsas()"}