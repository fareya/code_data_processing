{"callee_method_names":["Matrix3d.determinant","Matrix.det","EigenvalueDecomposition.getD","Matrix.get","Matrix.get","Matrix.get","Matrix.get","EigenvalueDecomposition.getV","AxisAngle4d.set","Matrix.get","Matrix.get","Matrix.get","Matrix.trace"],"method_name":"SpaceGroup.getRotAxisAndAngle","method_implementation":"{\n    double determinant = m.determinant();\n    if (!(Math.abs(determinant) - 1.0 < DELTA))\n        throw new IllegalArgumentException(\"Given matrix is not a rotation matrix\");\n    AxisAngle4d axisAndAngle = new AxisAngle4d(new Vector3d(0, 0, 0), 0);\n    double[] d = { m.m00, m.m10, m.m20, m.m01, m.m11, m.m21, m.m02, m.m12, m.m22 };\n    Matrix r = new Matrix(d, 3);\n    if (!deltaComp(r.det(), 1.0, DELTA)) {\n        // improper rotation: we return axis 0,0,0 and angle 0\n        return axisAndAngle;\n    }\n    EigenvalueDecomposition evd = new EigenvalueDecomposition(r);\n    Matrix eval = evd.getD();\n    if (deltaComp(eval.get(0, 0), 1.0, DELTA) && deltaComp(eval.get(1, 1), 1.0, DELTA) && deltaComp(eval.get(2, 2), 1.0, DELTA)) {\n        // the rotation is an identity: we return axis 0,0,0 and angle 0\n        return axisAndAngle;\n    }\n    int indexOfEv1;\n    for (indexOfEv1 = 0; indexOfEv1 < 3; indexOfEv1++) {\n        if (deltaComp(eval.get(indexOfEv1, indexOfEv1), 1, DELTA))\n            break;\n    }\n    Matrix evec = evd.getV();\n    axisAndAngle.set(new Vector3d(evec.get(0, indexOfEv1), evec.get(1, indexOfEv1), evec.get(2, indexOfEv1)), Math.acos((eval.trace() - 1.0) / 2.0));\n    return axisAndAngle;\n}","repo_id":"9","comment":"/**\n * Given a rotation matrix calculates the rotation axis and angle for it.\n * The angle is calculated from the trace, the axis from the eigenvalue\n * decomposition.\n * If given matrix is improper rotation or identity matrix then\n * axis (0,0,0) and angle 0 are returned.\n * @param m\n * @return\n * @throws IllegalArgumentException if given matrix is not a rotation matrix (determinant not 1 or -1)\n */\n","repo_name":"biojava-master/","id":1460,"method_signature":"AxisAngle4d getRotAxisAndAngle(Matrix3d)"}