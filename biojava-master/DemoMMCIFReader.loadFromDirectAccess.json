{"callee_method_names":["StructureProvider.getStructureById","Structure.getNonPolyChainsByPDB","List<Chain>.get","Chain.getAtomGroups","Chain.getName","Structure.getNonPolyChainsByPDB","Group.getChemComp","Chain.getSeqResSequence","Chain.getAtomSequence","Chain.getAtomGroups","Structure.getEntityInfos"],"method_name":"DemoMMCIFReader.loadFromDirectAccess","method_implementation":"{\n    String pdbId = \"1A4W\";\n    StructureProvider pdbreader = new CifFileReader();\n    try {\n        Structure s = pdbreader.getStructureById(pdbId);\n        System.out.println(\"Getting chain H of 1A4W\");\n        List<Chain> hs = s.getNonPolyChainsByPDB(\"H\");\n        Chain h = hs.get(0);\n        List<Group> ligands = h.getAtomGroups();\n        System.out.println(\"These ligands have been found in chain \" + h.getName());\n        for (Group l : ligands) {\n            System.out.println(l);\n        }\n        System.out.println(\"Accessing QWE directly: \");\n        Group qwe = s.getNonPolyChainsByPDB(\"H\").get(2).getGroupByPDB(new ResidueNumber(\"H\", 373, null));\n        System.out.println(qwe.getChemComp());\n        System.out.println(h.getSeqResSequence());\n        System.out.println(h.getAtomSequence());\n        System.out.println(h.getAtomGroups(GroupType.HETATM));\n        System.out.println(\"Entities: \" + s.getEntityInfos());\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}","repo_id":"9","comment":"/**\n * An example demonstrating how to directly use the mmCif file parsing classes. This could potentially be used\n * to use the parser to populate a data-structure that is different from the biojava-structure data model.\n */\n","repo_name":"biojava-master/","id":339,"method_signature":"void loadFromDirectAccess()"}