{"callee_method_ids":[3682],"callee_method_names":["WaldTestInfo.setDf"],"method_name":"WaldTest.process","method_implementation":"{\n    int i = 0;\n    //      if(ci.coefficientsList.size() == 1){\n    //          double b_ = b[0][i];\n    //          double t = (b_ * b_) / var[0][0];\n    //          return;\n    //      }\n    //  double toler_chol = ci.toler;\n    int ntest = 1;\n    int nvar = b[0].length;\n    double sum = 0;\n    double[][] solve = new double[ntest][nvar];\n    double[] bsum = new double[ntest];\n    Cholesky2.process(var, nvar, toler_chol);\n    int df = 0;\n    for (i = 0; i < nvar; i++) {\n        if (var[i][i] > 0) {\n            df++;\n            /* count up the df */\n        }\n    }\n    for (i = 0; i < ntest; i++) {\n        for (int j = 0; j < nvar; j++) {\n            solve[i][j] = b[i][j];\n        }\n        Chsolve2.process(var, nvar, solve, i);\n        /*solve now has b* var-inverse */\n        sum = 0;\n        for (int j = 0; j < nvar; j++) {\n            sum += b[i][j] * solve[i][j];\n        }\n        bsum[i] = sum;\n        /* save the result */\n        //b += nvar;    /*move to next column of b */\n        // solve += nvar;\n    }\n    //* nvar2 = df;\n    WaldTestInfo waldTestInfo = new WaldTestInfo();\n    waldTestInfo.setDf(df);\n    waldTestInfo.solve = solve;\n    waldTestInfo.bsum = bsum;\n    return waldTestInfo;\n}","repo_id":"9","comment":"/**\n * @param var\n * @param b\n * @param toler_chol\n * @return\n */\n","repo_name":"biojava-master/","id":3599,"method_signature":"WaldTestInfo process(double[][], double[][], double)"}