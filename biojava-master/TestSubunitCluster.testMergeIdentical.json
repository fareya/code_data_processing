{"callee_method_ids":[1659,1662,1662,1663,1659,1662,1662,1663],"callee_method_names":["SubunitCluster.mergeIdentical","SubunitCluster.size","SubunitCluster.size","SubunitCluster.length","SubunitCluster.mergeIdentical","SubunitCluster.size","SubunitCluster.size","SubunitCluster.length"],"method_name":"TestSubunitCluster.testMergeIdentical","method_implementation":"{\n    // Create an Atom Array of poly-alanine\n    Atom[] reprAtoms = mockAtomArray(10, \"ALA\", -1, null);\n    // Create two identical SubunitCluster\n    SubunitCluster sc1 = new SubunitCluster(new Subunit(reprAtoms, \"subunit 1\", null, null));\n    SubunitCluster sc2 = new SubunitCluster(new Subunit(reprAtoms, \"subunit 2\", null, null));\n    boolean merged = sc1.mergeIdentical(sc2);\n    // Merged have to be true, and the merged SubunitCluster is sc1\n    assertTrue(merged);\n    assertEquals(2, sc1.size());\n    assertEquals(1, sc2.size());\n    assertEquals(10, sc1.length());\n    // Create an Atom Array of poly-glycine\n    Atom[] reprAtoms2 = mockAtomArray(10, \"GLY\", -1, null);\n    SubunitCluster sc3 = new SubunitCluster(new Subunit(reprAtoms2, \"subunit 1\", null, null));\n    merged = sc1.mergeIdentical(sc3);\n    // Merged have to be false, and Clusters result inmodified\n    assertFalse(merged);\n    assertEquals(2, sc1.size());\n    assertEquals(1, sc2.size());\n    assertEquals(10, sc1.length());\n}","repo_id":"9","comment":"/**\n * Test {@link SubunitCluster#mergeIdentical(SubunitCluster)}.\n */\n","repo_name":"biojava-master/","id":2316,"method_signature":"void testMergeIdentical()"}