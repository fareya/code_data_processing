{"callee_method_ids":[633],"callee_method_names":["AtomCache.getStructureForDomain","Structure.getPolyChains","Structure.getPolyChainByPDB","Chain.getAtomGroups","Structure.getNonPolyChains","Structure.getNonPolyChain","Chain.getAtomGroups","Structure.getNonPolyChain","Chain.getAtomGroups"],"method_name":"AtomCacheTest.testGetStructureForChainlessDomains","method_implementation":"{\n    // Uses the range '1-135' without a chain\n    ScopDatabase scop = ScopFactory.getSCOP(ScopFactory.VERSION_1_71);\n    Structure structure = cache.getStructureForDomain(\"d1hcy_1\", scop);\n    //System.out.println(cache.getStructure(\"1hcy\"));\n    //System.out.println(structure);\n    assertEquals(1, structure.getPolyChains().size());\n    Chain a = structure.getPolyChainByPDB(\"A\");\n    int expectedLengthA = 135;\n    assertEquals(expectedLengthA, a.getAtomGroups().size());\n    assertEquals(2, structure.getNonPolyChains().size());\n    Chain copperM = structure.getNonPolyChain(\"M\");\n    assertEquals(1, copperM.getAtomGroups().size());\n    Chain copperN = structure.getNonPolyChain(\"N\");\n    assertEquals(1, copperN.getAtomGroups().size());\n}","repo_id":"9","comment":"/**\n * Test parsing of chain-less ranges (present in SCOP < 1.73)\n * @throws IOException\n * @throws StructureException\n */\n","repo_name":"biojava-master/","id":2181,"method_signature":"void testGetStructureForChainlessDomains()"}