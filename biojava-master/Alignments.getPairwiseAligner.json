{"callee_method_names":["S.getCompoundSet","S.getCompoundSet"],"method_name":"Alignments.getPairwiseAligner","method_implementation":"{\n    if (!query.getCompoundSet().equals(target.getCompoundSet())) {\n        throw new IllegalArgumentException(\"Sequence compound sets must be the same\");\n    }\n    switch(type) {\n        default:\n        case GLOBAL:\n            return new NeedlemanWunsch<S, C>(query, target, gapPenalty, subMatrix);\n        case LOCAL:\n            return new SmithWaterman<S, C>(query, target, gapPenalty, subMatrix);\n        case GLOBAL_LINEAR_SPACE:\n        case LOCAL_LINEAR_SPACE:\n            // TODO other alignment options (Myers-Miller, Thompson)\n            throw new UnsupportedOperationException(Alignments.class.getSimpleName() + \" does not yet support \" + type + \" alignment\");\n    }\n}","repo_id":"9","comment":"/**\n * Factory method which constructs a pairwise sequence aligner.\n *\n * @param <S> each {@link Sequence} of an alignment pair is of type S\n * @param <C> each element of an {@link AlignedSequence} is a {@link Compound} of type C\n * @param query the first {@link Sequence} to align\n * @param target the second {@link Sequence} to align\n * @param type chosen type from list of pairwise sequence alignment routines\n * @param gapPenalty the gap penalties used during alignment\n * @param subMatrix the set of substitution scores used during alignment\n * @return pairwise sequence aligner\n */\n","repo_name":"biojava-master/","id":43,"method_signature":"PairwiseSequenceAligner<S,C> getPairwiseAligner(S, S, PairwiseSequenceAlignerType, GapPenalty, SubstitutionMatrix)"}