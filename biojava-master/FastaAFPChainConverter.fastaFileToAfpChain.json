{"callee_method_names":["FastaReader<ProteinSequence, AminoAcidCompound>.process","InputStream.close"],"method_name":"FastaAFPChainConverter.fastaFileToAfpChain","method_implementation":"{\n    InputStream inStream = new FileInputStream(fastaFile);\n    SequenceCreatorInterface<AminoAcidCompound> creator = new CasePreservingProteinSequenceCreator(AminoAcidCompoundSet.getAminoAcidCompoundSet());\n    SequenceHeaderParserInterface<ProteinSequence, AminoAcidCompound> headerParser = new GenericFastaHeaderParser<ProteinSequence, AminoAcidCompound>();\n    FastaReader<ProteinSequence, AminoAcidCompound> fastaReader = new FastaReader<ProteinSequence, AminoAcidCompound>(inStream, headerParser, creator);\n    LinkedHashMap<String, ProteinSequence> sequences = fastaReader.process();\n    inStream.close();\n    return fastaToAfpChain(sequences, structure1, structure2);\n}","repo_id":"9","comment":"/**\n * Reads the file {@code fastaFile}, expecting exactly two sequences which give a pairwise alignment. Uses this and two structures to create an AFPChain corresponding to the alignment. Uses a\n * {@link CasePreservingProteinSequenceCreator} and assumes that a residue is aligned if and only if it is given by an uppercase letter.\n *\n * @see #fastaToAfpChain(ProteinSequence, ProteinSequence, Structure, Structure)\n * @throws IOException\n * @throws StructureException\n */\n","repo_name":"biojava-master/","id":1306,"method_signature":"AFPChain fastaFileToAfpChain(File, Structure, Structure)"}