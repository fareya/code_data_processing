{"callee_method_names":["List<Pair<Group>>.size","List<Pair<Group>>.size","List<Pair<Group>>.size","List<Pair<Group>>.get","ArrayList.add","Matrix4d.clone","Matrix4d.invert","Matrix4d.mul"],"method_name":"BasePairParameters.analyze","method_implementation":"{\n    if (structure == null) {\n        pairingParameters = null;\n        stepParameters = null;\n        return this;\n    }\n    List<Chain> nucleics = this.getNucleicChains(nonredundant);\n    List<Pair<Group>> pairs = this.findPairs(nucleics);\n    this.pairingParameters = new double[pairs.size()][6];\n    this.stepParameters = new double[pairs.size()][6];\n    Matrix4d lastStep;\n    Matrix4d currentStep = null;\n    for (int i = 0; i < pairs.size(); i++) {\n        lastStep = currentStep;\n        currentStep = this.basePairReferenceFrame(pairs.get(i));\n        referenceFrames.add((Matrix4d) currentStep.clone());\n        for (int j = 0; j < 6; j++) pairingParameters[i][j] = pairParameters[j];\n        if (i != 0) {\n            lastStep.invert();\n            lastStep.mul(currentStep);\n            double[] sparms = calculateTp(lastStep);\n            for (int j = 0; j < 6; j++) stepParameters[i][j] = sparms[j];\n        }\n    }\n    return this;\n}","repo_id":"9","comment":"/**\n * This method is the main function call to extract all step parameters, pairing parameters, and sequence\n * information from the Structure object provided to the constructor.\n * @return This same object with the populated data, convenient for output\n *  (e.g. <i>log.info(new BasePairParameters(structure).analyze());<\/i>)\n */\n","repo_name":"biojava-master/","id":1717,"method_signature":"BasePairParameters analyze()"}