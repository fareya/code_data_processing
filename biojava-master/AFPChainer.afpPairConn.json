{"callee_method_ids":[431,484],"callee_method_names":["AFPChain.getConn","AFPChain.getDVar","FatCatParameters.getMisScore","FatCatParameters.getMaxPenalty","FatCatParameters.getDisCut","FatCatParameters.getGapExtend","FatCatParameters.getTorsionPenalty","FatCatParameters.getDisSmooth","AFPChain.getAfpSet","List<AFP>.get","List<AFP>.get","List<AFP>.get","List<AFP>.get","AFPChain.setConn","AFPChain.setDVar"],"method_name":"AFPChainer.afpPairConn","method_implementation":"{\n    Double conn = afpChain.getConn();\n    Double dvar = afpChain.getDVar();\n    double misScore = params.getMisScore();\n    double maxPenalty = params.getMaxPenalty();\n    double disCut = params.getDisCut();\n    double gapExtend = params.getGapExtend();\n    double torsionPenalty = params.getTorsionPenalty();\n    double disSmooth = params.getDisSmooth();\n    List<AFP> afpSet = afpChain.getAfpSet();\n    int m = calcGap(afpSet.get(afp2), afpSet.get(afp1));\n    int g = calcMismatch(afpSet.get(afp2), afpSet.get(afp1));\n    //on average, penalty for a mismatch is misScore, no modification on score\n    double gp = misScore * m;\n    if (g > 0) {\n        gp += gapExtend * g;\n    }\n    //penalty cut-off\n    if (gp < maxPenalty)\n        gp = maxPenalty;\n    //note: use < (smaller) instead of >, because maxPenalty is a negative number\n    double d;\n    d = calAfpDis(afp1, afp2, params, afpChain);\n    //note: the 'dis' value is numerically equivalent to the 'rms' with exceptions\n    boolean ch = false;\n    double tp = 0.0;\n    if (d >= disCut) {\n        tp = torsionPenalty;\n        ch = true;\n    } else //use the variation of the distances between AFPs\n    if (d > disCut - disSmooth) {\n        double wt = Math.sqrt((d - disCut + disSmooth) / disSmooth);\n        //using sqrt: penalty increase with dis more quicker than linear function\n        tp = torsionPenalty * wt;\n    }\n    dvar = d;\n    conn = tp + gp;\n    afpChain.setConn(conn);\n    afpChain.setDVar(dvar);\n    return ch;\n}","repo_id":"9","comment":"/**\n * \t//Key function: calculate the connectivity of AFP pairs\n * \t//no compatibility criteria is executed\n * \t//note: afp1 is previous to afp2 in terms of the position\n * \t\t //this module must be optimized\n *\n *  @param afp1\n *  @param afp2\n *  @return flag if they are connected\n */\n","repo_name":"biojava-master/","id":414,"method_signature":"boolean afpPairConn(int, int, FatCatParameters, AFPChain)"}