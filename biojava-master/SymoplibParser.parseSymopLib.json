{"callee_method_ids":[1450,1451,1452,1452,1450,1451,1452,1452],"callee_method_names":["BufferedReader.readLine","String.startsWith","TreeMap<Integer, SpaceGroup>.put","SpaceGroup.getId","HashMap<String, SpaceGroup>.put","SpaceGroup.getShortSymbol","SpaceGroup.getAltShortSymbol","HashMap<String, SpaceGroup>.put","SpaceGroup.getAltShortSymbol","String.indexOf","String.indexOf","String.indexOf","String.substring","String.substring","String.substring","Pattern.matcher","Matcher.matches","Matcher.group","Matcher.group","String.trim","Matcher.group","SpaceGroup.addTransformation","String.trim","BufferedReader.close","TreeMap<Integer, SpaceGroup>.put","SpaceGroup.getId","HashMap<String, SpaceGroup>.put","SpaceGroup.getShortSymbol","SpaceGroup.getAltShortSymbol","HashMap<String, SpaceGroup>.put","SpaceGroup.getAltShortSymbol","Logger.error","Element.getMessage","TreeMap<Integer, SpaceGroup>.values","SpaceGroup.initializeCellTranslations"],"method_name":"SymoplibParser.parseSymopLib","method_implementation":"{\n    TreeMap<Integer, SpaceGroup> map = new TreeMap<Integer, SpaceGroup>();\n    name2sgs = new HashMap<String, SpaceGroup>();\n    try {\n        BufferedReader br = new BufferedReader(new InputStreamReader(symoplibIS));\n        String line;\n        SpaceGroup currentSG = null;\n        while ((line = br.readLine()) != null) {\n            if (!line.startsWith(\" \")) {\n                if (currentSG != null) {\n                    map.put(currentSG.getId(), currentSG);\n                    name2sgs.put(currentSG.getShortSymbol(), currentSG);\n                    if (currentSG.getAltShortSymbol() != null) {\n                        // we add also alternative name to map so we can look it up\n                        name2sgs.put(currentSG.getAltShortSymbol(), currentSG);\n                    }\n                }\n                int idxFirstSpace = line.indexOf(' ');\n                int idxSecondSpace = line.indexOf(' ', idxFirstSpace + 1);\n                int idxThirdSpace = line.indexOf(' ', idxSecondSpace + 1);\n                int id = Integer.parseInt(line.substring(0, idxFirstSpace));\n                int multiplicity = Integer.parseInt(line.substring(idxFirstSpace + 1, idxSecondSpace));\n                int primitiveMultiplicity = Integer.parseInt(line.substring(idxSecondSpace + 1, idxThirdSpace));\n                Matcher m = namePat.matcher(line);\n                String shortSymbol = null;\n                String altShortSymbol = null;\n                String brav = null;\n                if (m.matches()) {\n                    brav = m.group(1);\n                    // null if there is no match\n                    altShortSymbol = m.group(2);\n                    if (altShortSymbol != null)\n                        altShortSymbol = altShortSymbol.trim().replaceAll(\"'\", \"\");\n                    shortSymbol = m.group(3);\n                }\n                currentSG = new SpaceGroup(id, multiplicity, primitiveMultiplicity, shortSymbol, altShortSymbol, BravaisLattice.getByName(brav));\n            } else {\n                currentSG.addTransformation(line.trim());\n            }\n        }\n        br.close();\n        // and we add the last SG\n        map.put(currentSG.getId(), currentSG);\n        name2sgs.put(currentSG.getShortSymbol(), currentSG);\n        if (currentSG.getAltShortSymbol() != null) {\n            // we add also alternative name to map so we can look it up\n            name2sgs.put(currentSG.getAltShortSymbol(), currentSG);\n        }\n    } catch (IOException e) {\n        logger.error(\"Fatal error! Can't read symop.lib file. Error: \" + e.getMessage() + \". \");\n        System.exit(1);\n    }\n    for (SpaceGroup sg : map.values()) {\n        sg.initializeCellTranslations();\n    }\n    return map;\n}","repo_id":"9","comment":"/**\n * A parser for the symop.lib file provided by CCP4. Note: this file is not getting re-distributed by BioJava.\n * It can be downloaded from:\n *\n *  http://www.ccp4.ac.uk/cvs/viewvc.cgi/libccp4/data/symop.lib?revision=1.10&view=markup\n *\n * Note: this file is not needed by BioJava. BioJava loads equivalent information from the file spacegroups.xml\n *\n * @param symoplibIS\n * @return\n */\n","repo_name":"biojava-master/","id":1448,"method_signature":"TreeMap<Integer,SpaceGroup> parseSymopLib(InputStream)"}