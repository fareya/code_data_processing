{"callee_method_ids":[1319],"callee_method_names":["LinkRecord.getAltLoc1","LinkRecord.getAltLoc2","Structure.getPolyChainByPDB","LinkRecord.getChainID1","Structure.getPolyChainByPDB","LinkRecord.getChainID2","Structure.getNonPolyChainsByPDB","LinkRecord.getChainID1","Structure.getNonPolyChainsByPDB","LinkRecord.getChainID2","Structure.getWaterChainByPDB","LinkRecord.getChainID1","Structure.getWaterChainByPDB","LinkRecord.getChainID2","List<String>.add","Chain.getId","List<String>.add","Chain.getId","List<Chain>.forEach","List<String>.add","List<Chain>.forEach","List<String>.add","LinkRecord.getResName1","List<String>.add","Chain.getId","LinkRecord.getResName2","List<String>.add","Chain.getId","LinkRecord.getName1","LinkRecord.getAltLoc1","LinkRecord.getResSeq1","LinkRecord.getiCode1","LinkRecord.getName2","LinkRecord.getAltLoc2","LinkRecord.getResSeq2","LinkRecord.getiCode2","Structure.nrModels","Map<Integer, Atom>.containsKey","Map<Integer, Atom>.containsKey","Map<Integer, Atom>.get","Map<Integer, Atom>.get","Map<Integer, Atom>.get","Map<Integer, Atom>.get","FileParsingParameters.isParseCAOnly","Logger.warn","LinkRecord.toString","Logger.debug"],"method_name":"BondMaker.formLinkRecordBond","method_implementation":"{\n    // only work with atoms that aren't alternate locations\n    if (\" \".equals(linkRecord.getAltLoc1()) || \" \".equals(linkRecord.getAltLoc2()))\n        return;\n    try {\n        // The PDB format uses author chain ids to reference chains. But one author chain id corresponds to multiple asym ids,\n        // thus we need to grab all the possible asym ids (poly and nonpoly) and then try to find the atoms\n        // See issue https://github.com/biojava/biojava/issues/943\n        Chain polyChain1 = structure.getPolyChainByPDB(linkRecord.getChainID1());\n        Chain polyChain2 = structure.getPolyChainByPDB(linkRecord.getChainID2());\n        List<Chain> nonpolyChains1 = structure.getNonPolyChainsByPDB(linkRecord.getChainID1());\n        List<Chain> nonpolyChains2 = structure.getNonPolyChainsByPDB(linkRecord.getChainID2());\n        Chain waterChain1 = structure.getWaterChainByPDB(linkRecord.getChainID1());\n        Chain waterChain2 = structure.getWaterChainByPDB(linkRecord.getChainID2());\n        List<String> allChainIds1 = new ArrayList<>();\n        List<String> allChainIds2 = new ArrayList<>();\n        if (polyChain1 != null)\n            allChainIds1.add(polyChain1.getId());\n        if (polyChain2 != null)\n            allChainIds2.add(polyChain2.getId());\n        if (nonpolyChains1 != null)\n            nonpolyChains1.forEach(npc -> allChainIds1.add(npc.getId()));\n        if (nonpolyChains2 != null)\n            nonpolyChains2.forEach(npc -> allChainIds2.add(npc.getId()));\n        if (waterChain1 != null && \"HOH\".equals(linkRecord.getResName1()))\n            allChainIds1.add(waterChain1.getId());\n        if (waterChain2 != null && \"HOH\".equals(linkRecord.getResName2()))\n            allChainIds2.add(waterChain2.getId());\n        Map<Integer, Atom> a = getAtomFromRecordTryMultipleChainIds(linkRecord.getName1(), linkRecord.getAltLoc1(), linkRecord.getResSeq1(), linkRecord.getiCode1(), allChainIds1);\n        Map<Integer, Atom> b = getAtomFromRecordTryMultipleChainIds(linkRecord.getName2(), linkRecord.getAltLoc2(), linkRecord.getResSeq2(), linkRecord.getiCode2(), allChainIds2);\n        for (int i = 0; i < structure.nrModels(); i++) {\n            if (a.containsKey(i) && b.containsKey(i)) {\n                // TODO determine what the actual bond order of this bond is; for\n                // now, we're assuming they're single bonds\n                if (!a.get(i).equals(b.get(i))) {\n                    new BondImpl(a.get(i), b.get(i), 1);\n                }\n            }\n        }\n    } catch (StructureException e) {\n        // Note, in Calpha only mode the link atoms may not be present.\n        if (!params.isParseCAOnly()) {\n            logger.warn(\"Could not find atoms specified in LINK record: {}\", linkRecord.toString());\n        } else {\n            logger.debug(\"Could not find atoms specified in LINK record while parsing in parseCAonly mode.\");\n        }\n    }\n}","repo_id":"9","comment":"/**\n * Creates bond objects from a LinkRecord as parsed from a PDB file\n * @param linkRecord the PDB-format LINK record\n */\n","repo_name":"biojava-master/","id":1292,"method_signature":"void formLinkRecordBond(LinkRecord)"}