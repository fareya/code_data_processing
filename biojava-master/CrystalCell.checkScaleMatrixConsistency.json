{"callee_method_names":["Matrix4d.getRotationScale","Matrix3d.determinant"],"method_name":"CrystalCell.checkScaleMatrixConsistency","method_implementation":"{\n    double vol = getVolume();\n    Matrix3d m = new Matrix3d();\n    scaleMatrix.getRotationScale(m);\n    // note we need to have a relaxed tolerance here as the PDB scale matrix is given with not such high precision\n    // plus we don't want to have false positives, so we stay conservative\n    double tolerance = vol / 100.0;\n    if ((Math.abs(vol - 1.0 / m.determinant()) > tolerance)) {\n        //System.err.println(\"Warning! SCALE matrix from PDB does not match 1/determinat == cell volume: \"+\n        //\t\tString.format(\"vol=%6.3f  1/det=%6.3f\",vol,1.0/m.determinant()));\n        return false;\n    }\n    // this would be to check our own matrix, must always match!\n    //if (!deltaComp(vol,1.0/getMTranspose().determinant())) {\n    //\tSystem.err.println(\"Our calculated SCALE matrix does not match 1/det=cell volume\");\n    //}\n    return true;\n}","repo_id":"9","comment":"/**\n * Given a scale matrix parsed from the PDB entry (SCALE1,2,3 records),\n * checks that the matrix is a consistent scale matrix by comparing the\n * cell volume to the inverse of the scale matrix determinant (tolerance of 1/100).\n * If they don't match false is returned.\n * See the PDB documentation for the SCALE record.\n * See also last equation of section 2.5 of \"Fundamentals of Crystallography\" C. Giacovazzo\n * @param scaleMatrix\n * @return\n */\n","repo_name":"biojava-master/","id":1477,"method_signature":"boolean checkScaleMatrixConsistency(Matrix4d)"}