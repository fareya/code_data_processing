{"callee_method_names":["Pair<Atom>.getFirst","Pair<Atom>.getSecond","StringWriter.append","StringWriter.append","Atom.getX","Atom.getY","Atom.getZ","Atom.getX","Atom.getY","Atom.getZ","Atom.getX","Atom.getX","StringWriter.append","Atom.getX","Atom.getY","Atom.getZ","Atom.getX","Atom.getY","Atom.getZ","StringWriter.append","Atom.getX","Atom.getY","Atom.getZ","Atom.getX","Atom.getY","Atom.getZ","StringWriter.append","StringWriter.append","Atom.getX","Atom.getY","Atom.getZ","Atom.getX","Atom.getY","Atom.getZ","StringWriter.toString"],"method_name":"RotationAxis.getJmolScript","method_implementation":"{\n    // width of JMol object\n    final double width = .5;\n    //axis color\n    final String axisColor = \"yellow\";\n    //screw translation color\n    final String screwColor = \"orange\";\n    Pair<Atom> endPoints = getAxisEnds(atoms);\n    Atom axisMin = endPoints.getFirst();\n    Atom axisMax = endPoints.getSecond();\n    StringWriter result = new StringWriter();\n    // set arrow heads to a reasonable length\n    result.append(\"set defaultDrawArrowScale 2.0;\");\n    // draw axis of rotation\n    result.append(String.format(Locale.US, \"draw ID rot\" + axisID + \" CYLINDER {%f,%f,%f} {%f,%f,%f} WIDTH %f COLOR %s ;\", axisMin.getX(), axisMin.getY(), axisMin.getZ(), axisMax.getX(), axisMax.getY(), axisMax.getZ(), width, axisColor));\n    // draw screw component\n    boolean positiveScrew = Math.signum(rotationAxis.getX()) == Math.signum(screwTranslation.getX());\n    if (positiveScrew) {\n        // screw is in the same direction as the axis\n        result.append(String.format(Locale.US, \"draw ID screw\" + axisID + \" VECTOR {%f,%f,%f} {%f,%f,%f} WIDTH %f COLOR %s ;\", axisMax.getX(), axisMax.getY(), axisMax.getZ(), screwTranslation.getX(), screwTranslation.getY(), screwTranslation.getZ(), width, screwColor));\n    } else {\n        // screw is in the opposite direction as the axis\n        result.append(String.format(Locale.US, \"draw ID screw\" + axisID + \" VECTOR {%f,%f,%f} {%f,%f,%f} WIDTH %f COLOR %s ;\", axisMin.getX(), axisMin.getY(), axisMin.getZ(), screwTranslation.getX(), screwTranslation.getY(), screwTranslation.getZ(), width, screwColor));\n    }\n    // draw angle of rotation\n    if (rotationPos != null) {\n        result.append(System.getProperty(\"line.separator\"));\n        result.append(String.format(Locale.US, \"draw ID rotArc\" + axisID + \" ARC {%f,%f,%f} {%f,%f,%f} {0,0,0} {0,%f,%d} SCALE 500 DIAMETER %f COLOR %s;\", axisMin.getX(), axisMin.getY(), axisMin.getZ(), axisMax.getX(), axisMax.getY(), axisMax.getZ(), Math.toDegrees(theta), // draw at the opposite end from the screw arrow\n        positiveScrew ? 0 : 1, width, axisColor));\n    }\n    return result.toString();\n}","repo_id":"9","comment":"/**\n * Returns a Jmol script which will display the axis of rotation. This\n * consists of a cyan arrow along the axis, plus an arc showing the angle\n * of rotation.\n * <p>\n * As the rotation angle gets smaller, the axis of rotation becomes poorly\n * defined and would need to get farther and farther away from the protein.\n * This is not particularly useful, so we arbitrarily draw it parallel to\n * the translation and omit the arc.\n * @param atoms Some atoms from the protein, used for determining the bounds\n *  \t  of the axis.\n * @param axisID in case of representing more than one axis in the same jmol\n * \t\t  panel, indicate the ID number.\n *\n * @return The Jmol script, suitable for calls to\n * {@link org.biojava.nbio.structure.align.gui.jmol.StructureAlignmentJmol#evalString() jmol.evalString()}\n */\n","repo_name":"biojava-master/","id":570,"method_signature":"String getJmolScript(Atom[], int)"}