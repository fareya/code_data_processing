{"callee_method_ids":[266,267,268,269],"callee_method_names":["ModificationCondition.getLinkages","List<ModificationLinkage>.size","List<ModificationLinkage>.get","ModificationLinkage.getComponent1","ModificationLinkage.getComponent2","Map<Component,Set<Group>>.get","Map<Component,Set<Group>>.get","ModificationLinkage.getPDBNameOfPotentialAtomsOnComponent1","ModificationLinkage.getPDBNameOfPotentialAtomsOnComponent2","List<Group>.contains","List<Group>.contains","List<Atom[]>.add","List<Atom[]>.isEmpty","List<List<Atom[]>>.add"],"method_name":"ProteinModificationIdentifier.getMatchedAtomsOfLinkages","method_implementation":"{\n    List<ModificationLinkage> linkages = condition.getLinkages();\n    int nLink = linkages.size();\n    List<List<Atom[]>> matchedAtomsOfLinkages = new ArrayList<List<Atom[]>>(nLink);\n    for (int iLink = 0; iLink < nLink; iLink++) {\n        ModificationLinkage linkage = linkages.get(iLink);\n        Component comp1 = linkage.getComponent1();\n        Component comp2 = linkage.getComponent2();\n        //\t\t\tboolean isAA1 = comp1.;\n        //\t\t\tboolean isAA2 = comp2.getType()==true;\n        Set<Group> groups1 = mapCompGroups.get(comp1);\n        Set<Group> groups2 = mapCompGroups.get(comp2);\n        List<Atom[]> list = new ArrayList<Atom[]>();\n        List<String> potentialNamesOfAtomOnGroup1 = linkage.getPDBNameOfPotentialAtomsOnComponent1();\n        for (String name : potentialNamesOfAtomOnGroup1) {\n            if (\"*\".equals(name)) {\n                // wildcard\n                // search all atoms\n                potentialNamesOfAtomOnGroup1 = null;\n                break;\n            }\n        }\n        List<String> potentialNamesOfAtomOnGroup2 = linkage.getPDBNameOfPotentialAtomsOnComponent2();\n        for (String name : potentialNamesOfAtomOnGroup2) {\n            if (\"*\".equals(name)) {\n                // wildcard\n                // search all atoms\n                potentialNamesOfAtomOnGroup2 = null;\n                break;\n            }\n        }\n        for (Group g1 : groups1) {\n            for (Group g2 : groups2) {\n                if (g1.equals(g2)) {\n                    continue;\n                }\n                // only for wildcard match of two residues\n                boolean ignoreNCLinkage = potentialNamesOfAtomOnGroup1 == null && potentialNamesOfAtomOnGroup2 == null && residues.contains(g1) && residues.contains(g2);\n                Atom[] atoms = StructureUtil.findNearestAtomLinkage(g1, g2, potentialNamesOfAtomOnGroup1, potentialNamesOfAtomOnGroup2, ignoreNCLinkage, bondLengthTolerance);\n                if (atoms != null) {\n                    list.add(atoms);\n                }\n            }\n        }\n        if (list.isEmpty()) {\n            // broken linkage\n            break;\n        }\n        matchedAtomsOfLinkages.add(list);\n    }\n    return matchedAtomsOfLinkages;\n}","repo_id":"9","comment":"/**\n * Get matched atoms for all linkages.\n */\n","repo_name":"biojava-master/","id":303,"method_signature":"List<List<Atom[]>> getMatchedAtomsOfLinkages(ModificationCondition, Map)"}