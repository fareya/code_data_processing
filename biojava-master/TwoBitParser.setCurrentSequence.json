{"callee_method_names":["HashMap.get","HashMap.get","RandomAccessFile.seek","Logger.debug","Logger.debug","Logger.debug","RandomAccessFile.getFilePointer"],"method_name":"TwoBitParser.setCurrentSequence","method_implementation":"{\n    if (cur_seq_name != null) {\n        throw new Exception(\"Sequence [\" + cur_seq_name + \"] was not closed\");\n    }\n    if (seq2pos.get(seq_name) == null) {\n        throw new Exception(\"Sequence [\" + seq_name + \"] was not found in 2bit file\");\n    }\n    cur_seq_name = seq_name;\n    long pos = seq2pos.get(seq_name);\n    raf.seek(pos);\n    long dna_size = readFourBytes();\n    logger.debug(\"2bit: Sequence name=[{}], dna_size={}\", cur_seq_name, dna_size);\n    cur_dna_size = dna_size;\n    int nn_block_qnt = (int) readFourBytes();\n    cur_nn_blocks = new long[nn_block_qnt][2];\n    for (int i = 0; i < nn_block_qnt; i++) {\n        cur_nn_blocks[i][0] = readFourBytes();\n    }\n    for (int i = 0; i < nn_block_qnt; i++) {\n        cur_nn_blocks[i][1] = readFourBytes();\n    }\n    for (int i = 0; i < nn_block_qnt; i++) {\n        logger.debug(\"NN-block: [{},{}] \", cur_nn_blocks[i][0], cur_nn_blocks[i][1]);\n    }\n    int mask_block_qnt = (int) readFourBytes();\n    cur_mask_blocks = new long[mask_block_qnt][2];\n    for (int i = 0; i < mask_block_qnt; i++) {\n        cur_mask_blocks[i][0] = readFourBytes();\n    }\n    for (int i = 0; i < mask_block_qnt; i++) {\n        cur_mask_blocks[i][1] = readFourBytes();\n    }\n    for (int i = 0; i < mask_block_qnt; i++) {\n        logger.debug(\"[{},{}] \", cur_mask_blocks[i][0], cur_mask_blocks[i][1]);\n    }\n    readFourBytes();\n    start_file_pos = raf.getFilePointer();\n    reset();\n}","repo_id":"9","comment":"/**\n * Method open nucleotide stream for sequence with given name.\n * @param seq_name name of sequence (one of returned by getSequenceNames()).\n * @throws Exception\n */\n","repo_name":"biojava-master/","id":2380,"method_signature":"void setCurrentSequence(String)"}