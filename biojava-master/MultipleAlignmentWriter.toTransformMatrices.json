{"callee_method_names":["MultipleAlignment.getBlockSets","MultipleAlignment.getBlockSet","List<Matrix4d>.size","MultipleAlignment.getBlockSets","StringBuffer.append","StringBuffer.append","StringBuffer.append","MultipleAlignment.size","StringBuffer.append","List<Matrix4d>.get","List<Matrix4d>.get","List<Matrix4d>.get","List<Matrix4d>.get","StringBuffer.append","StringBuffer.append","List<Matrix4d>.get","List<Matrix4d>.get","List<Matrix4d>.get","List<Matrix4d>.get","StringBuffer.append","StringBuffer.append","List<Matrix4d>.get","List<Matrix4d>.get","List<Matrix4d>.get","List<Matrix4d>.get","StringBuffer.append","StringBuffer.toString"],"method_name":"MultipleAlignmentWriter.toTransformMatrices","method_implementation":"{\n    StringBuffer txt = new StringBuffer();\n    for (int bs = 0; bs < alignment.getBlockSets().size(); bs++) {\n        List<Matrix4d> btransforms = alignment.getBlockSet(bs).getTransformations();\n        if (btransforms == null || btransforms.size() < 1)\n            continue;\n        if (alignment.getBlockSets().size() > 1) {\n            txt.append(\"Operations for block \");\n            txt.append(bs + 1);\n            txt.append(\"\\n\");\n        }\n        for (int str = 0; str < alignment.size(); str++) {\n            String origString = \"ref\";\n            txt.append(String.format(Locale.US, \"     X\" + (str + 1) + \" = (%9.6f)*X\" + origString + \" + (%9.6f)*Y\" + origString + \" + (%9.6f)*Z\" + origString + \" + (%12.6f)\", btransforms.get(str).getElement(0, 0), btransforms.get(str).getElement(0, 1), btransforms.get(str).getElement(0, 2), btransforms.get(str).getElement(0, 3)));\n            txt.append(\"\\n\");\n            txt.append(String.format(Locale.US, \"     Y\" + (str + 1) + \" = (%9.6f)*X\" + origString + \" + (%9.6f)*Y\" + origString + \" + (%9.6f)*Z\" + origString + \" + (%12.6f)\", btransforms.get(str).getElement(1, 0), btransforms.get(str).getElement(1, 1), btransforms.get(str).getElement(1, 2), btransforms.get(str).getElement(1, 3)));\n            txt.append(\"\\n\");\n            txt.append(String.format(Locale.US, \"     Z\" + (str + 1) + \" = (%9.6f)*X\" + origString + \" + (%9.6f)*Y\" + origString + \" + (%9.6f)*Z\" + origString + \" + (%12.6f)\", btransforms.get(str).getElement(2, 0), btransforms.get(str).getElement(2, 1), btransforms.get(str).getElement(2, 2), btransforms.get(str).getElement(2, 3)));\n            txt.append(\"\\n\\n\");\n        }\n    }\n    return txt.toString();\n}","repo_id":"9","comment":"/**\n * Converts the transformation Matrices of the alignment into a String\n * output.\n *\n * @param afpChain\n * @return String transformation Matrices\n */\n","repo_name":"biojava-master/","id":673,"method_signature":"String toTransformMatrices(MultipleAlignment)"}