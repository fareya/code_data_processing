{"callee_method_names":["AFPChain.getAlgorithmName"],"method_name":"AfpChainWriter.toWebSiteDisplay","method_implementation":"{\n    boolean printLegend = true;\n    boolean longHeader = true;\n    boolean showHTML = true;\n    if (afpChain.getAlgorithmName().equalsIgnoreCase(FatCatFlexible.algorithmName)) {\n        String msg = toFatCatCore(afpChain, ca1, ca2, printLegend, longHeader, showHTML, showAlignmentBlock);\n        return msg;\n    }\n    boolean showSeq = true;\n    AFPAlignmentDisplay.getAlign(afpChain, ca1, ca2, showSeq);\n    //      String msg= toFatCatCore(afpChain,ca1,ca2, printLegend,longHeader);\n    //\n    String msg = toPrettyAlignment(afpChain, ca1, ca2, showHTML, showAlignmentBlock);\n    msg = msg + newline + \"     <span class=\\\"m\\\">|<\/span> ... Structurally equivalent and identical residues \" + newline + \"     <span class=\\\"sm\\\">:<\/span> ... Structurally equivalent and similar residues \" + newline + \"     <span class=\\\"qg\\\">.<\/span> ... Structurally equivalent, but not similar residues. \" + newline;\n    msg += newline;\n    msg += \"     To calculate the coordinates of chain 2 aligned on chain 1 apply the following transformation: \";\n    msg += newline;\n    msg += newline;\n    msg += toRotMat(afpChain);\n    return msg;\n}","repo_id":"9","comment":"/**\n * Prints the afpChain as a nicely formatted alignment, including alignment\n * statistics, the aligned sequences themselves, and information about the\n * superposition.\n * @param afpChain\n * @param ca1\n * @param ca2\n *\n * @return a String representation as it is used on the RCSB PDB web site for display.\n */\n","repo_name":"biojava-master/","id":514,"method_signature":"String toWebSiteDisplay(AFPChain, Atom[], Atom[], boolean)"}