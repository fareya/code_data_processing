{"callee_method_ids":[487,495,497,492,484,501,500,501,500,499,493,494],"callee_method_names":["AFPChain.getName1","AFPChain.getName2","AFPChain.getCa1Length","AFPChain.getCa2Length","AFPChain.getBlockNum","AFPChain.getTotalLenIni","AFPChain.getTotalRmsdIni","AFPChain.getOptLength","AFPChain.getTotalRmsdOpt","AFPChain.getChainRmsd","AFPChain.getAlignScore","AFPChain.getAlnLength","AFPChain.getGapLen","AFPChain.getAfpSet","AFPChain.getSimilarity","AFPChain.getIdentity","AFPChain.calcSimilarity","AFPChain.getSimilarity","AFPChain.getIdentity","AFPChain.getAlgorithmName","AFPChain.getProbability","List<AFP>.size","AFPChain.getBlockGap","AFPChain.getBlockScore","AFPChain.getBlockRmsd","AFPChain.getBlockSize","AFPChain.getAlnbeg1","AFPChain.getAlnbeg2","AFPChain.getAlnseq1","AFPChain.getAlnseq2","AFPChain.getAlnsymb","StringBuffer.append","StringBuffer.append","StringBuffer.append","AFPChain.isShortAlign","StringBuffer.append","StringBuffer.toString","StringBuffer.append","StringBuffer.append","StringBuffer.append","StringBuffer.append","StringBuffer.append","StringBuffer.append","Atom[].getGroup","Atom[].getGroup","String.length","String.charAt","String.charAt","String.charAt","StringBuffer.append","StringBuffer.append","StringBuffer.append","StringBuffer.append","StringBuffer.append","StringBuffer.append","StringBuffer.append","StringBuffer.append","StringBuffer.append","StringBuffer.append","String.charAt","String.charAt","StringBuffer.append","String.equalsIgnoreCase","String.equalsIgnoreCase","StringBuffer.append","StringBuffer.append","StringBuffer.append","StringBuffer.toString"],"method_name":"AfpChainWriter.toFatCatCore","method_implementation":"{\n    //TODO The sequence numbers are inaccurate if a !afpChain.isSequential()\n    String name1 = afpChain.getName1();\n    String name2 = afpChain.getName2();\n    int ca1Length = afpChain.getCa1Length();\n    int ca2Length = afpChain.getCa2Length();\n    int blockNum = afpChain.getBlockNum();\n    int totalLenIni = afpChain.getTotalLenIni();\n    double totalRmsdIni = afpChain.getTotalRmsdIni();\n    int optLength = afpChain.getOptLength();\n    double totalRmsdOpt = afpChain.getTotalRmsdOpt();\n    double chainRmsd = afpChain.getChainRmsd();\n    double alignScore = afpChain.getAlignScore();\n    int alnLength = afpChain.getAlnLength();\n    int gapLen = afpChain.getGapLen();\n    List<AFP> afpSet = afpChain.getAfpSet();\n    double similarity = afpChain.getSimilarity();\n    double identity = afpChain.getIdentity();\n    if (similarity < 0 || identity < 0) {\n        afpChain.calcSimilarity();\n        similarity = afpChain.getSimilarity();\n        identity = afpChain.getIdentity();\n    }\n    String algorithmName = afpChain.getAlgorithmName();\n    //String version = afpChain.getVersion();\n    double probability = afpChain.getProbability();\n    int afpNum = afpSet.size();\n    int[] blockGap = afpChain.getBlockGap();\n    double[] blockScore = afpChain.getBlockScore();\n    double[] blockRmsd = afpChain.getBlockRmsd();\n    int[] blockSize = afpChain.getBlockSize();\n    int alnbeg1 = afpChain.getAlnbeg1();\n    int alnbeg2 = afpChain.getAlnbeg2();\n    char[] alnseq1 = afpChain.getAlnseq1();\n    char[] alnseq2 = afpChain.getAlnseq2();\n    char[] alnsymb = afpChain.getAlnsymb();\n    // == end of extractation of data values from afpChain\n    ////////////////////////////////\n    StringBuffer txt = new StringBuffer();\n    if (longHeader) {\n        txt.append(String.format(\"Align %s.pdb %d with %s.pdb %d\", name1, ca1Length, name2, ca2Length));\n    } else {\n        txt.append(String.format(\"Align %s.pdb Length1: %d with %s.pdb Length2: %d\", name1, ca1Length, name2, ca2Length));\n    }\n    txt.append(newline);\n    if (afpChain.isShortAlign()) {\n        txt.append(\"Short match\");\n        return txt.toString();\n    }\n    //txt.append(String.format(Locale.US, \"raw-score: %.2f norm.-score: %.2f \", alignScore, normAlignScore));\n    if (longHeader) {\n        txt.append(String.format(Locale.US, \"Twists %d ini-len %d ini-rmsd %.2f opt-equ %d opt-rmsd %.2f chain-rmsd %.2f Score %.2f align-len %d gaps %d (%.2f%%)\", blockNum - 1, totalLenIni, totalRmsdIni, optLength, totalRmsdOpt, chainRmsd, alignScore, alnLength, gapLen, (100.0 * gapLen / alnLength)));\n        txt.append(newline);\n    } else {\n        if (!longHeader)\n            printScore(txt, algorithmName, probability, longHeader);\n        printScoresInLines(afpChain, blockNum, optLength, totalRmsdOpt, alignScore, alnLength, gapLen, identity, similarity, txt);\n    }\n    //txt.append(String.format(Locale.US, \"P-value %.2e Afp-num %d Identity %.2f%% Similarity %.2f%% norm.-score: %.2f\"+newline, probability, afpNum, identity * 100, similarity * 100, normAlignScore));\n    if (longHeader) {\n        printScore(txt, algorithmName, probability, longHeader);\n        txt.append(String.format(Locale.US, \"Afp-num %d Identity %.2f%% Similarity %.2f%%\", afpNum, identity * 100, similarity * 100));\n        txt.append(newline);\n    }\n    int i;\n    double gap;\n    if (longHeader) {\n        // FatCatParameters.DEFAULT_FRAGLEN;\n        int fragLen = 8;\n        for (i = 0; i < blockNum; i++) {\n            gap = blockGap[i] / ((double) blockGap[i] + fragLen * blockSize[i]);\n            txt.append(String.format(Locale.US, \"Block %2d afp %2d score %5.2f rmsd %5.2f gap %d (%.2f%%)\", i, blockSize[i], blockScore[i], blockRmsd[i], blockGap[i], gap));\n            txt.append(newline);\n        }\n    }\n    int linelen = 70;\n    String a;\n    String b;\n    String c;\n    int t = 0;\n    int ap = alnbeg1;\n    int bp = alnbeg2;\n    int k, len;\n    //System.out.println(alnseq1.length + \" \" + alnseq1.toString());\n    while ((alnLength - t) > 0) {\n        if (alnLength - t > linelen)\n            len = linelen;\n        else\n            len = alnLength - t;\n        if (ap >= ca1.length)\n            break;\n        if (bp >= ca2.length)\n            break;\n        String pdb1 = ca1[ap].getGroup().getResidueNumber().toString();\n        String pdb2 = ca2[bp].getGroup().getResidueNumber().toString();\n        //System.err.println(\"t,len:\"+t+\":\"+len);\n        String lseq1 = String.valueOf(alnseq1).substring(t, t + len);\n        String lseq2 = String.valueOf(alnseq2).substring(t, t + len);\n        String lsymb = String.valueOf(alnsymb).substring(t, t + len);\n        //System.err.println(\"B:\" + b);\n        // check conservation and color accordingly, if requested by user.\n        if (showHTML) {\n            a = \"\";\n            b = \"\";\n            c = \"\";\n            //\t<span class=\\\"m\\\">|<\/span> ... Structurally equivalent and identical residues\n            //  <span class=\\\"sm\\\">:<\/span> ... Structurally equivalent and similar residues\n            //  <span class=\\\"qg\\\">.<\/span> ... Structurally equivalent, but not similar residues.\n            for (int pos = 0; pos < lseq1.length(); pos++) {\n                char c1 = lseq1.charAt(pos);\n                char c2 = lseq2.charAt(pos);\n                char cl = lsymb.charAt(pos);\n                int block = -1;\n                if (cl != ' ') {\n                    try {\n                        block = Integer.parseInt(String.valueOf(cl));\n                    } catch (Exception e) {\n                        //\n                    }\n                }\n                if (cl != ' ') {\n                    if (showAlignmentBlock && block > -1) {\n                        a += \"<span class=\\\"alignmentBlock1\" + block + \"\\\">\" + c1 + \"<\/span>\";\n                        b += \"<span class=\\\"alignmentBlock2\" + block + \"\\\">\" + c2 + \"<\/span>\";\n                        c += \"<span class=\\\"m\\\">\" + cl + \"<\/span>\";\n                    } else {\n                        a += getPrefix(c1, c2, 0, block, false).toString() + c1 + \"<\/span>\";\n                        b += getPrefix(c1, c2, 1, block, false).toString() + c2 + \"<\/span>\";\n                        c += \"<span class=\\\"m\\\">\" + cl + \"<\/span>\";\n                    }\n                } else if (c1 != '-' && c2 != '-') {\n                    a += \"<span class=\\\"sm\\\">\" + c1 + \"<\/span>\";\n                    b += \"<span class=\\\"sm\\\">\" + c2 + \"<\/span>\";\n                    c += \"<span class=\\\"sm\\\">\" + cl + \"<\/span>\";\n                } else {\n                    a += \"<span class=\\\"qg\\\">\" + c1 + \"<\/span>\";\n                    b += \"<span class=\\\"qg\\\">\" + c2 + \"<\/span>\";\n                    c += \"<span class=\\\"qg\\\">\" + cl + \"<\/span>\";\n                }\n                if (c1 != '-')\n                    ap++;\n                if (c2 != '-')\n                    bp++;\n            }\n        } else {\n            a = lseq1;\n            b = lseq2;\n            c = lsymb;\n        }\n        txt.append(newline);\n        if (longHeader)\n            txt.append(String.format(\"%14s\", \" \"));\n        else\n            txt.append(String.format(\"%14s\", \" \"));\n        if (longHeader) {\n            for (k = 10; k <= len; k += 10) txt.append(\"    .    :\");\n            if (k <= len + 5)\n                txt.append(\"    .\");\n        } else {\n            for (k = 10; k <= len; k += 10) txt.append(\"----+----|\");\n            if (k <= len + 5)\n                txt.append(\"----+\");\n        }\n        txt.append(newline);\n        txt.append(String.format(\"Chain 1:%5s %s\" + newline + \"%14s%s\" + newline + \"Chain 2:%5s %s\", pdb1, a, \" \", c, pdb2, b));\n        txt.append(newline);\n        if (!showHTML) {\n            for (k = 0; k < len; k++) {\n                if (a.charAt(k) != '-')\n                    ap++;\n                if (b.charAt(k) != '-')\n                    bp++;\n            }\n        }\n        t += len;\n    }\n    txt.append(newline);\n    if (printLegend) {\n        if (algorithmName.equalsIgnoreCase(CeMain.algorithmName) || algorithmName.equalsIgnoreCase(SmithWaterman3Daligner.algorithmName)) {\n            txt.append(\"Note: positions are from PDB; | means alignment of identical amino acids, : of similar amino acids \");\n        } else {\n            txt.append(\"Note: positions are from PDB; the numbers between alignments are block index\");\n        }\n        txt.append(newline);\n    }\n    return txt.toString();\n}","repo_id":"9","comment":"/**\n * Output in FatCatCore format\n *\n * <p>Note that if a circular permutation has occured the residue numbers may\n * be innaccurate.\n *\n * @param afpChain\n * @param ca1\n * @param ca2\n * @param printLegend\n * @param longHeader\n * @param showHTML\n * @param showAlignmentBlock\n * @return\n */\n","repo_name":"biojava-master/","id":512,"method_signature":"String toFatCatCore(AFPChain, Atom[], Atom[], boolean, boolean, boolean, boolean)"}