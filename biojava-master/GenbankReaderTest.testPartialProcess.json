{"callee_method_names":["GenbankReader<DNASequence, NucleotideCompound>.process","CheckableInputStream.isclosed","LinkedHashMap<String, DNASequence>.size","LinkedHashMap<String, DNASequence>.get","GenbankReader<DNASequence, NucleotideCompound>.process","CheckableInputStream.isclosed","LinkedHashMap<String, DNASequence>.size","LinkedHashMap<String, DNASequence>.get","GenbankReader<DNASequence, NucleotideCompound>.isClosed","GenbankReader<DNASequence, NucleotideCompound>.close","GenbankReader<DNASequence, NucleotideCompound>.isClosed","CheckableInputStream.isclosed"],"method_name":"GenbankReaderTest.testPartialProcess","method_implementation":"{\n    CheckableInputStream inStream = new CheckableInputStream(this.getClass().getResourceAsStream(\"/two-dnaseqs.gb\"));\n    GenbankReader<DNASequence, NucleotideCompound> genbankDNA = new GenbankReader<>(inStream, new GenericGenbankHeaderParser<>(), new DNASequenceCreator(DNACompoundSet.getDNACompoundSet()));\n    // First call to process(1) returns the first sequence\n    LinkedHashMap<String, DNASequence> dnaSequences = genbankDNA.process(1);\n    assertFalse(inStream.isclosed());\n    assertNotNull(dnaSequences);\n    assertEquals(1, dnaSequences.size());\n    assertNotNull(dnaSequences.get(\"vPetite\"));\n    // Second call to process(1) returns the second sequence\n    dnaSequences = genbankDNA.process(1);\n    assertFalse(inStream.isclosed());\n    assertNotNull(dnaSequences);\n    assertEquals(1, dnaSequences.size());\n    assertNotNull(dnaSequences.get(\"sbFDR\"));\n    assertFalse(genbankDNA.isClosed());\n    genbankDNA.close();\n    assertTrue(genbankDNA.isClosed());\n    assertTrue(inStream.isclosed());\n}","repo_id":"9","comment":"/**\n * Test the process method with a number of sequences to be read at each call.\n * The underlying {@link InputStream} should remain open until the last call.\n */\n","repo_name":"biojava-master/","id":3220,"method_signature":"void testPartialProcess()"}