{"callee_method_names":["Group.setPDBName","Atom.setName","Group.addAtom","List<Atom>.add","Group.setPDBName","Atom.setName","Group.addAtom","List<Atom>.add","List<Atom>.toArray"],"method_name":"TestSubunitCluster.mockAtomArray","method_implementation":"{\n    List<Atom> atoms = new ArrayList<>(size1 + size2);\n    for (int i = 0; i < size1; i++) {\n        Group g = new AminoAcidImpl();\n        g.setPDBName(type1);\n        Atom a = new AtomImpl();\n        a.setName(StructureTools.CA_ATOM_NAME);\n        g.addAtom(a);\n        atoms.add(a);\n    }\n    if (size2 >= 0 && type2 != null) {\n        for (int i = 0; i < size2; i++) {\n            Group g = new AminoAcidImpl();\n            g.setPDBName(type2);\n            Atom a = new AtomImpl();\n            a.setName(StructureTools.CA_ATOM_NAME);\n            g.addAtom(a);\n            atoms.add(a);\n        }\n    }\n    return atoms.toArray(new Atom[0]);\n}","repo_id":"9","comment":"/**\n * Create a mock atom array, with size1 residues of type1, followed by size2 residues of type2.\n *\n * @param size1 the number of residues of type1 to add\n * @param type1 the 3 letter code of residue\n * @param size2 the number of residues of type2 to add, if -1 none are added\n * @param type2 the 3 letter code of residue, if null none are added\n * @return the mock atom array\n */\n","repo_name":"biojava-master/","id":2320,"method_signature":"Atom[] mockAtomArray(int, String, int, String)"}