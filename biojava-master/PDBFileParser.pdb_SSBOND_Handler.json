{"callee_method_ids":[1317],"callee_method_names":["FileParsingParameters.isHeaderOnly","String.length","Logger.info","String.substring","String.substring","String.substring","String.substring","String.substring","String.substring","String.length","String.substring","String.substring","Logger.info","SSBondImpl.setChainID1","SSBondImpl.setResnum1","SSBondImpl.setChainID2","SSBondImpl.setResnum2","SSBondImpl.setInsCode1","SSBondImpl.setInsCode2","ArrayList.add"],"method_name":"PDBFileParser.pdb_SSBOND_Handler","method_implementation":"{\n    if (params.isHeaderOnly())\n        return;\n    if (line.length() < 36) {\n        logger.info(\"SSBOND line has length under 36. Ignoring it.\");\n        return;\n    }\n    String chain1 = line.substring(15, 16);\n    String seqNum1 = line.substring(17, 21).trim();\n    String icode1 = line.substring(21, 22);\n    String chain2 = line.substring(29, 30);\n    String seqNum2 = line.substring(31, 35).trim();\n    String icode2 = line.substring(35, 36);\n    if (line.length() >= 72) {\n        String symop1 = line.substring(59, 65).trim();\n        String symop2 = line.substring(66, 72).trim();\n        // until we implement proper treatment of symmetry in biojava #220, we can't deal with sym-related parteners properly, skipping them\n        if (// in case the field is missing\n        !\"\".equals(symop1) && !\"\".equals(symop2) && (!\"1555\".equals(symop1) || !\"1555\".equals(symop2))) {\n            logger.info(\"Skipping ss bond between groups {} and {} belonging to different symmetry partners, because it is not supported yet\", seqNum1 + icode1, seqNum2 + icode2);\n            return;\n        }\n    }\n    if (\" \".equals(icode1))\n        icode1 = \"\";\n    if (\" \".equals(icode2))\n        icode2 = \"\";\n    SSBondImpl ssbond = new SSBondImpl();\n    ssbond.setChainID1(chain1);\n    ssbond.setResnum1(seqNum1);\n    ssbond.setChainID2(chain2);\n    ssbond.setResnum2(seqNum2);\n    ssbond.setInsCode1(icode1);\n    ssbond.setInsCode2(icode2);\n    ssbonds.add(ssbond);\n}","repo_id":"9","comment":"/**\n *  Process the disulfide bond info provided by an SSBOND record\n *\n *  <pre>\n * \tCOLUMNS        DATA TYPE       FIELD         DEFINITION\n * \t-------------------------------------------------------------------\n * \t 1 -  6        Record name     \"SSBOND\"\n * \t 8 - 10        Integer         serNum       Serial number.\n * \t12 - 14        LString(3)      \"CYS\"        Residue name.\n * \t16             Character       chainID1     Chain identifier.\n * \t18 - 21        Integer         seqNum1      Residue sequence number.\n * \t22             AChar           icode1       Insertion code.\n * \t26 - 28        LString(3)      \"CYS\"        Residue name.\n * \t30             Character       chainID2     Chain identifier.\n * \t32 - 35        Integer         seqNum2      Residue sequence number.\n * \t36             AChar           icode2       Insertion code.\n * \t60 - 65        SymOP           sym1         Symmetry oper for 1st resid\n * \t67 - 72        SymOP           sym2         Symmetry oper for 2nd resid\n *  <\/pre>\n */\n","repo_name":"biojava-master/","id":1185,"method_signature":"void pdb_SSBOND_Handler(String)"}