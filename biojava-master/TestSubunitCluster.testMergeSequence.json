{"callee_method_ids":[1623,1625,1662,1662,1663,1662,1662,1663,1662,1662,1663],"callee_method_names":["SubunitClustererParameters.setSequenceIdentityThreshold","SubunitClustererParameters.setSequenceCoverageThreshold","SubunitCluster.mergeSequence","SubunitCluster.size","SubunitCluster.size","SubunitCluster.length","SubunitCluster.mergeSequence","SubunitCluster.size","SubunitCluster.size","SubunitCluster.length","SubunitCluster.mergeSequence","SubunitCluster.size","SubunitCluster.size","SubunitCluster.length"],"method_name":"TestSubunitCluster.testMergeSequence","method_implementation":"{\n    // Create an Atom Array of poly-alanine\n    Atom[] reprAtoms = mockAtomArray(100, \"ALA\", -1, null);\n    // Create two identical SubunitCluster\n    SubunitCluster sc1 = new SubunitCluster(new Subunit(reprAtoms, \"subunit 1\", null, null));\n    SubunitCluster sc2 = new SubunitCluster(new Subunit(reprAtoms, \"subunit 2\", null, null));\n    SubunitClustererParameters clustererParameters = new SubunitClustererParameters();\n    clustererParameters.setSequenceIdentityThreshold(0.9);\n    clustererParameters.setSequenceCoverageThreshold(0.9);\n    boolean merged = sc1.mergeSequence(sc2, clustererParameters);\n    // Merged have to be true, and the merged SubunitCluster is sc1\n    assertTrue(merged);\n    assertEquals(2, sc1.size());\n    assertEquals(1, sc2.size());\n    assertEquals(100, sc1.length());\n    // Create an Atom Array of poly-glycine\n    Atom[] reprAtoms2 = mockAtomArray(100, \"GLY\", -1, null);\n    SubunitCluster sc3 = new SubunitCluster(new Subunit(reprAtoms2, \"subunit 3\", null, null));\n    merged = sc1.mergeSequence(sc3, clustererParameters);\n    // Merged have to be false, and Clusters result inmodified\n    assertFalse(merged);\n    assertEquals(2, sc1.size());\n    assertEquals(1, sc2.size());\n    assertEquals(100, sc1.length());\n    // Create an Atom Array of 9 glycine and 91 alanine\n    Atom[] reprAtoms3 = mockAtomArray(9, \"GLY\", 91, \"ALA\");\n    SubunitCluster sc4 = new SubunitCluster(new Subunit(reprAtoms3, \"subunit 4\", null, null));\n    merged = sc1.mergeSequence(sc4, clustererParameters);\n    // Merged have to be true, and the merged SubunitCluster is sc1\n    assertTrue(merged);\n    assertEquals(3, sc1.size());\n    assertEquals(1, sc2.size());\n    assertEquals(91, sc1.length());\n}","repo_id":"9","comment":"/**\n * Test {@link SubunitCluster#mergeSequence(SubunitCluster, SubunitClustererParameters)}\n *\n * @throws CompoundNotFoundException\n */\n","repo_name":"biojava-master/","id":2317,"method_signature":"void testMergeSequence()"}