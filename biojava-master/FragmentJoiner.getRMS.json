{"callee_method_ids":[820,817,818,824,825],"callee_method_names":["AlternativeAlignment.apairs_from_idxlst","AlternativeAlignment.getIdx1","AlternativeAlignment.getIdx2","AlternativeAlignment.calculateSuperpositionByIdx","AlternativeAlignment.getRotationMatrix","AlternativeAlignment.getShift"],"method_name":"FragmentJoiner.getRMS","method_implementation":"{\n    //      now svd ftmp and check if the rms is < X ...\n    AlternativeAlignment ali = new AlternativeAlignment();\n    ali.apairs_from_idxlst(frag);\n    double rms = 999;\n    int[] idx1 = ali.getIdx1();\n    int[] idx2 = ali.getIdx2();\n    Atom[] ca1subset = AlignUtils.getFragmentFromIdxList(ca1, idx1);\n    Atom[] ca2subset = AlignUtils.getFragmentFromIdxList(ca2, idx2);\n    ali.calculateSuperpositionByIdx(ca1, ca2);\n    Matrix rot = ali.getRotationMatrix();\n    Atom atom = ali.getShift();\n    for (Atom a : ca2subset) {\n        Calc.rotate(a, rot);\n        Calc.shift(a, atom);\n    }\n    rms = Calc.rmsd(ca1subset, ca2subset);\n    return rms;\n}","repo_id":"9","comment":"/**\n * Get the RMS of the JointFragments pair frag\n *\n * @param ca1 the array of all atoms of structure1\n * @param ca2 the array of all atoms of structure1\n * @param frag the JointFragments object that contains the list of identical positions\n * @return the rms\n */\n","repo_name":"biojava-master/","id":807,"method_signature":"double getRMS(Atom[], Atom[], JointFragments)"}