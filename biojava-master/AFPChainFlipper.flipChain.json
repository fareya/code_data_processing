{"callee_method_ids":[490,487,489,481,492,485,484,486,500,491,499,501,496,495,498,497,507,3580],"callee_method_names":["AFPChain.getAlgorithmName","AFPChain.setVersion","AFPChain.getVersion","AFPChain.setName2","AFPChain.getName1","AFPChain.setName1","AFPChain.getName2","AFPChain.setCa1Length","AFPChain.getCa2Length","AFPChain.setCa2Length","AFPChain.getCa1Length","AFPChain.getOptLen","AFPChain.setOptLen","AFPChain.getBlockNum","AFPChain.setBlockNum","AFPChain.setBlockSize","AFPChain.getBlockSize","AFPChain.setBlockScore","AFPChain.getBlockScore","AFPChain.setBlockRmsd","AFPChain.getBlockRmsd","AFPChain.setBlockGap","AFPChain.getBlockGap","AFPChain.getCa1Length","AFPChain.getCa2Length","AFPChain.getOptAln","AFPChain.getPdbAln","AFPChain.setOptAln","AFPChain.setPdbAln","AFPChain.setAlnLength","AFPChain.getAlnLength","AFPChain.setAlignScore","AFPChain.getAlignScore","AFPChain.setAlignScoreUpdate","AFPChain.getAlignScoreUpdate","AFPChain.setAfpSet","AFPChain.getAfpSet","AFPChain.setChainRmsd","AFPChain.getChainRmsd","AFPChain.setFocusRes1","AFPChain.getFocusRes2","AFPChain.setFocusRes2","AFPChain.getFocusRes1","AFPChain.setFocusResn","AFPChain.getFocusResn","AFPChain.setGapLen","AFPChain.getGapLen","AFPChain.setIdentity","AFPChain.getIdentity","AFPChain.setNormAlignScore","AFPChain.getNormAlignScore","AFPChain.setOptLength","AFPChain.getOptLength","AFPChain.setProbability","AFPChain.getProbability","AFPChain.setSimilarity","AFPChain.getSimilarity","AFPChain.setTotalLenIni","AFPChain.getTotalLenIni","AFPChain.setTotalRmsdIni","AFPChain.getTotalRmsdIni","AFPChain.setTotalRmsdOpt","AFPChain.getTotalRmsdOpt","AFPChain.setTMScore","AFPChain.getTMScore","AFPChain.getBlockRotationMatrix","AFPChain.getBlockShiftVector","Matrix.transpose","AFPChain.setBlockRotationMatrix","AFPChain.setBlockShiftVector"],"method_name":"AFPChainFlipper.flipChain","method_implementation":"{\n    AFPChain n = new AFPChain(o.getAlgorithmName());\n    n.setVersion(o.getVersion());\n    n.setName2(o.getName1());\n    n.setName1(o.getName2());\n    n.setCa1Length(o.getCa2Length());\n    n.setCa2Length(o.getCa1Length());\n    int[] optLen = o.getOptLen();\n    n.setOptLen(optLen);\n    int blockNum = o.getBlockNum();\n    n.setBlockNum(blockNum);\n    n.setBlockSize(o.getBlockSize());\n    n.setBlockScore(o.getBlockScore());\n    n.setBlockRmsd(o.getBlockRmsd());\n    n.setBlockGap(o.getBlockGap());\n    int minLength = Math.min(n.getCa1Length(), n.getCa2Length());\n    int[][][] optAlnN = new int[blockNum][2][minLength];\n    int[][][] optAlnO = o.getOptAln();\n    String[][][] pdbAlnN = new String[blockNum][2][minLength];\n    String[][][] pdbAlnO = o.getPdbAln();\n    if ((optAlnO == null) && (pdbAlnO == null)) {\n        System.err.println(\"Can't get either optAln or pdbAln data from original AFPChain. Not enough information to recreate alignment!\");\n    }\n    for (int blockNr = 0; blockNr < blockNum; blockNr++) {\n        for (int eqrNr = 0; eqrNr < optLen[blockNr]; eqrNr++) {\n            if (optAlnO != null) {\n                optAlnN[blockNr][0][eqrNr] = optAlnO[blockNr][1][eqrNr];\n                optAlnN[blockNr][1][eqrNr] = optAlnO[blockNr][0][eqrNr];\n            }\n            if (pdbAlnO != null) {\n                pdbAlnN[blockNr][0][eqrNr] = pdbAlnO[blockNr][1][eqrNr];\n                pdbAlnN[blockNr][1][eqrNr] = pdbAlnO[blockNr][0][eqrNr];\n            }\n        }\n    }\n    n.setOptAln(optAlnN);\n    if (pdbAlnO != null) {\n        n.setPdbAln(pdbAlnN);\n    }\n    n.setAlnLength(o.getAlnLength());\n    n.setAlignScore(o.getAlignScore());\n    n.setAlignScoreUpdate(o.getAlignScoreUpdate());\n    n.setAfpSet(o.getAfpSet());\n    n.setChainRmsd(o.getChainRmsd());\n    n.setFocusRes1(o.getFocusRes2());\n    n.setFocusRes2(o.getFocusRes1());\n    n.setFocusResn(o.getFocusResn());\n    n.setGapLen(o.getGapLen());\n    n.setIdentity(o.getIdentity());\n    n.setNormAlignScore(o.getNormAlignScore());\n    n.setOptLength(o.getOptLength());\n    n.setProbability(o.getProbability());\n    n.setSimilarity(o.getSimilarity());\n    n.setTotalLenIni(o.getTotalLenIni());\n    n.setTotalRmsdIni(o.getTotalRmsdIni());\n    n.setTotalRmsdOpt(o.getTotalRmsdOpt());\n    n.setTMScore(o.getTMScore());\n    // change direction of the Matrix and shift!\n    //\n    Matrix[] maxO = o.getBlockRotationMatrix();\n    Matrix[] maxN = new Matrix[maxO.length];\n    int i = -1;\n    Atom[] shiftO = o.getBlockShiftVector();\n    Atom[] shiftN = new Atom[shiftO.length];\n    for (Matrix m : maxO) {\n        i++;\n        if (m == null) {\n            // alignment too short probably\n            continue;\n        }\n        Matrix mnew = m;\n        Atom a = shiftO[i];\n        maxN[i] = mnew.transpose();\n        shiftN[i] = Calc.invert(a);\n        Calc.rotate(shiftN[i], maxN[i]);\n    }\n    n.setBlockRotationMatrix(maxN);\n    n.setBlockShiftVector(shiftN);\n    return n;\n}","repo_id":"9","comment":"/**\n * Flip the position of name1 and name2 (as well as all underlying data) in an AFPChain.\n * This is a utility function for AFPChainXMLParser.\n * You will have to call AFPCHainXMLParser.rebuildAFPChain in order to get twisted groups...\n *\n * @param o ... the original AFPCHain that should be flipped\n * @return a cloned AFPCHain which the positions of name1 and name2 flipped.\n */\n","repo_name":"biojava-master/","id":525,"method_signature":"AFPChain flipChain(AFPChain)"}