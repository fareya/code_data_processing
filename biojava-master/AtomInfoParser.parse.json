{"callee_method_ids":[3283],"callee_method_names":["Pattern.matcher","Matcher.find","Logger.info","Matcher.group","Matcher.group","Matcher.group","Matcher.group","Matcher.group","AtomInfo.setAtomName","AtomInfo.setResidueName","AtomInfo.setResidueNumber","String.replaceAll","String.substring","String.length","AtomInfo.setChainId","String.substring","String.length","AtomInfo.setModelNumber"],"method_name":"AtomInfoParser.parse","method_implementation":"{\n    Matcher matcher = pattern.matcher(jmolAtomInfo);\n    boolean found = matcher.find();\n    if (!found) {\n        logger.info(\"Could not parse the atomInfo string {}\", jmolAtomInfo);\n        return new AtomInfo();\n    }\n    String residueName = matcher.group(1);\n    String residueNumber = matcher.group(2);\n    String chainId = matcher.group(3);\n    String atomName = matcher.group(4);\n    String modelNumber = matcher.group(5);\n    //System.out.println(jmolAtomInfo +\" | \" +  residueName + \" number:\" + residueNumber + \" chain:\" + chainName +\n    //\t\t\" atomName:\" + atomName + \" modelNumber:\" + modelNumber );\n    AtomInfo info = new AtomInfo();\n    info.setAtomName(atomName);\n    info.setResidueName(residueName);\n    info.setResidueNumber(residueNumber.replaceAll(\"\\\\^\", \"\"));\n    String ci = \" \";\n    if (chainId != null)\n        ci = chainId.substring(1, chainId.length());\n    info.setChainId(ci);\n    int mn = 1;\n    if (modelNumber != null)\n        mn = Integer.parseInt(modelNumber.substring(1, modelNumber.length()));\n    info.setModelNumber(mn);\n    return info;\n}","repo_id":"9","comment":"/**\n * parses e.g.\n *  [MET]361:A.CA/1 #2843\n *  [GLY]339:A.CA #2573\n *  [ASN]44.CA #704\n *\n * @param jmolAtomInfo\n * @return an AtomInfo\n */\n","repo_name":"biojava-master/","id":3279,"method_signature":"AtomInfo parse(String)"}