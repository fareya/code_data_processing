{"callee_method_names":[],"method_name":"BitArrayWorker.getCompoundAt","method_implementation":"{\n    //Avoids asking for something which is not encoded by a bit-pair\n    if (position > getLength()) {\n        throw new IllegalArgumentException(position + \" is greater than length. Cannot access this position\");\n    }\n    //Just stops us from using 0 indexing\n    if (position < 1) {\n        throw new IllegalArgumentException(position + \" is less than 1; you must use biological indexing (indexing from 1)\");\n    }\n    int arrayIndex = biologicalIndexToArrayIndex(position);\n    int currentByte = sequence[arrayIndex];\n    int shiftBy = shiftBy(position);\n    int shifted = currentByte >>> shiftBy;\n    int masked = shifted & bitMask();\n    //If we could encode 4 compounds then our max masked value is 3\n    if (masked > (compoundsPerDatatype() - 1)) {\n        throw new IllegalStateException(\"Got a masked value of \" + masked + \"; do not understand values greater than \" + (compoundsPerDatatype() - 1));\n    }\n    return getIndexToCompoundsLookup().get(masked);\n}","repo_id":"9","comment":"/**\n * Returns the compound at the specified biological index\n */\n","repo_name":"biojava-master/","id":3008,"method_signature":"C getCompoundAt(int)"}