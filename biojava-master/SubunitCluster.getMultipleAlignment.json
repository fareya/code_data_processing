{"callee_method_names":["MultipleAlignment.setEnsemble","MultipleAlignment.getEnsemble","ArrayList.stream","Structure.getRepresentativeAtoms","Block.setAlignRes"],"method_name":"SubunitCluster.getMultipleAlignment","method_implementation":"{\n    // Create a multiple alignment with the atom arrays of the Subunits\n    MultipleAlignment msa = new MultipleAlignmentImpl();\n    msa.setEnsemble(new MultipleAlignmentEnsembleImpl());\n    msa.getEnsemble().setAtomArrays(subunits.stream().map(s -> s.getRepresentativeAtoms()).collect(Collectors.toList()));\n    // Fill in the alignment information\n    BlockSet bs = new BlockSetImpl(msa);\n    Block b = new BlockImpl(bs);\n    b.setAlignRes(subunitEQR);\n    // Fill in the transformation matrices\n    new ReferenceSuperimposer(representative).superimpose(msa);\n    // Calculate some scores\n    MultipleAlignmentScorer.calculateScores(msa);\n    return msa;\n}","repo_id":"9","comment":"/**\n * The multiple alignment is calculated from the equivalent residues in the\n * SubunitCluster. The alignment is recalculated every time the method is\n * called (no caching).\n *\n * @return MultipleAlignment representation of the aligned residues in this\n *         Subunit Cluster\n * @throws StructureException\n */\n","repo_name":"biojava-master/","id":1667,"method_signature":"MultipleAlignment getMultipleAlignment()"}