{"callee_method_names":[],"method_name":"Location.window","method_implementation":"{\n    final Location loc = this;\n    //return iterable anonymous inner class\n    return new Iterable<Location>() {\n\n        @Override\n        public LocIterator iterator() {\n            return new LocIterator(loc, windowSize, increment);\n        }\n    };\n}","repo_id":"9","comment":"/**\n *  Enable a \"sliding window\" iteration over a location\n *  to use with Java's \"for\" loop construct.\n *  The returned helper object implements the Iterable interface; the windowSize and increment semantics are implemented\n *  by an underlying LocIterator.\n *  <br><br>\n *  For example, given a location variable \"loc\":\n * <br>\n * <pre>\n * \t//use window size of 3 and increment of +3\n * \tfor( Location temp: loc.window( 3, 3 ))\n * \t{\n * \t//at each iteration, temp will be the location of the next 3 symbols\n * \t}\n * <\/pre>\n *\n *  @param windowSize The number of symbols to get on each iteration.\n *  @param increment The direction and number of symbols to advance at each iteration.\n *  @return An anonymous iterable object to use with Java's for( ... ) loop construct.\n */\n","repo_name":"biojava-master/","id":2402,"method_signature":"Iterable<Location> window(int, int)"}