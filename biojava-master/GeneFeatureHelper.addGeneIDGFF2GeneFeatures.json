{"callee_method_ids":[2436,2440,2436,2440,2438,2438,2438,2438,2431,2431,2431,2431,2448,3181,3067,2459,2454,2454,3169,2456,2455],"callee_method_names":["FeatureList.attributeValues","FeatureList.selectByAttribute","FeatureList.get","LinkedHashMap<String,ChromosomeSequence>.get","FeatureI.seqname","FeatureList.attributeValues","FeatureList.selectByAttribute","FeatureList.selectByType","FeatureList.selectByType","FeatureList.selectByType","FeatureList.selectByType","FeatureList.add","FeatureList.add","FeatureList.add","FeatureList.add","FeatureList.sortByStart","FeatureList.get","FeatureI.location","FeatureList.get","FeatureI.location","FeatureI.location","FeatureList.get","FeatureList.size","FeatureI.location","FeatureI.location","ChromosomeSequence.addGene","GeneSequence.setSource","GeneSequence.getBioBegin","GeneSequence.setBioBegin","GeneSequence.getBioBegin","GeneSequence.setBioEnd","GeneSequence.addTranscript","Feature.getAttribute","String.length","Feature.location","Feature.location","TranscriptSequence.addCDS","Feature.frame","CDSSequence.setSequenceScore","Feature.score"],"method_name":"GeneFeatureHelper.addGeneIDGFF2GeneFeatures","method_implementation":"{\n    Collection<String> geneIds = listGenes.attributeValues(\"gene_id\");\n    for (String geneid : geneIds) {\n        FeatureList gene = listGenes.selectByAttribute(\"gene_id\", geneid);\n        FeatureI geneFeature = gene.get(0);\n        ChromosomeSequence seq = chromosomeSequenceList.get(geneFeature.seqname());\n        geneid = geneid.replaceAll(\"_\", \".G\");\n        AccessionID geneAccessionID = new AccessionID(geneid);\n        GeneSequence geneSequence = null;\n        Collection<String> transcriptids = gene.attributeValues(\"gene_id\");\n        for (String transcriptid : transcriptids) {\n            // get all the individual features (exons, CDS regions, etc.) of this gene\n            FeatureList transcriptFeature = listGenes.selectByAttribute(\"gene_id\", transcriptid);\n            transcriptid = transcriptid.replaceAll(\"_\", \".G\");\n            //      String seqName = feature.seqname();\n            //FeatureI startCodon = null;\n            //FeatureI stopCodon = null;\n            Integer startCodonBegin = null;\n            Integer stopCodonEnd = null;\n            //String startCodonName = \"\";\n            //String stopCodonName = \"\";\n            // now select only the coding regions of this gene\n            FeatureList firstFeatures = transcriptFeature.selectByType(\"First\");\n            FeatureList terminalFeatures = transcriptFeature.selectByType(\"Terminal\");\n            FeatureList internalFeatures = transcriptFeature.selectByType(\"Internal\");\n            FeatureList singleFeatures = transcriptFeature.selectByType(\"Single\");\n            FeatureList cdsFeatures = new FeatureList();\n            cdsFeatures.add(firstFeatures);\n            cdsFeatures.add(terminalFeatures);\n            cdsFeatures.add(internalFeatures);\n            cdsFeatures.add(singleFeatures);\n            // sort them\n            cdsFeatures = cdsFeatures.sortByStart();\n            Strand strand = Strand.POSITIVE;\n            FeatureI feature = cdsFeatures.get(0);\n            if (feature.location().isNegative()) {\n                strand = Strand.NEGATIVE;\n            }\n            if (startCodonBegin == null) {\n                FeatureI firstFeature = cdsFeatures.get(0);\n                if (strand == Strand.NEGATIVE) {\n                    startCodonBegin = firstFeature.location().bioEnd();\n                } else {\n                    startCodonBegin = firstFeature.location().bioStart();\n                }\n            }\n            if (stopCodonEnd == null) {\n                FeatureI lastFeature = cdsFeatures.get(cdsFeatures.size() - 1);\n                if (strand == Strand.NEGATIVE) {\n                    stopCodonEnd = lastFeature.location().bioStart();\n                } else {\n                    stopCodonEnd = lastFeature.location().bioEnd();\n                }\n            }\n            //for gtf ordering can be strand based so first is last and last is first\n            if (startCodonBegin > stopCodonEnd) {\n                int temp = startCodonBegin;\n                startCodonBegin = stopCodonEnd;\n                stopCodonEnd = temp;\n            }\n            AccessionID transcriptAccessionID = new AccessionID(transcriptid);\n            if (geneSequence == null) {\n                geneSequence = seq.addGene(geneAccessionID, startCodonBegin, stopCodonEnd, strand);\n                geneSequence.setSource(((Feature) feature).source());\n            } else {\n                //if multiple transcripts for one gene make sure the gene is defined as the min and max start/end\n                if (startCodonBegin < geneSequence.getBioBegin()) {\n                    geneSequence.setBioBegin(startCodonBegin);\n                }\n                if (stopCodonEnd > geneSequence.getBioBegin()) {\n                    geneSequence.setBioEnd(stopCodonEnd);\n                }\n            }\n            TranscriptSequence transcriptSequence = geneSequence.addTranscript(transcriptAccessionID, startCodonBegin, stopCodonEnd);\n            /*\n\t\t\t\tif (startCodon != null) {\n\t\t\t\t\tif (startCodonName == null || startCodonName.length() == 0) {\n\t\t\t\t\t\tstartCodonName = transcriptid + \"-start_codon-\" + startCodon.location().bioStart() + \"-\" + startCodon.location().bioEnd();\n\t\t\t\t\t}\n\t\t\t\t\ttranscriptSequence.addStartCodonSequence(new AccessionID(startCodonName), startCodon.location().bioStart(), startCodon.location().bioEnd());\n\t\t\t\t}\n\t\t\t\tif (stopCodon != null) {\n\t\t\t\t\tif (stopCodonName == null || stopCodonName.length() == 0) {\n\t\t\t\t\t\tstopCodonName = transcriptid + \"-stop_codon-\" + stopCodon.location().bioStart() + \"-\" + stopCodon.location().bioEnd();\n\t\t\t\t\t}\n\t\t\t\t\ttranscriptSequence.addStopCodonSequence(new AccessionID(stopCodonName), stopCodon.location().bioStart(), stopCodon.location().bioEnd());\n\t\t\t\t}\n\t\t\t\t*/\n            for (FeatureI cdsFeature : cdsFeatures) {\n                Feature cds = (Feature) cdsFeature;\n                String cdsName = cds.getAttribute(\"transcript_name\");\n                if (cdsName == null || cdsName.length() == 0) {\n                    cdsName = transcriptid + \"-cds-\" + cds.location().bioStart() + \"-\" + cds.location().bioEnd();\n                }\n                AccessionID cdsAccessionID = new AccessionID(cdsName);\n                //ExonSequence exonSequence = geneSequence.addExon(cdsAccessionID, cdsFeature.location().bioStart(), cdsFeature.location().bioEnd());\n                CDSSequence cdsSequence = transcriptSequence.addCDS(cdsAccessionID, cdsFeature.location().bioStart(), cdsFeature.location().bioEnd(), cds.frame());\n                cdsSequence.setSequenceScore(cds.score());\n            }\n        }\n    }\n}","repo_id":"9","comment":"/**\n * Load GFF2 feature file generated from the geneid prediction algorithm and map features onto the chromosome sequences\n *\n * @param chromosomeSequenceList\n * @param listGenes\n * @throws Exception\n */\n","repo_name":"biojava-master/","id":2497,"method_signature":"void addGeneIDGFF2GeneFeatures(LinkedHashMap, FeatureList)"}