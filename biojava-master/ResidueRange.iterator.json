{"callee_method_names":["AtomPositionMap.getNavMap","Iterator<Entry<ResidueNumber, Integer>>.hasNext","Iterator<Entry<ResidueNumber, Integer>>.hasNext","Iterator<Entry<ResidueNumber, Integer>>.next","Entry<ResidueNumber, Integer>.getKey","Entry<ResidueNumber, Integer>.getKey"],"method_name":"ResidueRange.iterator","method_implementation":"{\n    //Use Entries to guarentee not null\n    final Iterator<Entry<ResidueNumber, Integer>> entryIt = map.getNavMap().entrySet().iterator();\n    if (!entryIt.hasNext()) {\n        // empty iterator\n        return Arrays.asList(new ResidueNumber[0]).iterator();\n    }\n    // Peek at upcoming entry\n    return new Iterator<ResidueNumber>() {\n\n        Entry<ResidueNumber, Integer> next = loadNext();\n\n        private Entry<ResidueNumber, Integer> loadNext() {\n            while (entryIt.hasNext()) {\n                next = entryIt.next();\n                ResidueNumber nextPos = next.getKey();\n                if (contains(nextPos, map)) {\n                    // loaded a valid next value\n                    return next;\n                }\n            }\n            next = null;\n            return next;\n        }\n\n        @Override\n        public boolean hasNext() {\n            return next != null;\n        }\n\n        @Override\n        public ResidueNumber next() {\n            if (!hasNext()) {\n                throw new NoSuchElementException();\n            }\n            ResidueNumber pos = next.getKey();\n            loadNext();\n            return pos;\n        }\n\n        @Override\n        public void remove() {\n            throw new UnsupportedOperationException(\"Not modifiable\");\n        }\n    };\n}","repo_id":"9","comment":"/**\n * Returns a new Iterator over every {@link ResidueNumber} in this ResidueRange.\n * Stores the contents of {@code map} until the iterator is finished, so calling code should set the iterator to {@code null} if it did not finish.\n */\n","repo_name":"biojava-master/","id":1681,"method_signature":"Iterator<ResidueNumber> iterator(AtomPositionMap)"}