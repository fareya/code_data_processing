{"callee_method_names":["List<Atom[]>.add","List<Integer>.add","List<List<Integer>>.add","MultipleAlignment.getEnsemble","Block.setAlignRes","Matrix4d.setIdentity","BlockSet.setTransformations"],"method_name":"TestMultipleAlignmentScorer.simpleMSTA","method_implementation":"{\n    //Generate three identical Atom arrays\n    List<Atom[]> atomArrays = new ArrayList<Atom[]>(52);\n    for (int i = 0; i < 3; i++) atomArrays.add(makeDummyCA(52));\n    //Generate the incorrect alignment (0-1-2,1-2-3,etc)\n    List<List<Integer>> alnRes = new ArrayList<List<Integer>>(3);\n    for (int str = 0; str < 3; str++) {\n        List<Integer> chain = new ArrayList<Integer>(50);\n        for (int res = 0; res < 50; res++) chain.add(res + str);\n        alnRes.add(chain);\n    }\n    //MultipleAlignment generation\n    MultipleAlignment msa = new MultipleAlignmentImpl();\n    msa.getEnsemble().setAtomArrays(atomArrays);\n    BlockSet bs = new BlockSetImpl(msa);\n    Block b = new BlockImpl(bs);\n    b.setAlignRes(alnRes);\n    //We want the identity transfromations to maintain the missalignment\n    Matrix4d ident = new Matrix4d();\n    ident.setIdentity();\n    bs.setTransformations(Arrays.asList(ident, ident, ident));\n    return msa;\n}","repo_id":"9","comment":"/**\n * Generates a simple MultipleAlignment: 3 structures with the same\n * Atoms but incorreclty aligned (offset of 1 position) without gaps.\n *\n * @return MultipleAlignment simple MSTA\n * @throws StructureException\n */\n","repo_name":"biojava-master/","id":2189,"method_signature":"MultipleAlignment simpleMSTA()"}