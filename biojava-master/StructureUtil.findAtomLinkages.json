{"callee_method_names":["Atom[].getName","Atom[].getName","Atom[].getName","Atom[].getName","List<Atom[]>.add"],"method_name":"StructureUtil.findAtomLinkages","method_implementation":"{\n    if (group1 == null || group2 == null) {\n        throw new IllegalArgumentException(\"Null group(s).\");\n    }\n    if (bondLengthTolerance < 0) {\n        throw new IllegalArgumentException(\"bondLengthTolerance cannot be negative.\");\n    }\n    List<Atom[]> ret = new ArrayList<Atom[]>();\n    if (potentialNamesOfAtomOnGroup1 == null) {\n        // if empty name, search for all atoms\n        potentialNamesOfAtomOnGroup1 = getAtomNames(group1);\n    }\n    if (potentialNamesOfAtomOnGroup2 == null) {\n        // if empty name, search for all atoms\n        potentialNamesOfAtomOnGroup2 = getAtomNames(group2);\n    }\n    for (String namesOfAtomOnGroup1 : potentialNamesOfAtomOnGroup1) {\n        for (String namesOfAtomOnGroup2 : potentialNamesOfAtomOnGroup2) {\n            Atom[] atoms = findLinkage(group1, group2, namesOfAtomOnGroup1, namesOfAtomOnGroup2, bondLengthTolerance);\n            if (atoms != null) {\n                if (ignoreNCLinkage && ((\"N\".equals(atoms[0].getName()) && \"C\".equals(atoms[1].getName())) || (\"C\".equals(atoms[0].getName()) && \"N\".equals(atoms[1].getName())))) {\n                    continue;\n                }\n                ret.add(atoms);\n            }\n        }\n    }\n    return ret;\n}","repo_id":"9","comment":"/**\n * Find linkages between two groups within tolerance of bond length,\n * from potential atoms.\n * @param group1 the first {@link Group}.\n * @param group2 the second {@link Group}.\n * @param potentialNamesOfAtomOnGroup1 potential names of the atom on the first group.\n * \t\t  If null, search all atoms on the first group.\n * @param potentialNamesOfAtomOnGroup2 potential names of the atom on the second group.\n * \t\t  If null, search all atoms on the second group.\n * @param ignoreNCLinkage true to ignore all N-C linkages\n * @param bondLengthTolerance bond length error tolerance.\n * @return a list, each element of which is an array of two Atoms that form bond\n * between each other.\n */\n","repo_name":"biojava-master/","id":281,"method_signature":"List<Atom[]> findAtomLinkages(Group, Group, List, List, boolean, double)"}