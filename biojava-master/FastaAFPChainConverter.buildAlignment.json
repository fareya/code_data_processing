{"callee_method_ids":[502,477,497],"callee_method_names":["List<ResidueNumber>.add","List<ResidueNumber>.add","List<ResidueNumber>.toArray","List<ResidueNumber>.size","List<ResidueNumber>.toArray","List<ResidueNumber>.size","AFPChain.setAlgorithmName","AFPChain.setBlockSize","AFPChain.getNrEQR","AFPChain.setBlockRmsd","AFPChain.getTotalRmsdOpt","AFPChain.setBlockGap","AFPChain.getGapLen"],"method_name":"FastaAFPChainConverter.buildAlignment","method_implementation":"{\n    // remove any gap\n    // this includes the ones introduced by the nullifying above\n    List<ResidueNumber> alignedResiduesList1 = new ArrayList<ResidueNumber>();\n    List<ResidueNumber> alignedResiduesList2 = new ArrayList<ResidueNumber>();\n    for (int i = 0; i < residues1.length; i++) {\n        if (residues1[i] != null && residues2[i] != null) {\n            alignedResiduesList1.add(residues1[i]);\n            alignedResiduesList2.add(residues2[i]);\n        }\n    }\n    ResidueNumber[] alignedResidues1 = alignedResiduesList1.toArray(new ResidueNumber[alignedResiduesList1.size()]);\n    ResidueNumber[] alignedResidues2 = alignedResiduesList2.toArray(new ResidueNumber[alignedResiduesList2.size()]);\n    AFPChain afpChain = AlignmentTools.createAFPChain(ca1, ca2, alignedResidues1, alignedResidues2);\n    afpChain.setAlgorithmName(\"unknown\");\n    AlignmentTools.updateSuperposition(afpChain, ca1, ca2);\n    afpChain.setBlockSize(new int[] { afpChain.getNrEQR() });\n    afpChain.setBlockRmsd(new double[] { afpChain.getTotalRmsdOpt() });\n    afpChain.setBlockGap(new int[] { afpChain.getGapLen() });\n    return afpChain;\n}","repo_id":"9","comment":"/**\n * Builds an {@link AFPChain} from already-matched arrays of atoms and residues.\n *\n * @param ca1\n *            An array of atoms in the first structure\n * @param ca2\n *            An array of atoms in the second structure\n * @param residues1\n *            An array of {@link ResidueNumber ResidueNumbers} in the first structure that are aligned. Only null ResidueNumbers are considered to be unaligned\n * @param residues2\n *            An array of {@link ResidueNumber ResidueNumbers} in the second structure that are aligned. Only null ResidueNumbers are considered to be unaligned\n * @throws StructureException\n */\n","repo_name":"biojava-master/","id":1312,"method_signature":"AFPChain buildAlignment(Atom[], Atom[], ResidueNumber[], ResidueNumber[])"}