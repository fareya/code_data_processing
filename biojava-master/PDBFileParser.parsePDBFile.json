{"callee_method_ids":[1324,1326,1319,1315,1329,1331,1315,1317],"callee_method_names":["FileParsingParameters.getMaxAtoms","FileParsingParameters.getAtomCaThreshold","ArrayList.clear","ArrayList.clear","ArrayList.clear","ArrayList.clear","List<Map<String, String>>.clear","List<Map<String, String>>.clear","List<Map<String, String>>.clear","LinkedHashMap.clear","FileParsingParameters.isParseCAOnly","BufferedReader.readLine","String.equals","String.startsWith","String.length","String.startsWith","Logger.info","String.length","String.trim","String.substring","ArrayList.add","ArrayList.add","ArrayList.add","String.startsWith","FileParsingParameters.isParseSecStruc","Logger.info","FileParsingParameters.shouldCreateAtomBonds","FileParsingParameters.shouldCreateAtomCharges","FileParsingParameters.isParseSecStruc","FileParsingParameters.isHeaderOnly"],"method_name":"PDBFileParser.parsePDBFile","method_implementation":"{\n    // set the correct max values for parsing...\n    loadMaxAtoms = params.getMaxAtoms();\n    atomCAThreshold = params.getAtomCaThreshold();\n    // (re)set structure\n    allModels = new ArrayList<>();\n    structure = new StructureImpl();\n    currentModel = null;\n    currentChain = null;\n    currentGroup = null;\n    // we initialise to true since at the beginning of the file we are always starting a new molecule\n    startOfMolecule = true;\n    startOfModel = true;\n    seqResChains = new ArrayList<Chain>();\n    siteMap = new LinkedHashMap<String, Site>();\n    pdbHeader = new PDBHeader();\n    connects = new ArrayList<Map<String, Integer>>();\n    previousContinuationField = \"\";\n    continuationField = \"\";\n    continuationString = \"\";\n    current_compound = null;\n    sourceLines.clear();\n    compndLines.clear();\n    keywordsLines.clear();\n    isLastCompndLine = false;\n    isLastSourceLine = false;\n    prevMolId = -1;\n    entities.clear();\n    helixList.clear();\n    strandList.clear();\n    turnList.clear();\n    lengthCheck = -1;\n    atomCount = 0;\n    atomOverflow = false;\n    linkRecords = new ArrayList<LinkRecord>();\n    siteToResidueMap.clear();\n    blankChainIdsPresent = false;\n    parseCAonly = params.isParseCAOnly();\n    String line = null;\n    while ((line = buf.readLine()) != null) {\n        // ignore empty lines\n        if (\"\".equals(line) || (line.equals(NEWLINE))) {\n            continue;\n        }\n        // ignore short TER and END lines\n        if (line.startsWith(\"END\")) {\n            continue;\n        }\n        if (line.length() < 6 && !line.startsWith(\"TER\")) {\n            logger.info(\"Found line length below 6. Ignoring it, line: >\" + line + \"<\");\n            continue;\n        }\n        String recordName = null;\n        if (line.length() < 6)\n            recordName = line.trim();\n        else\n            recordName = line.substring(0, 6).trim();\n        try {\n            if (\"ATOM\".equals(recordName))\n                pdb_ATOM_Handler(line);\n            else if (\"SEQRES\".equals(recordName))\n                pdb_SEQRES_Handler(line);\n            else if (\"HETATM\".equals(recordName))\n                pdb_ATOM_Handler(line);\n            else if (\"MODEL\".equals(recordName))\n                pdb_MODEL_Handler(line);\n            else if (\"TER\".equals(recordName))\n                pdb_TER_Handler();\n            else if (\"HEADER\".equals(recordName))\n                pdb_HEADER_Handler(line);\n            else if (\"AUTHOR\".equals(recordName))\n                pdb_AUTHOR_Handler(line);\n            else if (\"TITLE\".equals(recordName))\n                pdb_TITLE_Handler(line);\n            else if (\"SOURCE\".equals(recordName))\n                //pdb_SOURCE_Handler\n                sourceLines.add(line);\n            else if (\"COMPND\".equals(recordName))\n                //pdb_COMPND_Handler\n                compndLines.add(line);\n            else if (\"KEYWDS\".equals(recordName))\n                keywordsLines.add(line);\n            else if (\"JRNL\".equals(recordName))\n                pdb_JRNL_Handler(line);\n            else if (\"EXPDTA\".equals(recordName))\n                pdb_EXPDTA_Handler(line);\n            else if (\"CRYST1\".equals(recordName))\n                pdb_CRYST1_Handler(line);\n            else if (recordName.startsWith(\"MTRIX\"))\n                pdb_MTRIXn_Handler(line);\n            else if (\"REMARK\".equals(recordName))\n                pdb_REMARK_Handler(line);\n            else if (\"CONECT\".equals(recordName))\n                pdb_CONECT_Handler(line);\n            else if (\"REVDAT\".equals(recordName))\n                pdb_REVDAT_Handler(line);\n            else if (\"DBREF\".equals(recordName))\n                pdb_DBREF_Handler(line);\n            else if (\"SITE\".equals(recordName))\n                pdb_SITE_Handler(line);\n            else if (\"SSBOND\".equals(recordName))\n                pdb_SSBOND_Handler(line);\n            else if (\"LINK\".equals(recordName))\n                pdb_LINK_Handler(line);\n            else if (params.isParseSecStruc()) {\n                if (\"HELIX\".equals(recordName))\n                    pdb_HELIX_Handler(line);\n                else if (\"SHEET\".equals(recordName))\n                    pdb_SHEET_Handler(line);\n                else if (\"TURN\".equals(recordName))\n                    pdb_TURN_Handler(line);\n            }\n        } catch (StringIndexOutOfBoundsException | NullPointerException ex) {\n            logger.info(\"Unable to parse [\" + line + \"]\");\n        }\n    }\n    makeCompounds(compndLines, sourceLines);\n    handlePDBKeywords(keywordsLines);\n    triggerEndFileChecks();\n    if (params.shouldCreateAtomBonds()) {\n        formBonds();\n    }\n    if (params.shouldCreateAtomCharges()) {\n        addCharges();\n    }\n    if (params.isParseSecStruc() && !params.isHeaderOnly())\n        setSecStruc();\n    // Now correct the alternate location group\n    StructureTools.cleanUpAltLocs(structure);\n    return structure;\n}","repo_id":"9","comment":"/**\n * Parse a PDB file and return a datastructure implementing\n * PDBStructure interface.\n *\n * @param buf  a BufferedReader object\n * @return the Structure object\n * @throws IOException ...\n */\n","repo_name":"biojava-master/","id":1190,"method_signature":"Structure parsePDBFile(BufferedReader)"}