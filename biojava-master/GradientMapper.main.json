{"callee_method_names":["GradientMapper[].put","GradientMapper[].put","GradientMapper[].put","GradientMapper[].put","GradientMapper[].put","GradientMapper[].put","LinearColorInterpolator.setInterpolationDirection","GradientMapper[].put","GradientMapper[].put","GradientMapper[].setInterpolator","LinearColorInterpolator.setInterpolationDirection","GradientMapper[].put","GradientMapper[].put","GradientMapper[].setInterpolator","LinearColorInterpolator.setInterpolationDirection","GradientMapper[].put","GradientMapper[].put","GradientMapper[].setInterpolator","LinearColorInterpolator.setInterpolationDirection","GradientMapper[].put","GradientMapper[].put","GradientMapper[].setInterpolator","LinearColorInterpolator.setInterpolationDirection","GradientMapper[].put","GradientMapper[].put","GradientMapper[].put","GradientMapper[].put","GradientMapper[].setInterpolator","LinearColorInterpolator.setInterpolationDirection","GradientMapper[].put","GradientMapper[].put","GradientMapper[].put","GradientMapper[].put","GradientMapper[].setInterpolator","JPanel.setPreferredSize","JPanel.add","JPanel.add","JFrame.getContentPane","JFrame.pack","JFrame.setDefaultCloseOperation","JFrame.setVisible"],"method_name":"GradientMapper.main","method_implementation":"{\n    GradientMapper[] mappers = new GradientMapper[20];\n    int i = 0;\n    ColorSpace hsv = HSVColorSpace.getHSVColorSpace();\n    LinearColorInterpolator interp;\n    // RGB colorspace\n    mappers[i] = new GradientMapper(Color.black, Color.white);\n    mappers[i].put(-5., Color.red);\n    mappers[i].put(5., Color.blue);\n    i++;\n    // Premade\n    mappers[i] = GradientMapper.getGradientMapper(BLACK_WHITE_GRADIENT, -5, 5);\n    i++;\n    mappers[i] = GradientMapper.getGradientMapper(RAINBOW_INTENSITY_GRADIENT, -5, 5);\n    //mappers[i].put(Double.NEGATIVE_INFINITY, mappers[i].get(Double.NEGATIVE_INFINITY).brighter());\n    //mappers[i].put(Double.POSITIVE_INFINITY, mappers[i].get(Double.POSITIVE_INFINITY).darker());\n    i++;\n    // Rainbow\n    mappers[i] = new GradientMapper(Color.black, Color.white, hsv);\n    mappers[i].put(-5., new Color(hsv, new float[] { 0f, 1f, 1f }, 1f));\n    mappers[i].put(5., new Color(hsv, new float[] { 1f, 1f, 1f }, 1f));\n    i++;\n    // HSV INNER\n    mappers[i] = new GradientMapper(Color.black, Color.white, hsv);\n    mappers[i].put(5., Color.red);\n    mappers[i].put(-5., Color.blue);\n    i++;\n    // HSV OUTER\n    interp = new LinearColorInterpolator(hsv);\n    interp.setInterpolationDirection(0, InterpolationDirection.OUTER);\n    mappers[i] = new GradientMapper(Color.black, Color.white, hsv);\n    mappers[i].put(5., Color.red);\n    mappers[i].put(-5., Color.blue);\n    mappers[i].setInterpolator(interp);\n    i++;\n    // HSV UPPER\n    interp = new LinearColorInterpolator(hsv);\n    interp.setInterpolationDirection(0, InterpolationDirection.UPPER);\n    mappers[i] = new GradientMapper(Color.black, Color.white, hsv);\n    mappers[i].put(5., Color.red);\n    mappers[i].put(-5., Color.blue);\n    mappers[i].setInterpolator(interp);\n    i++;\n    // HSV LOWER\n    interp = new LinearColorInterpolator(hsv);\n    interp.setInterpolationDirection(0, InterpolationDirection.LOWER);\n    mappers[i] = new GradientMapper(Color.black, Color.white, hsv);\n    mappers[i].put(5., Color.red);\n    mappers[i].put(-5., Color.blue);\n    mappers[i].setInterpolator(interp);\n    i++;\n    // Mimic DefaultMapper\n    interp = new LinearColorInterpolator(hsv);\n    interp.setInterpolationDirection(0, InterpolationDirection.INNER);\n    mappers[i] = new GradientMapper(Color.green, Color.black, hsv);\n    mappers[i].put(0., new Color(hsv, new float[] { 1f, .9f, 1f }, 1f));\n    mappers[i].put(10., new Color(hsv, new float[] { 0f, .9f, 0f }, 1f));\n    mappers[i].setInterpolator(interp);\n    i++;\n    // Better DefaultGradient\n    interp = new LinearColorInterpolator(hsv);\n    interp.setInterpolationDirection(0, InterpolationDirection.INNER);\n    mappers[i] = new GradientMapper(Color.green, Color.black, hsv);\n    mappers[i].put(0., new Color(hsv, new float[] { 1f, .9f, 1f }, 1f));\n    mappers[i].put(1., new Color(hsv, new float[] { 0f, .9f, 1f }, 1f));\n    mappers[i].put(1 + 1e-6, Color.white);\n    mappers[i].put(10., Color.black);\n    mappers[i].setInterpolator(interp);\n    i++;\n    // Better DefaultGradient\n    interp = new LinearColorInterpolator(hsv);\n    interp.setInterpolationDirection(0, InterpolationDirection.INNER);\n    mappers[i] = new GradientMapper(Color.green, Color.black, hsv);\n    mappers[i].put(0., new Color(hsv, new float[] { 1f, .9f, 1f }, 1f));\n    mappers[i].put(1., new Color(hsv, new float[] { .2f, .9f, 1f }, 1f));\n    mappers[i].put(1 + 1e-6, Color.white);\n    mappers[i].put(10., Color.black);\n    mappers[i].setInterpolator(interp);\n    i++;\n    DefaultMatrixMapper defaultMapper = new DefaultMatrixMapper(10f, .9f);\n    JFrame frame = new JFrame(\"GradientMapper\");\n    JPanel main = new JPanel();\n    main.setPreferredSize(new Dimension(300, 500));\n    for (int j = 0; j < i; j++) {\n        GradientPanel grad1 = new GradientPanel(mappers[j], -10, 10);\n        //grad1.setPreferredSize(new Dimension(500,50));\n        main.add(grad1);\n    }\n    GradientPanel grad2 = new GradientPanel(defaultMapper, -10, 10);\n    //grad2.setPreferredSize(new Dimension(500,50));\n    main.add(grad2);\n    //main.add(new GradientPanel(defaultMapper,-10,10));\n    frame.getContentPane().add(main);\n    frame.pack();\n    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    frame.setVisible(true);\n}","repo_id":"9","comment":"/**\n * @param args\n */\n","repo_name":"biojava-master/","id":3363,"method_signature":"void main(String[])"}