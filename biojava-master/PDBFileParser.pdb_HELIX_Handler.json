{"callee_method_ids":[1317],"callee_method_names":["FileParsingParameters.isHeaderOnly","String.length","Logger.info","String.substring","String.substring","String.substring","String.substring","String.substring","String.substring","String.substring","String.substring","Map<String, String>.put","Map<String, String>.put","Map<String, String>.put","Map<String, String>.put","Map<String, String>.put","Map<String, String>.put","Map<String, String>.put","Map<String, String>.put","List<Map<String, String>>.add"],"method_name":"PDBFileParser.pdb_HELIX_Handler","method_implementation":"{\n    if (params.isHeaderOnly())\n        return;\n    if (line.length() < 38) {\n        logger.info(\"HELIX line has length under 38. Ignoring it.\");\n        return;\n    }\n    String initResName = line.substring(15, 18).trim();\n    String initChainId = line.substring(19, 20);\n    String initSeqNum = line.substring(21, 25).trim();\n    String initICode = line.substring(25, 26);\n    String endResName = line.substring(27, 30).trim();\n    String endChainId = line.substring(31, 32);\n    String endSeqNum = line.substring(33, 37).trim();\n    String endICode = line.substring(37, 38);\n    //System.out.println(initResName + \" \" + initChainId + \" \" + initSeqNum + \" \" + initICode + \" \" +\n    //        endResName + \" \" + endChainId + \" \" + endSeqNum + \" \" + endICode);\n    Map<String, String> m = new HashMap<String, String>();\n    m.put(\"initResName\", initResName);\n    m.put(\"initChainId\", initChainId);\n    m.put(\"initSeqNum\", initSeqNum);\n    m.put(\"initICode\", initICode);\n    m.put(\"endResName\", endResName);\n    m.put(\"endChainId\", endChainId);\n    m.put(\"endSeqNum\", endSeqNum);\n    m.put(\"endICode\", endICode);\n    helixList.add(m);\n}","repo_id":"9","comment":"/**\n * Parses the following record:\n *\n * <pre>\n * COLUMNS       DATA TYPE        FIELD        DEFINITION\n * --------------------------------------------------------------------\n *  1 -  6       Record name      \"HELIX \"\n *  8 - 10       Integer          serNum       Serial number of the helix.\n *                                             This starts at 1 and increases\n *                                             incrementally.\n * 12 - 14       LString(3)       helixID      Helix identifier. In addition\n *                                             to a serial number, each helix is\n *                                             given an alphanumeric character\n *                                             helix identifier.\n * 16 - 18       Residue name     initResName  Name of the initial residue.\n * 20            Character        initChainID  Chain identifier for the chain\n *                                             containing this helix.\n * 22 - 25       Integer          initSeqNum   Sequence number of the initial\n *                                             residue.\n * 26            AChar            initICode    Insertion code of the initial\n *                                             residue.\n * 28 - 30       Residue name     endResName   Name of the terminal residue of\n *                                             the helix.\n * 32            Character        endChainID   Chain identifier for the chain\n *                                             containing this helix.\n * 34 - 37       Integer          endSeqNum    Sequence number of the terminal\n *                                             residue.\n * 38            AChar            endICode     Insertion code of the terminal\n *                                             residue.\n * 39 - 40       Integer          helixClass   Helix class (see below).\n * 41 - 70       String           comment      Comment about this helix.\n * 72 - 76       Integer          length       Length of this helix.\n * <\/pre>\n */\n","repo_name":"biojava-master/","id":1164,"method_signature":"void pdb_HELIX_Handler(String)"}