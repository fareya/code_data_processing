{"callee_method_names":["ResidueNumber.getChainName","ResidueNumber.getChainName","ResidueNumber.getChainName"],"method_name":"AtomPositionMap.getLengthDirectional","method_implementation":"{\n    if (!start.getChainName().equals(end.getChainName())) {\n        throw new IllegalArgumentException(String.format(\"Chains differ between %s and %s. Unable to calculate length.\", start, end));\n    }\n    Integer startPos = getPosition(start);\n    Integer endPos = getPosition(end);\n    if (startPos == null) {\n        throw new IllegalArgumentException(\"Residue \" + start + \" was not found.\");\n    }\n    if (endPos == null) {\n        throw new IllegalArgumentException(\"Residue \" + start + \" was not found.\");\n    }\n    return getLengthDirectional(startPos, endPos, start.getChainName());\n}","repo_id":"9","comment":"/**\n * Calculates the number of atoms between two ResidueNumbers, inclusive. Both residues\n * must belong to the same chain.\n * Will return a negative value if the start is past the end.\n * @param start First residue\n * @param end Last residue\n * @return The number of atoms from A to B inclusive\n * @throws IllegalArgumentException if start and end are on different chains,\n *  or if either of the residues doesn't exist\n */\n","repo_name":"biojava-master/","id":1003,"method_signature":"int getLengthDirectional(ResidueNumber, ResidueNumber)"}