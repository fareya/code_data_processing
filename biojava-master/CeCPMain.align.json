{"callee_method_names":["CECPParameters.getDuplicationHint"],"method_name":"CeCPMain.align","method_implementation":"{\n    if (!(param instanceof CECPParameters))\n        throw new IllegalArgumentException(\"CE algorithm needs an object of call CeParameters as argument.\");\n    CECPParameters cpparams = (CECPParameters) param;\n    this.params = cpparams;\n    boolean duplicateRight;\n    switch(cpparams.getDuplicationHint()) {\n        case LEFT:\n            duplicateRight = false;\n            break;\n        case RIGHT:\n            duplicateRight = true;\n            break;\n        case SHORTER:\n            duplicateRight = ca1.length >= ca2.length;\n            break;\n        default:\n            duplicateRight = true;\n    }\n    if (duplicateRight) {\n        return alignRight(ca1, ca2, cpparams);\n    } else {\n        if (debug) {\n            System.out.println(\"Swapping alignment order.\");\n        }\n        AFPChain afpChain = this.alignRight(ca2, ca1, cpparams);\n        return invertAlignment(afpChain);\n    }\n}","repo_id":"9","comment":"/**\n * Aligns ca1 and ca2 using a heuristic to check for CPs.\n * <p>\n * Aligns ca1 against a doubled ca2, then cleans up the alignment.\n * @param ca1\n * @param ca2\n * @param param\n * @return the alignment, possibly containing a CP.\n * @throws StructureException\n */\n","repo_name":"biojava-master/","id":773,"method_signature":"AFPChain align(Atom[], Atom[], Object)"}