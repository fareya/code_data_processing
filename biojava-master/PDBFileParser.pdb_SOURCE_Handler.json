{"callee_method_names":["String.substring","Logger.debug","Logger.debug","Logger.debug","Logger.debug","Logger.debug","String.length","String.substring","String.substring","String.length","Logger.debug","String.split","ArrayList.contains","ArrayList.contains","Logger.debug","String.replace","StringTokenizer.hasMoreTokens","StringTokenizer.nextToken","String.equals","ArrayList.contains","Logger.debug","String.concat","Logger.debug","String.equals","ArrayList.contains"],"method_name":"PDBFileParser.pdb_SOURCE_Handler","method_implementation":"{\n    // works in the same way as the pdb_COMPND_Handler.\n    String continuationNr = line.substring(9, 10).trim();\n    logger.debug(\"current continuationNo     is {}\", continuationNr);\n    logger.debug(\"previousContinuationField  is {}\", previousContinuationField);\n    logger.debug(\"current continuationField  is {}\", continuationField);\n    logger.debug(\"current continuationString is {}\", continuationString);\n    logger.debug(\"current compound           is {}\", current_compound);\n    // following the docs, the last valid character should be 79, chop off the rest\n    if (line.length() > 79) {\n        line = line.substring(0, 79);\n    }\n    line = line.substring(10, line.length());\n    logger.debug(\"LINE: >{}<\", line);\n    String[] fieldList = line.split(\"\\\\s+\");\n    if (!\"\".equals(fieldList[0]) && sourceFieldValues.contains(fieldList[0])) {\n        //\t\t\tSystem.out.println(\"[PDBFileParser.pdb_COMPND_Handler] Setting continuationField to '\" + fieldList[0] + \"'\");\n        continuationField = fieldList[0];\n        if (\"\".equals(previousContinuationField)) {\n            previousContinuationField = continuationField;\n        }\n    } else if ((fieldList.length > 1) && (sourceFieldValues.contains(fieldList[1]))) {\n        //\t\t\tSystem.out.println(\"[PDBFileParser.pdb_COMPND_Handler] Setting continuationField to '\" + fieldList[1] + \"'\");\n        continuationField = fieldList[1];\n        if (\"\".equals(previousContinuationField)) {\n            previousContinuationField = continuationField;\n        }\n    } else {\n        if (\"\".equals(continuationNr)) {\n            logger.debug(\"looks like an old PDB file\");\n            continuationField = \"MOLECULE:\";\n            if (\"\".equals(previousContinuationField)) {\n                previousContinuationField = continuationField;\n            }\n        }\n    }\n    line = line.replace(continuationField, \"\").trim();\n    StringTokenizer compndTokens = new StringTokenizer(line);\n    //\t\tSystem.out.println(\"PDBFileParser.pdb_COMPND_Handler: Tokenizing '\" + line + \"'\");\n    while (compndTokens.hasMoreTokens()) {\n        String token = compndTokens.nextToken();\n        if (\"\".equals(previousContinuationField)) {\n            //\t\t\t\tSystem.out.println(\"previousContinuationField is empty. Setting to : \" + continuationField);\n            previousContinuationField = continuationField;\n        }\n        if (previousContinuationField.equals(continuationField) && sourceFieldValues.contains(continuationField)) {\n            logger.debug(\"Still in field {}\", continuationField);\n            continuationString = continuationString.concat(token + \" \");\n            logger.debug(\"continuationString = {}\", continuationString);\n        }\n        if (!continuationField.equals(previousContinuationField)) {\n            if (\"\".equals(continuationString)) {\n                continuationString = token;\n            } else {\n                sourceValueSetter(previousContinuationField, continuationString);\n                previousContinuationField = continuationField;\n                continuationString = token + \" \";\n            }\n        } else if (ignoreCompndFieldValues.contains(token)) {\n            // this field shall be ignored\n            //continuationField = token;\n        }\n    }\n    if (isLastSourceLine) {\n        // final line in the section - finish off the compound\n        //\t\t\tSystem.out.println(\"[pdb_SOURCE_Handler] Final SOURCE line - Finishing off final MolID header.\");\n        sourceValueSetter(continuationField, continuationString);\n        continuationString = \"\";\n        //compounds.add(current_compound);\n    }\n}","repo_id":"9","comment":"/**\n * Handler for\n * SOURCE Record format\n *\n * The SOURCE record specifies the biological and/or chemical source of each biological molecule in the entry. Sources are described by both the common name and the scientific name, e.g., genus and species. Strain and/or cell-line for immortalized cells are given when they help to uniquely identify the biological entity studied.\n * Record Format\n * <pre>\n * COLUMNS   DATA TYPE         FIELD          DEFINITION\n * -------------------------------------------------------------------------------\n *  1 -  6   Record name       \"SOURCE\"\n *  9 - 10   Continuation      continuation   Allows concatenation of multiple records.\n * 11 - 70   Specification     srcName        Identifies the source of the macromolecule in\n *            list                            a token: value format.\n * <\/pre>\n * @param line the line to be parsed\n */\n","repo_name":"biojava-master/","id":1173,"method_signature":"void pdb_SOURCE_Handler(String)"}