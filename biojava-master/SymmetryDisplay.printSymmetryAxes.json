{"callee_method_ids":[2102,2096,2098,570],"callee_method_names":["CeSymmResult.getAxes","SymmetryAxes.getSymmetryAxes","SymmetryAxes.getElementaryAxesObjects","Color.getRotationAxis","SymmetryAxes.getRepeatsCyclicForm","List<Atom>.addAll","List<Atom[]>.get","RotationAxis.getJmolScript","List<Atom>.toArray","List<Atom>.size"],"method_name":"SymmetryDisplay.printSymmetryAxes","method_implementation":"{\n    int id = 0;\n    String script = \"\";\n    SymmetryAxes axes = symm.getAxes();\n    List<Atom[]> repeats = SymmetryTools.toRepeatsAlignment(symm).getAtomArrays();\n    List<Axis> symmAxes;\n    if (allAxes) {\n        symmAxes = axes.getSymmetryAxes();\n    } else {\n        symmAxes = axes.getElementaryAxesObjects();\n    }\n    for (Axis a : symmAxes) {\n        RotationAxis rot = a.getRotationAxis();\n        List<List<Integer>> cyclicForm = axes.getRepeatsCyclicForm(a);\n        List<Atom> repAtoms = new ArrayList<Atom>();\n        for (List<Integer> cycle : cyclicForm) {\n            for (Integer repeat : cycle) {\n                repAtoms.addAll(Arrays.asList(repeats.get(repeat)));\n            }\n        }\n        script += rot.getJmolScript(repAtoms.toArray(new Atom[repAtoms.size()]), id);\n        id++;\n    }\n    return script;\n}","repo_id":"9","comment":"/**\n * Generates a String that displays the symmetry axes of a structure.\n *\n * @param symm\n *            CeSymmResult\n * @param allAxes Indicates whether all axes should be displayed or just\n *  the elemenatary ones\n * @return\n * @throws StructureException\n */\n","repo_name":"biojava-master/","id":3433,"method_signature":"String printSymmetryAxes(CeSymmResult, boolean)"}