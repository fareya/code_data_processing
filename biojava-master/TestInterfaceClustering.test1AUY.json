{"callee_method_ids":[1322,641,1438,911,903,905,911,909,905,905,911,883,874],"callee_method_names":["FileParsingParameters.setAlignSeqRes","AtomCache.setFileParsingParams","AtomCache.setFiletype","CrystalBuilder.getUniqueInterfaces","StructureInterfaceList.getClusters","List<StructureInterfaceCluster>.size","StructureInterfaceList.size","StructureInterfaceList.calcAsas","StructureInterface.getId","StructureInterfaceList.getClustersNcs","List<StructureInterfaceCluster>.add","StructureInterfaceList.getClusters","List<StructureInterfaceCluster>.size","StructureInterfaceList.size","StructureInterfaceList.removeInterfacesBelowArea","StructureInterfaceList.getClustersNcs","StructureInterfaceList.getClustersNcs","StructureInterfaceList.size","StructureInterfaceList.getClusters","List<StructureInterfaceCluster>.size","StructureInterfaceList.size","StructureInterface.getFirstGroupAsas","StructureInterface.getMoleculeIds","GroupAsa.getGroup","String.charAt","String.charAt"],"method_name":"TestInterfaceClustering.test1AUY","method_implementation":"{\n    // 1AUY is a viral capsid with NCS ops\n    AtomCache cache = new AtomCache();\n    FileParsingParameters params = new FileParsingParameters();\n    params.setAlignSeqRes(true);\n    cache.setFileParsingParams(params);\n    cache.setFiletype(StructureFiletype.CIF);\n    StructureIO.setAtomCache(cache);\n    // 3vbr would be an example of capsids with several chains\n    Structure s = StructureIO.getStructure(\"1auy\");\n    Map<String, String> chainOrigNames = new HashMap<>();\n    Map<String, Matrix4d> chainNcsOps = new HashMap<>();\n    CrystalBuilder.expandNcsOps(s, chainOrigNames, chainNcsOps);\n    CrystalBuilder cb = new CrystalBuilder(s, chainOrigNames, chainNcsOps);\n    StructureInterfaceList interfaces = cb.getUniqueInterfaces(5.5);\n    List<StructureInterfaceCluster> clusters = interfaces.getClusters();\n    assertNotNull(clusters);\n    assertTrue(clusters.size() <= interfaces.size());\n    interfaces.calcAsas(100, 1, 0);\n    // after calculating ASAs we should have ids for all interfaces\n    for (StructureInterface interf : interfaces) {\n        assertTrue(interf.getId() > 0);\n    }\n    int numInterfacesShouldbeKept = 0;\n    List<StructureInterfaceCluster> ncsClusterShouldbeKept = new ArrayList<>();\n    for (StructureInterfaceCluster ncsCluster : interfaces.getClustersNcs()) {\n        if (ncsCluster.getMembers().get(0).getTotalArea() >= StructureInterfaceList.DEFAULT_MINIMUM_INTERFACE_AREA) {\n            //System.out.println(\"NCS cluster is above cutoff area and has \"+ncsCluster.getMembers().size()+ \" members\");\n            ncsClusterShouldbeKept.add(ncsCluster);\n            numInterfacesShouldbeKept += ncsCluster.getMembers().size();\n        }\n    }\n    clusters = interfaces.getClusters();\n    assertNotNull(clusters);\n    assertTrue(clusters.size() <= interfaces.size());\n    interfaces.removeInterfacesBelowArea();\n    assertNotNull(interfaces.getClustersNcs());\n    // making sure that removeInterfacesBelowArea does not throw away the members for which area wasn't calculated\n    for (StructureInterfaceCluster ncsCluster : ncsClusterShouldbeKept) {\n        assertTrue(interfaces.getClustersNcs().contains(ncsCluster));\n    }\n    assertEquals(numInterfacesShouldbeKept, interfaces.size());\n    clusters = interfaces.getClusters();\n    assertNotNull(clusters);\n    assertTrue(clusters.size() <= interfaces.size());\n    for (StructureInterface interf : interfaces) {\n        GroupAsa groupAsa = interf.getFirstGroupAsas().values().iterator().next();\n        String expected = interf.getMoleculeIds().getFirst();\n        String actual = groupAsa.getGroup().getChain().getName();\n        // in 1auy this works always since there's only 1 chain. But it is useful in testing cases like 3vbr with serveral chains\n        assertEquals(expected.charAt(0), actual.charAt(0));\n    }\n}","repo_id":"9","comment":"/**\n * Test for NCS clustering in viral capsid structures that contain NCS operators.\n * @throws IOException\n * @throws StructureException\n */\n","repo_name":"biojava-master/","id":2303,"method_signature":"void test1AUY()"}