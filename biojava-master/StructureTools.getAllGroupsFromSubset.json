{"callee_method_names":["Atom[].getGroup","Group.getChain","Chain.getStructure","Set<Chain>.addAll","Structure.getChains","Atom.getGroup","Group.getChain","Set<Chain>.add","Set<Chain>.isEmpty","Set<Group>.addAll","Chain.getAtomGroups","Set<Group>.addAll","Chain.getAtomGroups"],"method_name":"StructureTools.getAllGroupsFromSubset","method_implementation":"{\n    // Get the full structure\n    Structure s = null;\n    if (atoms.length > 0) {\n        Group g = atoms[0].getGroup();\n        if (g != null) {\n            Chain c = g.getChain();\n            if (c != null) {\n                s = c.getStructure();\n            }\n        }\n    }\n    // Collect all groups from the structure\n    Set<Chain> allChains = new HashSet<>();\n    if (s != null) {\n        allChains.addAll(s.getChains());\n    }\n    // In case the structure wasn't set, need to use ca chains too\n    for (Atom a : atoms) {\n        Group g = a.getGroup();\n        if (g != null) {\n            Chain c = g.getChain();\n            if (c != null) {\n                allChains.add(c);\n            }\n        }\n    }\n    if (allChains.isEmpty()) {\n        return Collections.emptySet();\n    }\n    // Extract all ligand groups\n    Set<Group> full = new HashSet<>();\n    for (Chain c : allChains) {\n        if (types == null) {\n            full.addAll(c.getAtomGroups());\n        } else {\n            full.addAll(c.getAtomGroups(types));\n        }\n    }\n    return full;\n}","repo_id":"9","comment":"/**\n * Expand a set of atoms into all groups from the same structure.\n *\n * If the structure is set, only the first atom is used (assuming all\n * atoms come from the same original structure).\n * If the atoms aren't linked to a structure (for instance, for cloned atoms),\n * searches all chains of all atoms for groups.\n * @param atoms Sample of atoms\n * @param types Type of groups to return (useful for getting only ligands, for instance).\n *  Null gets all groups.\n * @return All groups from all chains accessible from the input atoms\n */\n","repo_name":"biojava-master/","id":1027,"method_signature":"Set<Group> getAllGroupsFromSubset(Atom[], GroupType)"}