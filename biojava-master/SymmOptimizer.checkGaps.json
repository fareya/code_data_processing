{"callee_method_names":["List<List<Integer>>.get","List<Integer>.add","List<Integer>.size","List<List<Integer>>.get","List<Integer>.get","List<List<Integer>>.get","List<Integer>.get","List<Integer>.add","List<Integer>.size"],"method_name":"SymmOptimizer.checkGaps","method_implementation":"{\n    List<Integer> shrinkColumns = new ArrayList<Integer>();\n    // Loop for each column\n    for (int res = 0; res < length; res++) {\n        int gapCount = 0;\n        // Loop for each repeat and count the gaps\n        for (int su = 0; su < order; su++) {\n            if (block.get(su).get(res) == null)\n                gapCount++;\n        }\n        if ((order - gapCount) < Rmin) {\n            // Add the column to the shrink list\n            shrinkColumns.add(res);\n        }\n    }\n    // Shrink the columns that have more gaps than allowed\n    for (int col = shrinkColumns.size() - 1; col >= 0; col--) {\n        for (int su = 0; su < order; su++) {\n            Integer residue = block.get(su).get(shrinkColumns.get(col));\n            block.get(su).remove((int) shrinkColumns.get(col));\n            if (residue != null)\n                freePool.add(residue);\n            Collections.sort(freePool);\n        }\n        length--;\n    }\n    if (shrinkColumns.size() != 0)\n        return true;\n    else\n        return false;\n}","repo_id":"9","comment":"/**\n * Method that loops through all the alignment columns and checks that there\n * are no more gaps than the maximum allowed: Rmin.\n * <p>\n * There must be at least Rmin residues different than null in every\n * alignment column. In case there is a column with more gaps than allowed\n * it will be shrinked (moved to freePool).\n *\n * @return true if any columns has been shrinked and false otherwise\n */\n","repo_name":"biojava-master/","id":2077,"method_signature":"boolean checkGaps()"}