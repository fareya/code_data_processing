{"callee_method_ids":[1785,1785,1785,1785,1785,1785,1784,1784,978,978,977,977],"callee_method_names":["Structure.getPDBHeader","Structure.getPDBHeader","PDBHeader.getNrBioAssemblies","PDBHeader.getNrBioAssemblies","PDBHeader.getNrBioAssemblies","PDBHeader.getNrBioAssemblies","PDBHeader.getNrBioAssemblies","PDBHeader.getNrBioAssemblies","PDBHeader.getBioAssemblies","PDBHeader.getBioAssemblies","Map<Integer, BioAssemblyInfo>.keySet","Map<Integer, BioAssemblyInfo>.keySet","Map<Integer, BioAssemblyInfo>.get","Map<Integer, BioAssemblyInfo>.keySet","Map<Integer, BioAssemblyInfo>.containsKey","Map<Integer, BioAssemblyInfo>.get","Map<Integer, BioAssemblyInfo>.get","BioAssemblyInfo.getMacromolecularSize","BioAssemblyInfo.getMacromolecularSize","BioAssemblyInfo.getTransforms","BioAssemblyInfo.getTransforms","Matrix4d.getChainId","Matrix4d.getChainId","Matrix4d.getTransformationMatrix","Matrix4d.getTransformationMatrix","Structure.size","Structure.size","Atom[].toPDB","Atom[].toPDB"],"method_name":"TestQuaternaryStructureProviders.comparePdbVsMmcif","method_implementation":"{\n    Structure pdbS = getPdbBioAssembly(pdbId, bioMolecule, true);\n    Structure mmcifS = getMmcifBioAssembly(pdbId, bioMolecule, true);\n    PDBHeader pHeader = pdbS.getPDBHeader();\n    PDBHeader mHeader = mmcifS.getPDBHeader();\n    assertTrue(\"not correct nr of bioassemblies \" + pHeader.getNrBioAssemblies() + \" \", pHeader.getNrBioAssemblies() >= bioMolecule);\n    assertTrue(\"not correct nr of bioassemblies \" + mHeader.getNrBioAssemblies() + \" \", mHeader.getNrBioAssemblies() >= bioMolecule);\n    // mmcif files contain sometimes partial virus assemblies, so they can contain more info than pdb\n    assertTrue(pHeader.getNrBioAssemblies() <= mHeader.getNrBioAssemblies());\n    Map<Integer, BioAssemblyInfo> pMap = pHeader.getBioAssemblies();\n    Map<Integer, BioAssemblyInfo> mMap = mHeader.getBioAssemblies();\n    assertTrue(pMap.keySet().size() <= mMap.keySet().size());\n    assertEquals(mmSize, mMap.get(bioMolecule).getMacromolecularSize());\n    for (int k : pMap.keySet()) {\n        assertTrue(mMap.containsKey(k));\n        BioAssemblyInfo pBioAssemb = pMap.get(k);\n        BioAssemblyInfo mBioAssemb = mMap.get(k);\n        assertEquals(\"Macromolecular sizes don't coincide!\", pBioAssemb.getMacromolecularSize(), mBioAssemb.getMacromolecularSize());\n        List<BiologicalAssemblyTransformation> pL = pBioAssemb.getTransforms();\n        // mmcif list can be longer due to the use of internal chain IDs\n        List<BiologicalAssemblyTransformation> mL = mBioAssemb.getTransforms();\n        //assertEquals(pL.size(), mL.size());\n        for (BiologicalAssemblyTransformation m1 : pL) {\n            boolean found = false;\n            for (BiologicalAssemblyTransformation m2 : mL) {\n                if (!m1.getChainId().equals(m2.getChainId()))\n                    continue;\n                if (!m1.getTransformationMatrix().epsilonEquals(m2.getTransformationMatrix(), 0.0001))\n                    continue;\n                found = true;\n            }\n            if (!found) {\n                System.err.println(\"did not find matching matrix \" + m1);\n                System.err.println(mL);\n            }\n            assertTrue(found);\n        }\n    }\n    assertEquals(\"Not the same number of chains!\", pdbS.size(), mmcifS.size());\n    Atom[] pdbA = StructureTools.getAllAtomArray(pdbS);\n    Atom[] mmcifA = StructureTools.getAllAtomArray(mmcifS);\n    assertEquals(pdbA.length, mmcifA.length);\n    assertEquals(pdbA[0].toPDB(), mmcifA[0].toPDB());\n}","repo_id":"9","comment":"/**\n * Bioassembly tests for a single PDB entry\n * @param pdbId\n * @param bioMolecule the bio assembly identifier to test\n * @param mmSize the expected mmSize of given bioMolecule number\n * @throws IOException\n * @throws StructureException\n */\n","repo_name":"biojava-master/","id":2225,"method_signature":"void comparePdbVsMmcif(String, int, int)"}