{"callee_method_ids":[1627,1631,1662,1662,1663,1663,1666,1666,1666,1666,1662,1663,1666,1666],"callee_method_names":["Structure.getChainByIndex","Structure.getChainByIndex","Structure.getChainByIndex","Structure.getChainByIndex","SubunitClustererParameters.setRMSDThreshold","SubunitClustererParameters.setStructureCoverageThreshold","SubunitCluster.mergeStructure","SubunitCluster.mergeStructure","SubunitCluster.size","SubunitCluster.size","SubunitCluster.length","SubunitCluster.length","SubunitCluster.getAlignedAtomsSubunit","SubunitCluster.getAlignedAtomsSubunit","SubunitCluster.getAlignedAtomsSubunit","SubunitCluster.getAlignedAtomsSubunit","SubunitCluster.mergeStructure","SubunitCluster.size","SubunitCluster.length","SubunitCluster.getAlignedAtomsSubunit","SubunitCluster.getAlignedAtomsSubunit"],"method_name":"TestSubunitCluster.testMergeStructure","method_implementation":"{\n    Structure s = StructureIO.getStructure(\"4hhb\");\n    // Create one SubunitCluster for each chain\n    SubunitCluster sc1 = new SubunitCluster(new Subunit(StructureTools.getRepresentativeAtomArray(s.getChainByIndex(0)), \"chain 0\", null, s));\n    SubunitCluster sc2 = new SubunitCluster(new Subunit(StructureTools.getRepresentativeAtomArray(s.getChainByIndex(1)), \"chain 1\", null, s));\n    SubunitCluster sc3 = new SubunitCluster(new Subunit(StructureTools.getRepresentativeAtomArray(s.getChainByIndex(2)), \"chain 2\", null, s));\n    SubunitCluster sc4 = new SubunitCluster(new Subunit(StructureTools.getRepresentativeAtomArray(s.getChainByIndex(3)), \"chain 3\", null, s));\n    // Clusters 1 and 3 and 2 and 4 are identical\n    SubunitClustererParameters clustererParameters = new SubunitClustererParameters();\n    clustererParameters.setRMSDThreshold(3.0);\n    clustererParameters.setStructureCoverageThreshold(0.9);\n    boolean merged13 = sc1.mergeStructure(sc3, clustererParameters);\n    boolean merged24 = sc2.mergeStructure(sc4, clustererParameters);\n    // Merged have to be true, and the merged SubunitCluster is sc1\n    assertTrue(merged13);\n    assertTrue(merged24);\n    assertEquals(2, sc1.size());\n    assertEquals(2, sc2.size());\n    assertEquals(141, sc1.length());\n    assertEquals(146, sc2.length());\n    assertEquals(sc1.getAlignedAtomsSubunit(0).length, sc1.getAlignedAtomsSubunit(1).length);\n    assertEquals(sc2.getAlignedAtomsSubunit(0).length, sc2.getAlignedAtomsSubunit(1).length);\n    // Now test for pseudosymmetry\n    boolean merged = sc1.mergeStructure(sc2, clustererParameters);\n    assertTrue(merged);\n    assertEquals(4, sc1.size());\n    assertEquals(140, sc1.length(), 2);\n    assertEquals(sc1.getAlignedAtomsSubunit(0).length, sc1.getAlignedAtomsSubunit(2).length);\n}","repo_id":"9","comment":"/**\n * Test\n * {@link SubunitCluster#mergeStructure(SubunitCluster, SubunitClustererParameters)}\n *\n * @throws StructureException\n * @throws IOException\n */\n","repo_name":"biojava-master/","id":2318,"method_signature":"void testMergeStructure()"}