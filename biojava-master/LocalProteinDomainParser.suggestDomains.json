{"callee_method_ids":[997],"callee_method_names":["GetDistanceMatrix.getDistanceMatrix","Atom[].getGroup","Domain.setId","Chain.getStructure","Chain.getId","Domain.setSize","Domain.setNseg","Domain.getSegmentAtPos","Domain.getSegmentAtPos","CutDomain.cutDomain","CutDomain.getDomains"],"method_name":"LocalProteinDomainParser.suggestDomains","method_implementation":"{\n    GetDistanceMatrix distMaxCalculator = new GetDistanceMatrix();\n    PDPDistanceMatrix pdpMatrix = distMaxCalculator.getDistanceMatrix(ca);\n    Domain dom = new Domain();\n    Chain c = ca[0].getGroup().getChain();\n    dom.setId(\"D\" + c.getStructure().getPDBCode() + c.getId() + \"1\");\n    dom.setSize(ca.length);\n    dom.setNseg(1);\n    dom.getSegmentAtPos(0).setFrom(0);\n    dom.getSegmentAtPos(0).setTo(ca.length - 1);\n    CutSites cutSites = new CutSites();\n    // Do the initial splitting\n    CutDomain cutDomain = new CutDomain(ca, pdpMatrix);\n    cutDomain.cutDomain(dom, cutSites, pdpMatrix);\n    List<Domain> domains = cutDomain.getDomains();\n    //\n    domains = ClusterDomains.cluster(domains, pdpMatrix);\n    ShortSegmentRemover.cleanup(domains);\n    return domains;\n}","repo_id":"9","comment":"/**\n * Suggest domains for a set of Calpha atoms\n *\n * @param ca an array of Calpha atoms\n * @return a list of possible domains\n * @throws StructureException\n */\n","repo_name":"biojava-master/","id":999,"method_signature":"List<Domain> suggestDomains(Atom[])"}