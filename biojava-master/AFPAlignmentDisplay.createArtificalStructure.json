{"callee_method_ids":[477],"callee_method_names":["AFPChain.getNrEQR","Group.size","Group.getAtom","List<Atom>.add","List<Atom>.toArray","List<Atom>.size","Atom[].getGroup","Group.getChain","Chain.getAtomGroups","Chain.getAtomGroups","Atom[].getGroup","Group.getChain","Chain.getAtomGroups","Chain.getAtomGroups"],"method_name":"AFPAlignmentDisplay.createArtificalStructure","method_implementation":"{\n    if (afpChain.getNrEQR() < 1) {\n        return GuiWrapper.getAlignedStructure(ca1, ca2);\n    }\n    Group[] twistedGroups = AlignmentTools.prepareGroupsForDisplay(afpChain, ca1, ca2);\n    List<Atom> twistedAs = new ArrayList<Atom>();\n    for (Group g : twistedGroups) {\n        if (g == null)\n            continue;\n        if (g.size() < 1)\n            continue;\n        Atom a = g.getAtom(0);\n        twistedAs.add(a);\n    }\n    Atom[] twistedAtoms = twistedAs.toArray(new Atom[twistedAs.size()]);\n    List<Group> hetatms = new ArrayList<Group>();\n    List<Group> nucs1 = new ArrayList<Group>();\n    Group g1 = ca1[0].getGroup();\n    Chain c1 = null;\n    if (g1 != null) {\n        c1 = g1.getChain();\n        if (c1 != null) {\n            hetatms = c1.getAtomGroups(GroupType.HETATM);\n            ;\n            nucs1 = c1.getAtomGroups(GroupType.NUCLEOTIDE);\n        }\n    }\n    List<Group> hetatms2 = new ArrayList<Group>();\n    List<Group> nucs2 = new ArrayList<Group>();\n    Group g2 = ca2[0].getGroup();\n    Chain c2 = null;\n    if (g2 != null) {\n        c2 = g2.getChain();\n        if (c2 != null) {\n            hetatms2 = c2.getAtomGroups(GroupType.HETATM);\n            nucs2 = c2.getAtomGroups(GroupType.NUCLEOTIDE);\n        }\n    }\n    Atom[] arr1 = GuiWrapper.getAtomArray(ca1, hetatms, nucs1);\n    Atom[] arr2 = GuiWrapper.getAtomArray(twistedAtoms, hetatms2, nucs2);\n    return GuiWrapper.getAlignedStructure(arr1, arr2);\n}","repo_id":"9","comment":"/**\n * @param afpChain\n * @param ca1\n * @param ca2\n * @return\n * @throws ClassNotFoundException If an error occurs when invoking jmol\n * @throws NoSuchMethodException If an error occurs when invoking jmol\n * @throws InvocationTargetException If an error occurs when invoking jmol\n * @throws IllegalAccessException If an error occurs when invoking jmol\n * @throws StructureException\n */\n","repo_name":"biojava-master/","id":649,"method_signature":"Structure createArtificalStructure(AFPChain, Atom[], Atom[])"}