{"callee_method_ids":[1342,1346,1349],"callee_method_names":["Structure.setPdbId","Structure.setName","Structure.setPDBHeader","Structure.setDBRefs","Structure.setSites","Chain.setStructure","List<Chain>.add","Structure.addModel","EntityInfo.getChainIds","Structure.nrModels","Structure.getChain","Logger.warn","EntityInfo.getMolId","Chain.setEntityInfo","EntityInfo.addChain","List<EntityInfo>.add","Structure.setEntityInfos"],"method_name":"StructureImpl.clone","method_implementation":"{\n    // Note: structures are also cloned in SubstructureIdentifier.reduce().\n    // Changes might need to be made there as well\n    Structure n = new StructureImpl();\n    // go through whole substructure and clone ...\n    // copy structure data\n    n.setPdbId(getPdbId());\n    n.setName(getName());\n    //TODO the header data is not being deep-copied, that's a minor issue since it is just some static metadata, but we should recheck this if needed - JD 2014-12-11\n    n.setPDBHeader(pdbHeader);\n    n.setDBRefs(this.getDBRefs());\n    n.setSites(getSites());\n    // go through each chain and clone chain\n    for (int i = 0; i < nrModels(); i++) {\n        List<Chain> cloned_model = new ArrayList<Chain>();\n        for (int j = 0; j < size(i); j++) {\n            Chain cloned_chain = (Chain) getChainByIndex(i, j).clone();\n            // setting the parent: can only be done from the parent\n            cloned_chain.setStructure(n);\n            cloned_model.add(cloned_chain);\n        }\n        n.addModel(cloned_model);\n    }\n    // deep-copying of entityInfofos is tricky: there's cross references also in the Chains\n    // beware: if we copy the entityInfos we would also need to reset the references to entityInfos in the individual chains\n    List<EntityInfo> newEntityInfoList = new ArrayList<>();\n    for (EntityInfo entityInfo : this.entityInfos) {\n        // this sets everything but the chains\n        EntityInfo newEntityInfo = new EntityInfo(entityInfo);\n        for (String asymId : entityInfo.getChainIds()) {\n            for (int modelNr = 0; modelNr < n.nrModels(); modelNr++) {\n                Chain newChain = n.getChain(asymId, modelNr);\n                if (newChain == null) {\n                    // this actually happens for structure 1msh, which has no chain B for model 29 (clearly a deposition error)\n                    logger.warn(\"Could not find chain asymId \" + asymId + \" of model \" + modelNr + \" while cloning entityInfo \" + entityInfo.getMolId() + \". Something is wrong!\");\n                    continue;\n                }\n                newChain.setEntityInfo(newEntityInfo);\n                newEntityInfo.addChain(newChain);\n            }\n        }\n        newEntityInfoList.add(newEntityInfo);\n    }\n    n.setEntityInfos(newEntityInfoList);\n    // TODO ssbonds are complicated to clone: there are deep references inside Atom objects, how would we do it? - JD 2016-03-03\n    return n;\n}","repo_id":"9","comment":"/**\n * Returns an identical copy of this structure .\n * @return an identical Structure object\n */\n","repo_name":"biojava-master/","id":2114,"method_signature":"Structure clone()"}