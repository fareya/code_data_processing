{"callee_method_names":["List<AbstractCifFileSupplier.WrappedAtom>.add","List<AbstractCifFileSupplier.WrappedAtom>.add","Atom.getPDBserial","List<AbstractCifFileSupplier.WrappedAtom>.add","List<AbstractCifFileSupplier.WrappedAtom>.add","Atom.getPDBserial","List<AbstractCifFileSupplier.WrappedAtom>.stream","MmCifBlockBuilder.addCategory","MmCifBlockBuilder.leaveBlock"],"method_name":"StructureInterface.toMMCIF","method_implementation":"{\n    String molecId1 = getMoleculeIds().getFirst();\n    String molecId2 = getMoleculeIds().getSecond();\n    if (isSymRelated()) {\n        // if both chains are named equally we want to still named them differently in the output mmcif file\n        // so that molecular viewers can handle properly the 2 chains as separate entities\n        molecId2 = molecId2 + \"_\" + getTransforms().getSecond().getTransformId();\n    }\n    MmCifBlockBuilder mmCifBlockBuilder = CifBuilder.enterFile(StandardSchemata.MMCIF).enterBlock(\"BioJava_interface_\" + getId());\n    // we reassign atom ids if sym related (otherwise atom ids would be duplicated and some molecular viewers can't cope with that)\n    int atomId = 1;\n    List<AbstractCifFileSupplier.WrappedAtom> wrappedAtoms = new ArrayList<>();\n    for (Atom atom : this.molecules.getFirst()) {\n        if (isSymRelated()) {\n            wrappedAtoms.add(new AbstractCifFileSupplier.WrappedAtom(1, molecId1, molecId1, atom, atomId));\n        } else {\n            wrappedAtoms.add(new AbstractCifFileSupplier.WrappedAtom(1, molecId1, molecId1, atom, atom.getPDBserial()));\n        }\n        atomId++;\n    }\n    for (Atom atom : this.molecules.getSecond()) {\n        if (isSymRelated()) {\n            wrappedAtoms.add(new AbstractCifFileSupplier.WrappedAtom(1, molecId2, molecId2, atom, atomId));\n        } else {\n            wrappedAtoms.add(new AbstractCifFileSupplier.WrappedAtom(1, molecId2, molecId2, atom, atom.getPDBserial()));\n        }\n        atomId++;\n    }\n    Category atomSite = wrappedAtoms.stream().collect(AbstractCifFileSupplier.toAtomSite());\n    mmCifBlockBuilder.addCategory(atomSite);\n    try {\n        return new String(CifIO.writeText(mmCifBlockBuilder.leaveBlock().leaveFile()));\n    } catch (IOException e) {\n        throw new UncheckedIOException(e);\n    }\n}","repo_id":"9","comment":"/**\n * Return a String representing the 2 molecules of this interface in mmCIF format.\n * If the molecule ids (i.e. chain ids) are the same for both molecules, then the second\n * one will be written as chainId_operatorId (with operatorId taken from {@link #getTransforms()}\n * @return the mmCIF-formatted string\n */\n","repo_name":"biojava-master/","id":897,"method_signature":"String toMMCIF()"}