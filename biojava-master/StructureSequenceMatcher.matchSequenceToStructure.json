{"callee_method_names":["SequencePair<ProteinSequence, AminoAcidCompound>.getQuery","SequencePair<ProteinSequence, AminoAcidCompound>.getTarget","AlignedSequence<ProteinSequence, AminoAcidCompound>.getLength","AlignedSequence<ProteinSequence, AminoAcidCompound>.getLength","ProteinSequence.getLength","AlignedSequence<ProteinSequence, AminoAcidCompound>.getStart","AlignedSequence<ProteinSequence, AminoAcidCompound>.getEnd","AlignedSequence<ProteinSequence, AminoAcidCompound>.isGap","AlignedSequence<ProteinSequence, AminoAcidCompound>.getSequenceIndexAt","Map<Integer, Group>.get","Logger.warn","Group.getChainId","Group.getResidueNumber","Group.getChain","AlignedSequence<ProteinSequence, AminoAcidCompound>.isGap","AlignedSequence<ProteinSequence, AminoAcidCompound>.getSequenceIndexAt","AlignedSequence<ProteinSequence, AminoAcidCompound>.getSequenceIndexAt","Map<Integer, Group>.get","Group.getResidueNumber"],"method_name":"StructureSequenceMatcher.matchSequenceToStructure","method_implementation":"{\n    //1. Create ProteinSequence for struct while remembering to which group each residue corresponds\n    Map<Integer, Group> atomIndexPosition = new HashMap<Integer, Group>();\n    ProteinSequence structSeq = getProteinSequenceForStructure(struct, atomIndexPosition);\n    // TODO This should really be semi-global alignment, though global for either sequence OR structure (we don't know which)\n    //2. Run Smith-Waterman to get the alignment\n    // Identity substitution matrix with +1 for match, -1 for mismatch\n    // TODO\n    SubstitutionMatrix<AminoAcidCompound> matrix = new SimpleSubstitutionMatrix<AminoAcidCompound>(AminoAcidCompoundSet.getAminoAcidCompoundSet(), (short) 1, (short) -1);\n    matrix = new SimpleSubstitutionMatrix<AminoAcidCompound>(AminoAcidCompoundSet.getAminoAcidCompoundSet(), new InputStreamReader(SimpleSubstitutionMatrix.class.getResourceAsStream(\"/matrices/blosum100.txt\")), \"blosum100\");\n    SequencePair<ProteinSequence, AminoAcidCompound> pair = Alignments.getPairwiseAlignment(seq, structSeq, PairwiseSequenceAlignerType.GLOBAL, new SimpleGapPenalty(), matrix);\n    //System.out.print(pair.toString());\n    //3. Convert the alignment back to Atoms\n    AlignedSequence<ProteinSequence, AminoAcidCompound> alignedSeq = pair.getQuery();\n    AlignedSequence<ProteinSequence, AminoAcidCompound> alignedStruct = pair.getTarget();\n    assert (alignedSeq.getLength() == alignedStruct.getLength());\n    //\t\tSystem.out.println(pair.toString(80));\n    //\t\tSystem.out.format(\"%d/min{%d,%d}\\n\", pair.getNumIdenticals(),\n    //\t\t\t\talignedSeq.getLength()-alignedSeq.getNumGaps(),\n    //\t\t\t\talignedStruct.getLength()-alignedStruct.getNumGaps());\n    ResidueNumber[] ca = new ResidueNumber[seq.getLength()];\n    for (int pos = alignedSeq.getStart().getPosition(); pos <= alignedSeq.getEnd().getPosition(); pos++) {\n        // 1-indexed\n        //skip missing residues from sequence. These probably represent alignment errors\n        if (alignedSeq.isGap(pos)) {\n            int structIndex = alignedStruct.getSequenceIndexAt(pos) - 1;\n            //should be defined since seq gap\n            assert (structIndex > 0);\n            Group g = atomIndexPosition.get(structIndex);\n            logger.warn(\"Chain {} residue {} in the Structure {} has no corresponding amino acid in the sequence.\", g.getChainId(), g.getResidueNumber().toString(), g.getChain().getStructure().getPDBCode());\n            continue;\n        }\n        if (!alignedStruct.isGap(pos)) {\n            //1-indexed\n            int seqIndex = alignedSeq.getSequenceIndexAt(pos) - 1;\n            //1-indexed\n            int structIndex = alignedStruct.getSequenceIndexAt(pos) - 1;\n            Group g = atomIndexPosition.get(structIndex);\n            assert (0 <= seqIndex && seqIndex < ca.length);\n            //remains null for gaps\n            ca[seqIndex] = g.getResidueNumber();\n        }\n    }\n    return ca;\n}","repo_id":"9","comment":"/**\n * Given a sequence and the corresponding Structure, get the ResidueNumber\n * for each residue in the sequence.\n *\n * <p>Smith-Waterman alignment is used to match the sequences. Residues\n * in the sequence but not the structure or mismatched between sequence\n * and structure will have a null atom, while\n * residues in the structure but not the sequence are ignored with a warning.\n * @param seq The protein sequence. Should match the sequence of struct very\n * \tclosely.\n * @param struct The corresponding protein structure\n * @return A list of ResidueNumbers of the same length as seq, containing\n *  either the corresponding residue or null.\n */\n","repo_name":"biojava-master/","id":1295,"method_signature":"ResidueNumber[] matchSequenceToStructure(ProteinSequence, Structure)"}