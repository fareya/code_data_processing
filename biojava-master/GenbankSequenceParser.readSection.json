{"callee_method_names":["BufferedReader.mark","BufferedReader.readLine","List<String[]>.isEmpty","List<String[]>.get","String.matches","String.startsWith","String.equals","String.startsWith","List<String[]>.add","StringBuilder.toString","BufferedReader.reset","Pattern.matcher","Matcher.matches","List<String[]>.add","StringBuilder.toString","Matcher.group","Matcher.group","Matcher.group","Matcher.group","Matcher.group","StringBuilder.append","Matcher.group","Matcher.group","Matcher.group","Matcher.group","String.startsWith","String.startsWith","StringBuilder.append","StringBuilder.append","String.charAt","String.substring","String.substring","Enumeration<JarEntry>.getMessage"],"method_name":"GenbankSequenceParser.readSection","method_implementation":"{\n    List<String[]> section = new ArrayList<>();\n    String line;\n    String currKey = null;\n    StringBuilder currVal = new StringBuilder();\n    boolean done = false;\n    int linecount = 0;\n    try {\n        while (!done) {\n            bufferedReader.mark(320);\n            line = bufferedReader.readLine();\n            String firstSecKey = section.isEmpty() ? \"\" : section.get(0)[0];\n            if (line != null && line.matches(\"\\\\p{Space}*\")) {\n                // regular expression \\p{Space}* will match line\n                // having only white space characters\n                continue;\n            }\n            if (line == null || (!line.startsWith(\" \") && linecount++ > 0 && (!firstSecKey.equals(START_SEQUENCE_TAG) || line.startsWith(END_SEQUENCE_TAG)))) {\n                // dump out last part of section\n                section.add(new String[] { currKey, currVal.toString() });\n                bufferedReader.reset();\n                done = true;\n            } else {\n                Matcher m = sectp.matcher(line);\n                if (m.matches()) {\n                    // new key\n                    if (currKey != null) {\n                        section.add(new String[] { currKey, currVal.toString() });\n                    }\n                    // key = group(2) or group(4) or group(6) - whichever is\n                    // not null\n                    currKey = m.group(2) == null ? (m.group(4) == null ? m.group(6) : m.group(4)) : m.group(2);\n                    currVal = new StringBuilder();\n                    // val = group(3) if group(2) not null, group(5) if\n                    // group(4) not null, \"\" otherwise, trimmed\n                    currVal.append((m.group(2) == null ? (m.group(4) == null ? \"\" : m.group(5)) : m.group(3)).trim());\n                } else {\n                    // concatted line or SEQ START/END line?\n                    if (line.startsWith(START_SEQUENCE_TAG) || line.startsWith(END_SEQUENCE_TAG)) {\n                        currKey = line;\n                    } else {\n                        // newline in between lines -\n                        currVal.append(\"\\n\");\n                        // can be removed later\n                        currVal.append(currKey.charAt(0) == '/' ? line.substring(21) : line.substring(12));\n                    }\n                }\n            }\n        }\n    } catch (IOException | RuntimeException e) {\n        throw new ParserException(e.getMessage());\n    }\n    return section;\n}","repo_id":"9","comment":"// key->value tuples\n","repo_name":"biojava-master/","id":2857,"method_signature":"List<String[]> readSection(BufferedReader)"}