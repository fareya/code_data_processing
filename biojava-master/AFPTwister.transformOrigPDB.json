{"callee_method_ids":[487,487],"callee_method_names":["Logger.debug","Logger.debug","AFPChain.getBlockRotationMatrix","AFPChain.getBlockNum","AFPChain.getBlockShiftVector","AFPChain.getBlockNum","AFPChain.setBlockRotationMatrix","AFPChain.setBlockShiftVector","Atom.getGroup"],"method_name":"AFPTwister.transformOrigPDB","method_implementation":"{\n    logger.debug(\"transforming original coordinates {} len1: {} res1: {} len2: {} res2: {}\", n, ca1.length, res1.length, ca2.length, res2.length);\n    Atom[] cod1 = getAtoms(ca1, res1, n, false);\n    Atom[] cod2 = getAtoms(ca2, res2, n, false);\n    // double *cod1 = pro1->Cod4Res(n, res1);\n    // double *cod2 = pro2->Cod4Res(n, res2);\n    Matrix4d transform = SuperPositions.superpose(Calc.atomsToPoints(cod1), Calc.atomsToPoints(cod2));\n    Matrix r = Matrices.getRotationJAMA(transform);\n    Atom t = Calc.getTranslationVector(transform);\n    logger.debug(\"transPdb: transforming orig coordinates with matrix: {}\", r);\n    if (afpChain != null) {\n        Matrix[] ms = afpChain.getBlockRotationMatrix();\n        if (ms == null)\n            ms = new Matrix[afpChain.getBlockNum()];\n        ms[blockNr] = r;\n        Atom[] shifts = afpChain.getBlockShiftVector();\n        if (shifts == null)\n            shifts = new Atom[afpChain.getBlockNum()];\n        shifts[blockNr] = t;\n        afpChain.setBlockRotationMatrix(ms);\n        afpChain.setBlockShiftVector(shifts);\n    }\n    for (Atom a : ca2) Calc.transform(a.getGroup(), transform);\n}","repo_id":"9","comment":"// orig name: transPdb\n","repo_name":"biojava-master/","id":540,"method_signature":"void transformOrigPDB(int, int[], int[], Atom[], Atom[], AFPChain, int)"}