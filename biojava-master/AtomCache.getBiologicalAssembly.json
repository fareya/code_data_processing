{"callee_method_ids":[970],"callee_method_names":["Structure.getPDBHeader","Structure.getPDBHeader","Logger.info","Structure.getPDBHeader","Structure.getPDBHeader","List<BiologicalAssemblyTransformation>.size","BiologicalAssemblyBuilder.rebuildQuaternaryStructure"],"method_name":"AtomCache.getBiologicalAssembly","method_implementation":"{\n    boolean prevIsParseBioAssembly = getFileParsingParams().isParseBioAssembly();\n    if (!getFileParsingParams().isParseBioAssembly()) {\n        getFileParsingParams().setParseBioAssembly(true);\n    }\n    Structure asymUnit = getStructureForPdbId(pdbId);\n    getFileParsingParams().setParseBioAssembly(prevIsParseBioAssembly);\n    if (asymUnit.getPDBHeader() == null || asymUnit.getPDBHeader().getBioAssemblies() == null) {\n        logger.info(\"No bioassembly information found for {}, returning asymmetric unit as biological assembly\", pdbId);\n        return asymUnit;\n    }\n    int bioAssemblyId = 1;\n    // does it exist?\n    if (!asymUnit.getPDBHeader().getBioAssemblies().containsKey(bioAssemblyId)) {\n        return asymUnit;\n    }\n    List<BiologicalAssemblyTransformation> transformations = asymUnit.getPDBHeader().getBioAssemblies().get(bioAssemblyId).getTransforms();\n    if (transformations == null || transformations.size() == 0) {\n        throw new StructureException(\"Could not load transformations to recreate biological assembly id \" + bioAssemblyId + \" of \" + pdbId);\n    }\n    BiologicalAssemblyBuilder builder = new BiologicalAssemblyBuilder();\n    // if we use mmcif or mmtf, then we need to pass useAsymIds=true\n    boolean useAsymIds = false;\n    if (filetype == StructureFiletype.CIF || filetype == StructureFiletype.BCIF || filetype == StructureFiletype.MMTF) {\n        useAsymIds = true;\n    }\n    return builder.rebuildQuaternaryStructure(asymUnit, transformations, useAsymIds, multiModel);\n}","repo_id":"9","comment":"/**\n * Returns the default biological unit (bioassemblyId=1, known in PDB as pdb1.gz). If it is not available,\n * the asymmetric unit will be returned, e.g. for NMR structures.\n *\n * <p>Biological assemblies can also be accessed using\n * <tt>getStructure(\"BIO:<i>[pdbId]<\/i>\")<\/tt>\n * @param pdbId the PDB id\n * @param multiModel if true the output Structure will be a multi-model one with one transformId per model,\n * if false the outputStructure will be as the original with added chains with renamed asymIds (in the form originalAsymId_transformId and originalAuthId_transformId).\n * @return a structure object\n * @throws IOException\n * @throws StructureException\n * @since 4.2\n */\n","repo_name":"biojava-master/","id":623,"method_signature":"Structure getBiologicalAssembly(String, boolean)"}