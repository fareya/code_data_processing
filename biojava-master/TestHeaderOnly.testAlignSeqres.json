{"callee_method_ids":[641,1318,641],"callee_method_names":["AtomCache.setFiletype","FileParsingParameters.setHeaderOnly","AtomCache.setFileParsingParams","AtomCache.setFiletype"],"method_name":"TestHeaderOnly.testAlignSeqres","method_implementation":"{\n    // Get either PDB or mmCIF with a headerOnly = false.\n    // Test 1: with PDB\n    AtomCache cache = new AtomCache();\n    cache.setFiletype(StructureFiletype.PDB);\n    FileParsingParameters params = new FileParsingParameters();\n    params.setHeaderOnly(false);\n    // params.setAlignSeqRes(true);  // Now this is default.\n    cache.setFileParsingParams(params);\n    StructureIO.setAtomCache(cache);\n    Structure sPDB = StructureIO.getStructure(pdbID);\n    Assert.assertEquals(true, doSeqResHaveAtoms(sPDB));\n    // Check particular residues to be aligned.\n    check1REPChainC(sPDB);\n    // Test 2: with mmCIF\n    cache.setFiletype(StructureFiletype.CIF);\n    Structure sCIF = StructureIO.getStructure(pdbID);\n    Assert.assertEquals(true, doSeqResHaveAtoms(sCIF));\n    // Check particular residues to be aligned.\n    check1REPChainC(sCIF);\n}","repo_id":"9","comment":"/**\n * Test that with alignSeqRes, expected Group(s) have Atoms, while others\n * are present with correct sequence but empty.\n *\n * @throws StructureException\n * @throws IOException\n */\n","repo_name":"biojava-master/","id":2276,"method_signature":"void testAlignSeqres()"}