{"callee_method_ids":[1588,2057,2075,2054],"callee_method_names":["CESymmParameters.getSSEThreshold","Atom[].getGroup","Logger.info","SecStrucCalc.calculate","CeSymmIterative.execute","CeSymmResult.isRefined","CESymmParameters.getOptimization","CeSymmResult.getSymmLevels","SymmOptimizer.optimize","CeSymmResult.setMultipleAlignment","Logger.info","MultipleAlignmentEnsemble.getMessage","CeSymmResult.getMultipleAlignment","CeSymmResult.getRepeatsID"],"method_name":"CeSymm.analyze","method_implementation":"{\n    if (atoms.length < 1)\n        throw new IllegalArgumentException(\"Empty Atom array given.\");\n    // If the SSE information is needed, we calculate it if the user did not\n    if (params.getSSEThreshold() > 0) {\n        Structure s = atoms[0].getGroup().getChain().getStructure();\n        if (SecStrucTools.getSecStrucInfo(s).isEmpty()) {\n            logger.info(\"Calculating Secondary Structure...\");\n            SecStrucCalc ssp = new SecStrucCalc();\n            ssp.calculate(s, true);\n        }\n    }\n    CeSymmIterative iter = new CeSymmIterative(params);\n    CeSymmResult result = iter.execute(atoms);\n    if (result.isRefined()) {\n        // Optimize the global alignment freely once more (final step)\n        if (params.getOptimization() && result.getSymmLevels() > 1) {\n            try {\n                SymmOptimizer optimizer = new SymmOptimizer(result);\n                MultipleAlignment optimized = optimizer.optimize();\n                // Set the optimized MultipleAlignment and the axes\n                result.setMultipleAlignment(optimized);\n            } catch (RefinerFailedException e) {\n                logger.info(\"Final optimization failed:\" + e.getMessage());\n            }\n        }\n        result.getMultipleAlignment().getEnsemble().setStructureIdentifiers(result.getRepeatsID());\n    }\n    return result;\n}","repo_id":"9","comment":"/**\n * Analyze the symmetries of the input Atom array using the provided\n * parameters.\n *\n * @param atoms\n *            representative Atom array of the Structure\n * @param param\n *            CeSymmParameters bean\n * @return CeSymmResult\n * @throws StructureException\n */\n","repo_name":"biojava-master/","id":2073,"method_signature":"CeSymmResult analyze(Atom[], CESymmParameters)"}