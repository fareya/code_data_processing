{"callee_method_names":["Logger.debug","File.toString","Logger.error","Logger.debug","URLConnection.getInputStream","PrintWriter.println","URL.toString","PrintWriter.flush","File.toPath","Logger.error","int.getMessage","File.delete"],"method_name":"DownloadChemCompProvider.downloadChemCompRecord","method_implementation":"{\n    String localName = getLocalFileName(recordName);\n    File newFile;\n    try {\n        newFile = Files.createTempFile(\"chemcomp\" + recordName, \"cif\").toFile();\n        logger.debug(\"Will write chem comp file to temp file {}\", newFile.toString());\n    } catch (IOException e) {\n        logger.error(\"Could not write to temp directory {} to create the chemical component download temp file\", System.getProperty(\"java.io.tmpdir\"));\n        return false;\n    }\n    String u = serverBaseUrl + expandPathUrlTemplate(chemCompPathUrlTemplate, recordName);\n    logger.debug(\"Downloading chem comp definition from {}\", u);\n    URL url = null;\n    try {\n        url = new URL(u);\n        URLConnection uconn = URLConnectionTools.openURLConnection(url);\n        try (PrintWriter pw = new PrintWriter(new GZIPOutputStream(new FileOutputStream(newFile)));\n            BufferedReader fileBuffer = new BufferedReader(new InputStreamReader(uconn.getInputStream()))) {\n            String line;\n            boolean success = false;\n            while ((line = fileBuffer.readLine()) != null) {\n                pw.println(line);\n                success = true;\n            }\n            if (!success) {\n                throw new IOException(\"Malformed URL or no content found in \" + url.toString());\n            }\n            pw.flush();\n        }\n        // Now we move this across to where it actually wants to be\n        Files.move(newFile.toPath(), Paths.get(localName), StandardCopyOption.REPLACE_EXISTING);\n        return true;\n    } catch (IOException e) {\n        logger.error(\"Could not download {} OR store locally to {} Error ={}\", url, localName, e.getMessage());\n        newFile.delete();\n    }\n    return false;\n}","repo_id":"9","comment":"/**\n * @param recordName : three-letter name\n * @return true if successful download\n */\n","repo_name":"biojava-master/","id":1100,"method_signature":"boolean downloadChemCompRecord(String)"}