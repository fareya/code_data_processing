{"callee_method_names":["List<Point3d[]>.size","List<Point3d[]>.get","List<Point3d[]>.get","Logger.debug","List<Point3d[]>.size","SuperPosition.getRmsd","List<Point3d[]>.get","List<Point3d[]>.get","SuperPosition.getRmsd","List<Point3d[]>.get","List<Point3d[]>.get","SuperPosition.getRmsd","List<Point3d[]>.get","List<Point3d[]>.get","Logger.info","List<Point3d[]>.get"],"method_name":"TestSuperPosition.testRMSD","method_implementation":"{\n    // for the rmsd test we first make sure that both cloud points are not centered in origin so that the centering is tested too\n    // first cloud points are already centered, we translate cloud2 only\n    for (int c = 0; c < cloud2.size(); c++) {\n        CalcPoint.translate(translation2, cloud2.get(c));\n        Point3d centroid2 = CalcPoint.centroid(cloud2.get(c));\n        LOGGER.debug(\"Centroid c2 (index %d): (%.2f, %.2f, %.2f)\\n\", c, centroid2.x, centroid2.y, centroid2.z);\n    }\n    for (int c = 0; c < cloud1.size(); c++) {\n        // Use SVD superposition\n        SuperPosition svd = new SuperPositionSVD(false);\n        long svdStart = System.nanoTime();\n        double svdrmsd = svd.getRmsd(cloud1.get(c), cloud2.get(c));\n        long svdTime = (System.nanoTime() - svdStart) / 1000;\n        // Use quaternion superposition\n        SuperPosition quat = new SuperPositionQuat(false);\n        long quatStart = System.nanoTime();\n        double quatrmsd = quat.getRmsd(cloud1.get(c), cloud2.get(c));\n        long quatTime = (System.nanoTime() - quatStart) / 1000;\n        // Use QCP algorithm\n        SuperPosition qcp = new SuperPositionQCP(false);\n        long qcpStart = System.nanoTime();\n        double qcprmsd = qcp.getRmsd(cloud1.get(c), cloud2.get(c));\n        long qcpTime = (System.nanoTime() - qcpStart) / 1000;\n        LOGGER.info(String.format(\"RMSD %d points: SVD time %d us, \" + \"Quat time: %d us, QCP time: %d us\", cloud1.get(c).length, svdTime, quatTime, qcpTime));\n        // Check that the returned RMSDs are equal\n        assertEquals(quatrmsd, qcprmsd, 0.001);\n        assertEquals(svdrmsd, quatrmsd, 0.001);\n        assertEquals(svdrmsd, qcprmsd, 0.001);\n    }\n}","repo_id":"9","comment":"/**\n * Test method to obtain the RMSD of a superposition.\n */\n","repo_name":"biojava-master/","id":2307,"method_signature":"void testRMSD()"}