{"callee_method_names":["List<Atom[]>.size","List<Integer>.size","List<Atom[]>.get","List<Atom[]>.size","List<Atom[]>.get","List<Atom[]>.get","List<Atom[]>.get","List<Atom[]>.get","List<Integer>.get","List<Integer>.get"],"method_name":"MultipleAlignmentScorer.getRefTMScore","method_implementation":"{\n    if (transformed.size() != lengths.size())\n        throw new IllegalArgumentException(\"Input sizes differ\");\n    double sumTM = 0;\n    int comparisons = 0;\n    int len = transformed.get(reference).length;\n    for (int r = 0; r < transformed.size(); r++) {\n        if (r == reference)\n            continue;\n        // remove nulls from both arrays\n        Atom[] ref = new Atom[len];\n        Atom[] aln = new Atom[len];\n        int nonNullLen = 0;\n        for (int c = 0; c < len; c++) {\n            if (transformed.get(reference)[c] != null && transformed.get(r)[c] != null) {\n                ref[nonNullLen] = transformed.get(reference)[c];\n                aln[nonNullLen] = transformed.get(r)[c];\n                nonNullLen++;\n            }\n        }\n        // truncate nulls\n        if (nonNullLen < len) {\n            ref = Arrays.copyOf(ref, nonNullLen);\n            aln = Arrays.copyOf(aln, nonNullLen);\n        }\n        sumTM += Calc.getTMScore(ref, aln, lengths.get(reference), lengths.get(r));\n        comparisons++;\n    }\n    return sumTM / comparisons;\n}","repo_id":"9","comment":"/**\n * Calculates the average TMScore from all structures to a reference\n * structure, given a set of superimposed atoms.\n * <p>\n * Complexity: T(n,l) = O(l*n^2), if n=number of structures and l=alignment\n * length.\n *\n * @param transformed\n *            Arrays of aligned atoms, after superposition\n * @param lengths\n *            lengths of the full input structures\n * @param reference\n *            Index of the reference structure\n * @return\n * @throws StructureException\n */\n","repo_name":"biojava-master/","id":685,"method_signature":"double getRefTMScore(List, List, int)"}