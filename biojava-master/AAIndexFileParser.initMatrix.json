{"callee_method_names":["String.split","String[].substring","String[].length","String.length","String.length","String.length","String.charAt","AminoAcidCompoundSet.getCompoundForString","List<AminoAcidCompound>.add","String.length","String.charAt","AminoAcidCompoundSet.getCompoundForString","List<AminoAcidCompound>.add","ScaledSubstitutionMatrix.setScale"],"method_name":"AAIndexFileParser.initMatrix","method_implementation":"{\n    String[] spl = line.split(\" \");\n    // trim off the final , character\n    currentRows = spl[3].substring(0, spl[3].length() - 1);\n    currentCols = spl[6];\n    currentRowPos = -1;\n    int nrRows = currentRows.length();\n    int nrCols = currentCols.length();\n    matrix = new short[nrRows][nrCols];\n    rows = new ArrayList<AminoAcidCompound>();\n    cols = new ArrayList<AminoAcidCompound>();\n    //System.out.println(\">\" + currentRows+\"<\");\n    AminoAcidCompoundSet compoundSet = AminoAcidCompoundSet.getAminoAcidCompoundSet();\n    for (int i = 0; i < currentRows.length(); i++) {\n        char c = currentRows.charAt(i);\n        AminoAcidCompound aa = compoundSet.getCompoundForString(String.valueOf(c));\n        rows.add(aa);\n    }\n    for (int i = 0; i < currentCols.length(); i++) {\n        char c = currentRows.charAt(i);\n        AminoAcidCompound aa = compoundSet.getCompoundForString(String.valueOf(c));\n        cols.add(aa);\n    }\n    currentMatrix.setScale(scale);\n}","repo_id":"9","comment":"// process a line of type >M rows = ARNDCQEGHILKMFPSTWYV, cols = ARNDCQEGHILKMFPSTWYV<\n","repo_name":"biojava-master/","id":2510,"method_signature":"void initMatrix(String)"}