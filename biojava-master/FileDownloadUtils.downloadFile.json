{"callee_method_names":["URL.toString","URLConnection.connect","URLConnection.getInputStream","FileOutputStream.getChannel","ReadableByteChannel.close","FileOutputStream.close","Logger.debug","File.toPath","File.toPath","File.delete"],"method_name":"FileDownloadUtils.downloadFile","method_implementation":"{\n    int count = 0;\n    int maxTries = 10;\n    //60 sec\n    int timeout = 60000;\n    File tempFile = Files.createTempFile(getFilePrefix(destination), \".\" + getFileExtension(destination)).toFile();\n    // Took following recipe from stackoverflow:\n    // http://stackoverflow.com/questions/921262/how-to-download-and-save-a-file-from-internet-using-java\n    // It seems to be the most efficient way to transfer a file\n    // See: http://docs.oracle.com/javase/7/docs/api/java/nio/channels/FileChannel.html\n    ReadableByteChannel rbc = null;\n    FileOutputStream fos = null;\n    while (true) {\n        try {\n            URLConnection connection = prepareURLConnection(url.toString(), timeout);\n            connection.connect();\n            InputStream inputStream = connection.getInputStream();\n            rbc = Channels.newChannel(inputStream);\n            fos = new FileOutputStream(tempFile);\n            fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);\n            break;\n        } catch (SocketTimeoutException e) {\n            if (++count == maxTries)\n                throw e;\n        } finally {\n            if (rbc != null) {\n                rbc.close();\n            }\n            if (fos != null) {\n                fos.close();\n            }\n        }\n    }\n    logger.debug(\"Copying temp file [{}] to final location [{}]\", tempFile, destination);\n    Files.copy(tempFile.toPath(), destination.toPath(), StandardCopyOption.REPLACE_EXISTING);\n    // delete the tmp file\n    tempFile.delete();\n}","repo_id":"9","comment":"/**\n * Download the content provided at URL url and store the result to a local\n * file, using a temp file to cache the content in case something goes wrong\n * in download. A timeout of 60 seconds is hard-coded and 10 retries are attempted.\n *\n * @param url\n * @param destination\n * @throws IOException\n */\n","repo_name":"biojava-master/","id":2569,"method_signature":"void downloadFile(URL, File)"}