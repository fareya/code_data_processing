{"callee_method_ids":[1971,1885,1884,1972],"callee_method_names":["HelixAxisAligner.getSubunits","QuatSymmetrySubunits.getModelNumbers","QuatSymmetrySubunits.getChainIds","HelixAxisAligner.getOrbits","List<List<Integer>>.size","List<List<Integer>>.size","List<List<Integer>>.get","Map<Color4f, List<String>>.get","Map<Color4f, List<String>>.put","List<String>.add"],"method_name":"JmolSymmetryScriptGeneratorH.colorBySubunit","method_implementation":"{\n    QuatSymmetrySubunits subunits = helixAxisAligner.getSubunits();\n    List<Integer> modelNumbers = subunits.getModelNumbers();\n    List<String> chainIds = subunits.getChainIds();\n    List<List<Integer>> orbits = helixAxisAligner.getOrbits();\n    Color[] col = ColorBrewer.Spectral.getColorPalette(orbits.size());\n    Color4f[] colors = ColorConverter.convertColor4f(col);\n    int half = colors.length / 2;\n    for (int i = 0; i < half; i++) {\n        if (i % 2 != 0) {\n            Color4f temp = colors[i];\n            colors[i] = colors[half + i];\n            colors[half + i] = temp;\n        }\n    }\n    Map<Color4f, List<String>> colorMap = new HashMap<Color4f, List<String>>();\n    for (int i = 0; i < orbits.size(); i++) {\n        for (Integer j : orbits.get(i)) {\n            Color4f c = colors[i];\n            List<String> ids = colorMap.get(c);\n            if (ids == null) {\n                ids = new ArrayList<String>();\n                colorMap.put(c, ids);\n            }\n            String id = getChainSpecification(modelNumbers, chainIds, j);\n            ids.add(id);\n        }\n    }\n    String coloring = defaultColoring + getJmolColorScript(colorMap);\n    return coloring;\n}","repo_id":"9","comment":"/**\n * Returns a Jmol script that colors the subunits of a structure by different colors\n * @return\n */\n","repo_name":"biojava-master/","id":3418,"method_signature":"String colorBySubunit()"}