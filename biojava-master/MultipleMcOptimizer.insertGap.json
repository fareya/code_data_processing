{"callee_method_names":["MultipleAlignment.getBlock","Matrix.get","Matrix.get","Random.nextDouble","Matrix.get","MultipleAlignment.getBlock","Block.getCoreLength","Block.getAlignRes","List<SortedSet<Integer>>.get","Block.getAlignRes"],"method_name":"MultipleMcOptimizer.insertGap","method_implementation":"{\n    // Select residue by maximum distance\n    Matrix residueDistances = MultipleAlignmentTools.getAverageResidueDistances(msa);\n    double maxDist = Double.MIN_VALUE;\n    int structure = 0;\n    int block = 0;\n    int position = 0;\n    int column = 0;\n    for (int b = 0; b < blockNr; b++) {\n        for (int col = 0; col < msa.getBlock(b).length(); col++) {\n            for (int str = 0; str < size; str++) {\n                if (residueDistances.get(str, column) != -1) {\n                    if (residueDistances.get(str, column) > maxDist) {\n                        // Geometric distribution\n                        if (rnd.nextDouble() > 0.5) {\n                            structure = str;\n                            block = b;\n                            position = col;\n                            maxDist = residueDistances.get(str, column);\n                        }\n                    }\n                }\n            }\n            column++;\n        }\n    }\n    Block bk = msa.getBlock(block);\n    if (bk.getCoreLength() <= Lmin)\n        return false;\n    // Insert the gap at the position\n    Integer residueL = bk.getAlignRes().get(structure).get(position);\n    if (residueL != null) {\n        freePool.get(structure).add(residueL);\n    } else\n        // If there was a gap already in the position.\n        return false;\n    bk.getAlignRes().get(structure).set(position, null);\n    checkGaps();\n    return true;\n}","repo_id":"9","comment":"/**\n * Insert a gap in one of the structures in a random position of the\n * alignment.\n * <p>\n * The distribution is not uniform, because positions with higher average\n * distance to their aligned neighbors are more likely to be gapped.\n * <p>\n * A gap is a null in the Block position.\n *\n * @return true if the alignment has been changed, false otherwise.\n */\n","repo_name":"biojava-master/","id":696,"method_signature":"boolean insertGap()"}