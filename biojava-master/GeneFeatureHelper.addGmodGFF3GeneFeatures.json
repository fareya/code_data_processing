{"callee_method_ids":[2438,2459,2452,2459,2459,2459,2459,2452,2451,2451,2438,2448,2438,2438,3182,3181,3067,3175,3177,2452,2459,2454,2454,3071,3169,2456,3061],"callee_method_names":["FeatureList.selectByType","Feature.getAttribute","Feature.source","Feature.getAttribute","Feature.getAttribute","String.length","LinkedHashMap<String, FeatureList>.get","FeatureList.get","Feature.getAttribute","Feature.getAttribute","Feature.source","Feature.seqname","Feature.seqname","LinkedHashMap<String,ChromosomeSequence>.get","LinkedHashMap<String, FeatureList>.get","FeatureList.selectByType","FeatureList.get","FeatureI.location","FeatureList.sortByStart","FeatureList.selectByType","FeatureList.size","FeatureList.get","FeatureI.location","FeatureI.location","FeatureI.getAttribute","FeatureList.selectByType","FeatureList.size","FeatureList.get","FeatureI.location","FeatureI.location","FeatureI.getAttribute","FeatureList.get","FeatureI.location","FeatureList.get","FeatureI.location","FeatureList.get","FeatureList.size","FeatureI.location","FeatureList.get","FeatureList.size","FeatureI.location","ChromosomeSequence.getGene","ChromosomeSequence.addGene","GeneSequence.setSource","String.length","GeneSequence.addNote","GeneSequence.getBioBegin","GeneSequence.setBioBegin","GeneSequence.getBioBegin","GeneSequence.setBioEnd","GeneSequence.addTranscript","TranscriptSequence.setSource","String.length","TranscriptSequence.addNote","String.length","FeatureI.location","FeatureI.location","TranscriptSequence.addStartCodonSequence","FeatureI.location","FeatureI.location","String.length","FeatureI.location","FeatureI.location","TranscriptSequence.addStopCodonSequence","FeatureI.location","FeatureI.location","Feature.source","Feature.getAttribute","String.length","Feature.location","Feature.location","GeneSequence.addExon","ExonSequence.setSource","String.length","ExonSequence.addNote","TranscriptSequence.addCDS","Feature.frame","GeneSequence.addIntronsUsingExons"],"method_name":"GeneFeatureHelper.addGmodGFF3GeneFeatures","method_implementation":"{\n    // key off mRNA as being a known feature that may or may not have a parent gene\n    FeatureList mRNAFeatures = listGenes.selectByType(\"mRNA\");\n    LinkedHashMap<String, FeatureList> featureIDHashMap = FeatureHelper.buildFeatureAtrributeIndex(\"ID\", listGenes);\n    LinkedHashMap<String, FeatureList> featureParentHashMap = FeatureHelper.buildFeatureAtrributeIndex(\"Parent\", listGenes);\n    for (FeatureI f : mRNAFeatures) {\n        String geneID;\n        String geneNote = null;\n        String geneSource = null;\n        String sequenceName = null;\n        ChromosomeSequence seq = null;\n        GeneSequence geneSequence = null;\n        Feature mRNAFeature = (Feature) f;\n        String mRNAID = mRNAFeature.getAttribute(\"ID\");\n        String mRNAsource = mRNAFeature.source();\n        String mRNANote = mRNAFeature.getAttribute(\"Note\");\n        String mRNAParent = mRNAFeature.getAttribute(\"Parent\");\n        if (mRNAParent != null && mRNAParent.length() > 0) {\n            // FeatureList geneFeatureList = listGenes.selectByAttribute(\"ID\", mRNAParent);\n            FeatureList geneFeatureList = featureIDHashMap.get(mRNAParent);\n            Feature geneFeature = (Feature) geneFeatureList.get(0);\n            geneID = geneFeature.getAttribute(\"ID\");\n            geneNote = geneFeature.getAttribute(\"Note\");\n            geneSource = geneFeature.source();\n            sequenceName = geneFeature.seqname();\n            //\n        } else {\n            //deal with cases where no parent gene is given\n            geneID = mRNAID;\n            geneSource = mRNAsource;\n            sequenceName = mRNAFeature.seqname();\n        }\n        seq = chromosomeSequenceList.get(sequenceName);\n        AccessionID geneAccessionID = new AccessionID(geneID);\n        //  FeatureList mRNAChildren = listGenes.selectByAttribute(\"Parent\", mRNAID);\n        FeatureList mRNAChildren = featureParentHashMap.get(mRNAID);\n        FeatureList cdsFeatures = mRNAChildren.selectByType(\"CDS\");\n        FeatureI feature = cdsFeatures.get(0);\n        Strand strand = Strand.POSITIVE;\n        if (feature.location().isNegative()) {\n            strand = Strand.NEGATIVE;\n        }\n        cdsFeatures = cdsFeatures.sortByStart();\n        //String seqName = feature.seqname();\n        FeatureI startCodon = null;\n        FeatureI stopCodon = null;\n        Integer startCodonBegin = null;\n        Integer stopCodonEnd = null;\n        String startCodonName = \"\";\n        String stopCodonName = \"\";\n        FeatureList startCodonList = mRNAChildren.selectByType(\"five_prime_UTR\");\n        if (startCodonList != null && startCodonList.size() > 0) {\n            startCodon = startCodonList.get(0);\n            if (strand == Strand.NEGATIVE) {\n                startCodonBegin = startCodon.location().bioEnd();\n            } else {\n                startCodonBegin = startCodon.location().bioStart();\n            }\n            startCodonName = startCodon.getAttribute(\"ID\");\n        }\n        FeatureList stopCodonList = mRNAChildren.selectByType(\"three_prime_UTR\");\n        if (stopCodonList != null && stopCodonList.size() > 0) {\n            stopCodon = stopCodonList.get(0);\n            if (strand == Strand.NEGATIVE) {\n                stopCodonEnd = stopCodon.location().bioStart();\n            } else {\n                stopCodonEnd = stopCodon.location().bioEnd();\n            }\n            stopCodonName = stopCodon.getAttribute(\"ID\");\n        }\n        if (startCodonBegin == null) {\n            if (strand == Strand.NEGATIVE) {\n                FeatureI firstFeature = cdsFeatures.get(0);\n                startCodonBegin = firstFeature.location().bioEnd();\n            } else {\n                FeatureI firstFeature = cdsFeatures.get(0);\n                startCodonBegin = firstFeature.location().bioStart();\n            }\n        }\n        if (stopCodonEnd == null) {\n            if (strand == Strand.NEGATIVE) {\n                FeatureI lastFeature = cdsFeatures.get(cdsFeatures.size() - 1);\n                stopCodonEnd = lastFeature.location().bioStart();\n            } else {\n                FeatureI lastFeature = cdsFeatures.get(cdsFeatures.size() - 1);\n                stopCodonEnd = lastFeature.location().bioEnd();\n            }\n        }\n        //for gtf ordering can be strand based so first is last and last is first\n        if (startCodonBegin > stopCodonEnd) {\n            int temp = startCodonBegin;\n            startCodonBegin = stopCodonEnd;\n            stopCodonEnd = temp;\n        }\n        AccessionID transcriptAccessionID = new AccessionID(mRNAID);\n        geneSequence = seq.getGene(geneID);\n        if (geneSequence == null) {\n            geneSequence = seq.addGene(geneAccessionID, startCodonBegin, stopCodonEnd, strand);\n            geneSequence.setSource(geneSource);\n            if (geneNote != null && geneNote.length() > 0) {\n                geneSequence.addNote(geneNote);\n            }\n        } else {\n            if (startCodonBegin < geneSequence.getBioBegin()) {\n                geneSequence.setBioBegin(startCodonBegin);\n            }\n            if (stopCodonEnd > geneSequence.getBioBegin()) {\n                geneSequence.setBioEnd(stopCodonEnd);\n            }\n        }\n        TranscriptSequence transcriptSequence = geneSequence.addTranscript(transcriptAccessionID, startCodonBegin, stopCodonEnd);\n        transcriptSequence.setSource(mRNAsource);\n        if (mRNANote != null && mRNANote.length() > 0) {\n            transcriptSequence.addNote(mRNANote);\n        }\n        if (startCodon != null) {\n            if (startCodonName == null || startCodonName.length() == 0) {\n                startCodonName = mRNAID + \"-start_codon-\" + startCodon.location().bioStart() + \"-\" + startCodon.location().bioEnd();\n            }\n            transcriptSequence.addStartCodonSequence(new AccessionID(startCodonName), startCodon.location().bioStart(), startCodon.location().bioEnd());\n        }\n        if (stopCodon != null) {\n            if (stopCodonName == null || stopCodonName.length() == 0) {\n                stopCodonName = mRNAID + \"-stop_codon-\" + stopCodon.location().bioStart() + \"-\" + stopCodon.location().bioEnd();\n            }\n            transcriptSequence.addStopCodonSequence(new AccessionID(stopCodonName), stopCodon.location().bioStart(), stopCodon.location().bioEnd());\n        }\n        for (FeatureI cdsFeature : cdsFeatures) {\n            Feature cds = (Feature) cdsFeature;\n            String cdsNote = cdsFeature.getAttribute(\"Note\");\n            String cdsSource = cds.source();\n            String cdsName = cds.getAttribute(\"ID\");\n            if (cdsName == null || cdsName.length() == 0) {\n                cdsName = mRNAID + \"-cds-\" + cds.location().bioStart() + \"-\" + cds.location().bioEnd();\n            }\n            AccessionID cdsAccessionID = new AccessionID(cdsName);\n            ExonSequence exonSequence = geneSequence.addExon(cdsAccessionID, cdsFeature.location().bioStart(), cdsFeature.location().bioEnd());\n            exonSequence.setSource(cdsSource);\n            if (cdsNote != null && cdsNote.length() > 0) {\n                exonSequence.addNote(cdsNote);\n            }\n            transcriptSequence.addCDS(cdsAccessionID, cdsFeature.location().bioStart(), cdsFeature.location().bioEnd(), cds.frame());\n        }\n        geneSequence.addIntronsUsingExons();\n    }\n}","repo_id":"9","comment":"/**\n * Load GFF3 file using mRNA as the gene feature as not all GFF3 files are complete\n * @param chromosomeSequenceList\n * @param listGenes\n * @throws Exception\n */\n","repo_name":"biojava-master/","id":2499,"method_signature":"void addGmodGFF3GeneFeatures(LinkedHashMap, FeatureList)"}