{"callee_method_ids":[490,489,487,487],"callee_method_names":["AFPChain.getOptLen","AFPChain.getOptAln","AFPChain.getBlockNum","AFPChain.getBlockNum","Atom[].clone","AFPChain.getOptLength","Logger.warn","AFPChain.getOptLength"],"method_name":"AlignmentTools.fillAlignedAtomArrays","method_implementation":"{\n    int pos = 0;\n    int[] blockLens = afpChain.getOptLen();\n    int[][][] optAln = afpChain.getOptAln();\n    assert (afpChain.getBlockNum() <= optAln.length);\n    for (int block = 0; block < afpChain.getBlockNum(); block++) {\n        for (int i = 0; i < blockLens[block]; i++) {\n            int pos1 = optAln[block][0][i];\n            int pos2 = optAln[block][1][i];\n            Atom a1 = ca1[pos1];\n            Atom a2 = (Atom) ca2[pos2].clone();\n            ca1aligned[pos] = a1;\n            ca2aligned[pos] = a2;\n            pos++;\n        }\n    }\n    // this can happen when we load an old XML serialization which did not support modern ChemComp representation of modified residues.\n    if (pos != afpChain.getOptLength()) {\n        logger.warn(\"AFPChainScorer getTMScore: Problems reconstructing alignment! nr of loaded atoms is \" + pos + \" but should be \" + afpChain.getOptLength());\n        // we need to resize the array, because we allocated too many atoms earlier on.\n        ca1aligned = (Atom[]) resizeArray(ca1aligned, pos);\n        ca2aligned = (Atom[]) resizeArray(ca2aligned, pos);\n    }\n}","repo_id":"9","comment":"/**\n * Fill the aligned Atom arrays with the equivalent residues in the afpChain.\n * @param afpChain\n * @param ca1\n * @param ca2\n * @param ca1aligned\n * @param ca2aligned\n */\n","repo_name":"biojava-master/","id":605,"method_signature":"void fillAlignedAtomArrays(AFPChain, Atom[], Atom[], Atom[], Atom[])"}