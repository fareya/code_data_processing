{"callee_method_ids":[1322],"callee_method_names":["FileParsingParameters.setAlignSeqRes","Structure.isCrystallographic","Structure.getChains","Structure.getEntityInfos","Structure.getEntityInfos","Structure.getPolyChains"],"method_name":"TestNonDepositedFiles.testPhenixCifFile","method_implementation":"{\n    InputStream inStream = new GZIPInputStream(this.getClass().getResourceAsStream(\"/org/biojava/nbio/structure/io/4lup_phenix_output.cif.gz\"));\n    FileParsingParameters fileParsingParams = new FileParsingParameters();\n    fileParsingParams.setAlignSeqRes(true);\n    Structure s = CifStructureConverter.fromInputStream(inStream, fileParsingParams);\n    assertNotNull(s);\n    assertTrue(s.isCrystallographic());\n    // all ligands are into their own chains, so we have 2 proteins, 2 nucleotide chains, 1 ligand chain and 1 purely water chain\n    assertEquals(6, s.getChains().size());\n    // 4 entities: 1 protein, 1 nucleotide, 1 water, 1 ligand (EDO)\n    assertEquals(4, s.getEntityInfos().size());\n    int[] counts = countEntityTypes(s.getEntityInfos());\n    assertEquals(2, counts[0]);\n    assertEquals(1, counts[1]);\n    assertEquals(1, counts[2]);\n    // we should have seqres groups (testing getSeqResSequence() is equivalent)\n    assertFalse(s.getPolyChains().get(0).getSeqResSequence().isEmpty());\n}","repo_id":"9","comment":"/**\n * A test for reading a phenix-produced (ver 1.9_1692) mmCIF file.\n * This is the file submitted to the PDB for deposition of entry 4lup\n * See github issue #234\n * @throws IOException\n */\n","repo_name":"biojava-master/","id":2227,"method_signature":"void testPhenixCifFile()"}