{"callee_method_ids":[26,27],"callee_method_names":["String.equals","StockholmStructure.addGSAccessionNumber","String.equals","StockholmStructure.addGSDescription","String.equals","StockholmStructure.addGSdbReference","String.equals","StockholmStructure.addGSOrganismSpecies","String.equals","StockholmStructure.addGSOrganismClassification","String.equals","StockholmStructure.addGSLook","Logger.warn"],"method_name":"StockholmFileParser.handleSequenceAnnotation","method_implementation":"{\n    if (featureName.equals(GS_ACCESSION_NUMBER)) {\n        stockholmStructure.addGSAccessionNumber(seqName, value);\n    } else if (featureName.equals(GS_DESCRIPTION)) {\n        stockholmStructure.addGSDescription(seqName, value);\n    } else if (featureName.equals(GS_DATABASE_REFERENCE)) {\n        stockholmStructure.addGSdbReference(seqName, value);\n    } else if (featureName.equals(GS_ORGANISM_SPECIES)) {\n        stockholmStructure.addGSOrganismSpecies(seqName, value);\n    } else if (featureName.equals(GS_ORGANISM_CLASSIFICATION)) {\n        stockholmStructure.addGSOrganismClassification(seqName, value);\n    } else if (featureName.equals(GS_LOOK)) {\n        stockholmStructure.addGSLook(seqName, value);\n    } else {\n        // unknown feature\n        logger.warn(\"Unknown Sequence Feature [{}].\\nPlease contact the Biojava team.\", featureName);\n    }\n}","repo_id":"9","comment":"/**\n * #=GS &lt;seqname&gt; &lt;feature&gt; &lt;Generic per-Sequence annotation, free text&gt;\n *\n * @param line\n *            the line to be parsed\n */\n","repo_name":"biojava-master/","id":22,"method_signature":"void handleSequenceAnnotation(String, String, String)"}