{"callee_method_ids":[929,940],"callee_method_names":["Grid.addAtoms","Structure.getNonPolyChains","Chain.getAtomGroups","Group.isWater","Group.isPolymeric","Grid.hasAnyContact","Group.getAtoms","Structure.findGroup","Group.getChainId","Group.getResidueNumber","Logger.info","Group.getPDBName","Group.getResidueNumber"],"method_name":"SubstructureIdentifier.copyLigandsByProximity","method_implementation":"{\n    // Geometric hashing of the reduced structure\n    Grid grid = new Grid(cutoff);\n    Atom[] nonwaters = StructureTools.getAllNonHAtomArray(reduced, true, toModel);\n    if (nonwaters.length < 1)\n        return;\n    grid.addAtoms(nonwaters);\n    //potential ligand chains\n    full.getNonPolyChains(fromModel).stream().flatMap(// potential ligand groups\n    (chain) -> chain.getAtomGroups().stream()).filter(// ignore waters\n    (g) -> !g.isWater()).filter(// already shouldn't be polymeric, but filter anyways\n    (g) -> !g.isPolymeric()).filter(// must contact reduced\n    (g) -> grid.hasAnyContact(Calc.atomsToPoints(g.getAtoms()))).// Keeps ligands from the same chain together if possible\n    sequential().// reduction updates the chain guess\n    reduce(// reduction updates the chain guess\n    (Chain) null, (guess, g) -> {\n        boolean wasAdded;\n        try {\n            // Check that it's not in reduced already\n            wasAdded = reduced.findGroup(g.getChainId(), g.getResidueNumber().toString(), toModel) != null;\n        } catch (StructureException e) {\n            // not found\n            wasAdded = false;\n        }\n        if (!wasAdded) {\n            // Add the ligand to reduced\n            // note this is not idempotent, but it is synchronized on reduced\n            logger.info(\"Adding ligand group {} {} by proximity\", g.getPDBName(), g.getResidueNumber().toPDB());\n            return StructureTools.addGroupToStructure(reduced, g, toModel, guess, false);\n        }\n        return guess;\n    }, // update to the new guess\n    (oldGuess, newGuess) -> newGuess);\n}","repo_id":"9","comment":"/**\n * Supplements the reduced structure with ligands from the full structure based on\n * a distance cutoff. Ligand groups are moved (destructively) from full to reduced\n * if they fall within the cutoff of any atom in the reduced structure.\n * @param full Structure containing all ligands\n * @param reduced Structure with a subset of the polymer groups from full\n * @param cutoff Distance cutoff (Ã…)\n * @param fromModel source model in full\n * @param toModel destination model in reduced\n * @see StructureTools#getLigandsByProximity(java.util.Collection, Atom[], double)\n */\n","repo_name":"biojava-master/","id":1615,"method_signature":"void copyLigandsByProximity(Structure, Structure, double, int, int)"}