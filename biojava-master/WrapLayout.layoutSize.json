{"callee_method_names":["Container.getTreeLock","Container.getSize","Container.getSize","Container.getParent","Container.getParent","Container.getSize","Container.getInsets","Container.getComponentCount","Container.getComponent","Component.isVisible","Component.getPreferredSize","Component.getMinimumSize","Container.isValid"],"method_name":"WrapLayout.layoutSize","method_implementation":"{\n    synchronized (target.getTreeLock()) {\n        //  Each row must fit with the width allocated to the containter.\n        //  When the container width = 0, the preferred width of the container\n        //  has not yet been calculated so lets ask for the maximum.\n        int targetWidth = target.getSize().width;\n        Container container = target;\n        while (container.getSize().width == 0 && container.getParent() != null) {\n            container = container.getParent();\n        }\n        targetWidth = container.getSize().width;\n        if (targetWidth == 0)\n            targetWidth = Integer.MAX_VALUE;\n        int hgap = getHgap();\n        int vgap = getVgap();\n        Insets insets = target.getInsets();\n        int horizontalInsetsAndGap = insets.left + insets.right + (hgap * 2);\n        int maxWidth = targetWidth - horizontalInsetsAndGap;\n        //  Fit components into the allowed width\n        Dimension dim = new Dimension(0, 0);\n        int rowWidth = 0;\n        int rowHeight = 0;\n        int nmembers = target.getComponentCount();\n        for (int i = 0; i < nmembers; i++) {\n            Component m = target.getComponent(i);\n            if (m.isVisible()) {\n                Dimension d = preferred ? m.getPreferredSize() : m.getMinimumSize();\n                //  Can't add the component to current row. Start a new row.\n                if (rowWidth + d.width > maxWidth) {\n                    addRow(dim, rowWidth, rowHeight);\n                    rowWidth = 0;\n                    rowHeight = 0;\n                }\n                //  Add a horizontal gap for all components after the first\n                if (rowWidth != 0) {\n                    rowWidth += hgap;\n                }\n                rowWidth += d.width;\n                rowHeight = Math.max(rowHeight, d.height);\n            }\n        }\n        addRow(dim, rowWidth, rowHeight);\n        dim.width += horizontalInsetsAndGap;\n        dim.height += insets.top + insets.bottom + vgap * 2;\n        //\tWhen using a scroll pane or the DecoratedLookAndFeel we need to\n        //  make sure the preferred size is less than the size of the\n        //  target containter so shrinking the container size works\n        //  correctly. Removing the horizontal gap is an easy way to do this.\n        Container scrollPane = SwingUtilities.getAncestorOfClass(JScrollPane.class, target);\n        if (scrollPane != null && target.isValid()) {\n            dim.width -= (hgap + 1);\n        }\n        return dim;\n    }\n}","repo_id":"9","comment":"/**\n * Returns the minimum or preferred dimension needed to layout the target\n * container.\n *\n * @param target target to get layout size for\n * @param preferred should preferred size be calculated\n * @return the dimension to layout the target container\n */\n","repo_name":"biojava-master/","id":3325,"method_signature":"Dimension layoutSize(Container, boolean)"}