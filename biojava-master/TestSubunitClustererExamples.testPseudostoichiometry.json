{"callee_method_ids":[1633,1623,1633,1627],"callee_method_names":["SubunitClustererParameters.setClustererMethod","SubunitClustererParameters.setSequenceIdentityThreshold","List<SubunitCluster>.size","List<SubunitCluster>.get","List<SubunitCluster>.get","List<SubunitCluster>.get","List<SubunitCluster>.get","SubunitClustererParameters.setClustererMethod","SubunitClustererParameters.setRMSDThreshold","List<SubunitCluster>.size","List<SubunitCluster>.get","List<SubunitCluster>.get"],"method_name":"TestSubunitClustererExamples.testPseudostoichiometry","method_implementation":"{\n    Structure s = StructureIO.getStructure(\"4HHB\");\n    SubunitClustererParameters params = new SubunitClustererParameters();\n    params.setClustererMethod(SubunitClustererMethod.SEQUENCE);\n    params.setSequenceIdentityThreshold(0.95);\n    List<SubunitCluster> clusters = SubunitClusterer.cluster(s, params).getClusters();\n    // We expect two SEQUENCE clusters with length 141 and 146\n    assertEquals(clusters.size(), 2);\n    assertEquals(clusters.get(0).length(), 141);\n    assertEquals(clusters.get(1).length(), 146);\n    assertEquals(clusters.get(0).getClustererMethod(), SubunitClustererMethod.SEQUENCE);\n    assertEquals(clusters.get(1).getClustererMethod(), SubunitClustererMethod.SEQUENCE);\n    params.setClustererMethod(SubunitClustererMethod.SEQUENCE_STRUCTURE);\n    params.setRMSDThreshold(3.0);\n    clusters = SubunitClusterer.cluster(s, params).getClusters();\n    // We expect a single STRUCTURE cluster with length 140\n    assertEquals(clusters.size(), 1);\n    assertEquals(clusters.get(0).length(), 140, 2);\n    assertEquals(clusters.get(0).getClustererMethod(), SubunitClustererMethod.STRUCTURE);\n}","repo_id":"9","comment":"/**\n * Test pseudostoichiometry: 4HHB\n */\n","repo_name":"biojava-master/","id":177,"method_signature":"void testPseudostoichiometry()"}