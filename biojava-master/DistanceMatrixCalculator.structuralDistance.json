{"callee_method_names":["DistanceMatrix.setValue","DistanceMatrix.setValue","DistanceMatrix.setValue"],"method_name":"DistanceMatrixCalculator.structuralDistance","method_implementation":"{\n    int n = rmsdMat.length;\n    DistanceMatrix DM = new BasicSymmetricalDistanceMatrix(n);\n    // Transform raw RMSD into distances and create matrix\n    for (int i = 0; i < n; i++) {\n        for (int j = i; j < n; j++) {\n            if (i == j)\n                DM.setValue(i, j, 0.0);\n            else {\n                double d = (rmsdMax * rmsdMax) / (alpha * alpha) * Math.log((rmsdMax * rmsdMax - rmsd0 * rmsd0) / (rmsdMax * rmsdMax - rmsdMat[i][j] * rmsdMat[i][j]));\n                d = Math.max(d, 0.0);\n                DM.setValue(i, j, d);\n                DM.setValue(j, i, d);\n            }\n        }\n    }\n    return DM;\n}","repo_id":"9","comment":"/**\n * The structural distance (d<sub>S<\/sub>) uses the structural similarity\n * (or dissimilarity) from a the structural alignment of two protein\n * strutures. It is based on the diffusive model for protein fold evolution\n * (Grishin 1995). The structural deviations are captured as RMS deviations.\n *\n * <pre>\n * d<sub>Sij<\/sub> = (rmsd<sub>max<\/sub><sup>2<\/sup> / alpha<sup>2<\/sup>) *\n *        ln( (rmsd<sub>max<\/sub><sup>2<\/sup> - rmsd<sub>0<\/sub><sup>2<\/sup>) /\n *        (rmsd<sub>max<\/sub><sup>2<\/sup> - (rmsd<sub>ij<\/sub><sup>2<\/sup>) )\n * <\/pre>\n *\n * @param rmsdMat\n *            RMSD matrix for all structure pairs (symmetric matrix)\n * @param alpha\n *            change in CA positions introduced by a single AA substitution\n *            (Grishin 1995: 1 A)\n * @param rmsdMax\n *            estimated RMSD between proteins of the same fold when the\n *            percentage of identity is infinitely low (the maximum allowed\n *            RMSD of proteins with the same fold). (Grishin 1995: 5 A)\n * @param rmsd0\n *            arithmetical mean of squares of the RMSD for identical\n *            proteins (Grishin 1995: 0.4 A)\n * @return DistanceMatrix\n */\n","repo_name":"biojava-master/","id":113,"method_signature":"DistanceMatrix structuralDistance(double[][], double, double, double)"}