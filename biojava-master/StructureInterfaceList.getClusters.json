{"callee_method_ids":[891,891,2583],"callee_method_names":["List<StructureInterface>.size","Logger.debug","List<StructureInterface>.size","List<StructureInterface>.size","List<StructureInterface>.size","List<StructureInterface>.size","List<StructureInterface>.size","List<StructureInterface>.get","List<StructureInterface>.get","StructureInterface.getContactOverlapScore","StructureInterface.getContactOverlapScore","Logger.debug","List<StructureInterface>.size","SingleLinkageClusterer.getClusters","Map<Integer, Set<Integer>>.keySet","Map<Integer, Set<Integer>>.get","List<StructureInterface>.add","List<StructureInterface>.get","StructureInterfaceCluster.setMembers","List<StructureInterface>.size","List<StructureInterface>.indexOf","List<StructureInterface>.get","List<StructureInterface>.size","List<StructureInterface>.indexOf","List<StructureInterface>.get","StructureInterfaceCluster.setAverageScore","List<StructureInterfaceCluster>.add","StructureInterfaceCluster.getMembers","StructureInterface.setCluster","Logger.debug","List<StructureInterface>.size","List<StructureInterfaceCluster>.size","List<StructureInterfaceCluster>.sort","StructureInterfaceCluster.setId"],"method_name":"StructureInterfaceList.getClusters","method_implementation":"{\n    if (clusters != null) {\n        return clusters;\n    }\n    clusters = new ArrayList<>();\n    // nothing to do if we have no interfaces\n    if (list.size() == 0)\n        return clusters;\n    logger.debug(\"Calculating all-vs-all Jaccard scores for {} interfaces\", list.size());\n    double[][] matrix = new double[list.size()][list.size()];\n    for (int i = 0; i < list.size(); i++) {\n        for (int j = i + 1; j < list.size(); j++) {\n            StructureInterface iInterf = list.get(i);\n            StructureInterface jInterf = list.get(j);\n            double scoreDirect = iInterf.getContactOverlapScore(jInterf, false);\n            double scoreInvert = iInterf.getContactOverlapScore(jInterf, true);\n            double maxScore = Math.max(scoreDirect, scoreInvert);\n            matrix[i][j] = maxScore;\n        }\n    }\n    logger.debug(\"Will now cluster {} interfaces based on full all-vs-all Jaccard scores matrix\", list.size());\n    SingleLinkageClusterer slc = new SingleLinkageClusterer(matrix, true);\n    Map<Integer, Set<Integer>> clusteredIndices = slc.getClusters(contactOverlapScoreClusterCutoff);\n    for (int clusterIdx : clusteredIndices.keySet()) {\n        List<StructureInterface> members = new ArrayList<>();\n        for (int idx : clusteredIndices.get(clusterIdx)) {\n            members.add(list.get(idx));\n        }\n        StructureInterfaceCluster cluster = new StructureInterfaceCluster();\n        cluster.setMembers(members);\n        double averageScore = 0.0;\n        int countPairs = 0;\n        for (int i = 0; i < members.size(); i++) {\n            int iIdx = list.indexOf(members.get(i));\n            for (int j = i + 1; j < members.size(); j++) {\n                averageScore += matrix[iIdx][list.indexOf(members.get(j))];\n                countPairs++;\n            }\n        }\n        if (countPairs > 0) {\n            averageScore = averageScore / countPairs;\n        } else {\n            // if only one interface in cluster we set the score to the maximum\n            averageScore = 1.0;\n        }\n        cluster.setAverageScore(averageScore);\n        clusters.add(cluster);\n    }\n    // finally we have to set the back-references in each StructureInterface\n    for (StructureInterfaceCluster cluster : clusters) {\n        for (StructureInterface interf : cluster.getMembers()) {\n            interf.setCluster(cluster);\n        }\n    }\n    logger.debug(\"Done clustering {} interfaces based on full all-vs-all Jaccard scores matrix. Found a total of {} clusters\", list.size(), clusters.size());\n    // now we sort by areas (descending) and assign ids based on that sorting\n    //note we invert so that sorting is descending\n    clusters.sort((o1, o2) -> Double.compare(o2.getTotalArea(), o1.getTotalArea()));\n    int id = 1;\n    for (StructureInterfaceCluster cluster : clusters) {\n        cluster.setId(id);\n        id++;\n    }\n    return clusters;\n}","repo_id":"9","comment":"/**\n * Calculate the interface clusters for this StructureInterfaceList\n * using Jaccard contact set scores to measure the similarity of interfaces.\n * Subsequent calls will use the cached value without recomputing the clusters.\n * The clusters will be assigned ids by sorting descending by {@link StructureInterfaceCluster#getTotalArea()}\n * @param contactOverlapScoreClusterCutoff the contact overlap score above which a pair will be\n * clustered\n * @return\n */\n","repo_name":"biojava-master/","id":911,"method_signature":"List<StructureInterfaceCluster> getClusters(double)"}