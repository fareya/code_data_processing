{"callee_method_ids":[1400],"callee_method_names":["PdbId.getId","String.length","String.substring","LinkedList<File>.add","LinkedList<File>.add","String.toLowerCase","File.exists","File.length","File.toPath"],"method_name":"LocalPDBDirectory.getLocalFile","method_implementation":"{\n    String id = pdbId.getId();\n    int offset = id.length() - 3;\n    // Search for existing files\n    // Search directories:\n    // 1) LOCAL_MMCIF_SPLIT_DIR/<middle>/(pdb)?<pdbId>.<ext>\n    // 2) LOCAL_MMCIF_ALL_DIR/<middle>/(pdb)?<pdbId>.<ext>\n    LinkedList<File> searchdirs = new LinkedList<File>();\n    String middle = id.substring(offset, offset + 2).toLowerCase();\n    File splitdir = new File(splitDirPath, middle);\n    searchdirs.add(splitdir);\n    // Search obsolete files if requested\n    if (getObsoleteBehavior() == ObsoleteBehavior.FETCH_OBSOLETE) {\n        File obsdir = new File(obsoleteDirPath, middle);\n        searchdirs.add(obsdir);\n    }\n    // valid prefixes before the <pdbId> in the filename\n    String[] prefixes = new String[] { \"\", \"pdb\" };\n    for (File searchdir : searchdirs) {\n        for (String prefix : prefixes) {\n            for (String ex : getExtensions()) {\n                File f = new File(searchdir, prefix + id.toLowerCase() + ex);\n                if (f.exists()) {\n                    // delete files that are too short to have contents\n                    if (f.length() < MIN_PDB_FILE_SIZE) {\n                        Files.delete(f.toPath());\n                        return null;\n                    }\n                    return f;\n                }\n            }\n        }\n    }\n    //Not found\n    return null;\n}","repo_id":"9","comment":"/**\n * Searches for previously downloaded files\n * @param pdbId\n * @return A file pointing to the existing file, or null if not found\n * @throws IOException If the file exists but is empty and can't be deleted\n */\n","repo_name":"biojava-master/","id":1141,"method_signature":"File getLocalFile(PdbId)"}