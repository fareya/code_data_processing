{"callee_method_names":["Map<SecStrucType, Integer>.put","Group.hasAminoAtoms","Group.getProperty","String.equals","Group.getChainId","Group.getResidueNumber","Map<SecStrucType, Integer>.get","List<SecStrucElement>.add","Map<SecStrucType, Integer>.put","Map<SecStrucType, Integer>.get","Group.getResidueNumber","Group.getChainId","Group.getResidueNumber","Group.getChainId"],"method_name":"SecStrucTools.getSecStrucElements","method_implementation":"{\n    List<SecStrucElement> listSSE = new ArrayList<>();\n    // SecStruc information - initialize\n    SecStrucType type = SecStrucType.coil;\n    ResidueNumber previous = new ResidueNumber();\n    ResidueNumber start = new ResidueNumber();\n    String chainId = \"\";\n    // counts the number of residues in SSE\n    int count = 0;\n    // Create a map for the IDs of the SSE in the structure\n    Map<SecStrucType, Integer> ids = new TreeMap<>();\n    for (SecStrucType t : SecStrucType.values()) ids.put(t, 1);\n    for (Group g : groups) {\n        if (g.hasAminoAtoms()) {\n            Object p = g.getProperty(Group.SEC_STRUC);\n            if (p == null)\n                continue;\n            SecStrucInfo ss = (SecStrucInfo) p;\n            if (count > 0) {\n                // If chain and type are equal increment counter\n                if (ss.type == type && chainId.equals(g.getChainId())) {\n                    previous = g.getResidueNumber();\n                    count++;\n                    continue;\n                } else {\n                    // Save the current SSE if chain or type change\n                    SecStrucElement sse = new SecStrucElement(type, start, previous, count, ids.get(type), chainId);\n                    listSSE.add(sse);\n                    ids.put(type, ids.get(type) + 1);\n                    count = 0;\n                    // Initialize a new SSE one\n                    if (ss.type != SecStrucType.coil) {\n                        type = ss.type;\n                        start = g.getResidueNumber();\n                        previous = start;\n                        chainId = g.getChainId();\n                        count = 1;\n                    }\n                }\n            } else {\n                // This is for the first residue only\n                if (ss.type != SecStrucType.coil) {\n                    type = ss.type;\n                    start = g.getResidueNumber();\n                    previous = start;\n                    chainId = g.getChainId();\n                    count = 1;\n                }\n            }\n        }\n    }\n    return listSSE;\n}","repo_id":"9","comment":"/**\n * Obtain the List of secondary structure elements (SecStrucElement) of a\n * List of Groups (assumed to be sequential, this is, connected in the\n * original Structure).\n *\n * @param groups\n *            Structure with SS assignments\n * @return List of SecStrucElement objects\n */\n","repo_name":"biojava-master/","id":1608,"method_signature":"List<SecStrucElement> getSecStrucElements(List)"}