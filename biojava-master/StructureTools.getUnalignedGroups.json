{"callee_method_names":["Atom[].getGroup","Group.getChain","Chain.getStructure","Set<Chain>.addAll","Structure.getChains","Atom.getGroup","Set<Group>.add","Group.getChain","Set<Chain>.add","Chain.getAtomGroups","Set<Group>.contains","List<Group>.add"],"method_name":"StructureTools.getUnalignedGroups","method_implementation":"{\n    Set<Chain> chains = new HashSet<>();\n    Set<Group> caGroups = new HashSet<>();\n    // Create list of all chains in this structure\n    Structure s = null;\n    if (ca.length > 0) {\n        Group g = ca[0].getGroup();\n        if (g != null) {\n            Chain c = g.getChain();\n            if (c != null) {\n                s = c.getStructure();\n            }\n        }\n    }\n    if (s != null) {\n        // Add all chains from the structure\n        chains.addAll(s.getChains(0));\n    }\n    // Add groups and chains from ca\n    for (Atom a : ca) {\n        Group g = a.getGroup();\n        if (g != null) {\n            caGroups.add(g);\n            Chain c = g.getChain();\n            if (c != null) {\n                chains.add(c);\n            }\n        }\n    }\n    // Iterate through all chains, finding groups not in ca\n    List<Group> unadded = new ArrayList<>();\n    for (Chain c : chains) {\n        for (Group g : c.getAtomGroups()) {\n            if (!caGroups.contains(g)) {\n                unadded.add(g);\n            }\n        }\n    }\n    return unadded;\n}","repo_id":"9","comment":"/**\n * List of groups from the structure not included in ca (e.g. ligands).\n *\n * Unaligned groups are searched from all chains referenced in ca, as well\n * as any chains in the first model of the structure from ca[0], if any.\n *\n * @param ca an array of atoms\n * @return\n */\n","repo_name":"biojava-master/","id":1022,"method_signature":"List<Group> getUnalignedGroups(Atom[])"}