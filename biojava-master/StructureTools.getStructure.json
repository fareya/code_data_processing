{"callee_method_ids":[1190,628],"callee_method_names":["File.exists","PDBFileParser.parsePDBFile","AtomCache.getStructure"],"method_name":"StructureTools.getStructure","method_implementation":"{\n    File f = new File(FileDownloadUtils.expandUserHome(name));\n    if (f.exists()) {\n        if (parser == null) {\n            parser = new PDBFileParser();\n        }\n        InputStream inStream = new FileInputStream(f);\n        return parser.parsePDBFile(inStream);\n    } else {\n        if (cache == null) {\n            cache = new AtomCache();\n        }\n        return cache.getStructure(name);\n    }\n}","repo_id":"9","comment":"/**\n * Flexibly get a structure from an input String. The intent of this method\n * is to allow any reasonable string which could refer to a structure to be\n * correctly parsed. The following are currently supported:\n * <ol>\n * <li>Filename (if name refers to an existing file)\n * <li>PDB ID\n * <li>SCOP domains\n * <li>PDP domains\n * <li>Residue ranges\n * <li>Other formats supported by AtomCache\n * <\/ol>\n *\n * @param name\n *            Some reference to the protein structure\n * @param parser\n *            A clean PDBFileParser to use if it is a file. If null, a\n *            PDBFileParser will be instantiated if needed.\n * @param cache\n *            An AtomCache to use if the structure can be fetched from the\n *            PDB. If null, a AtomCache will be instantiated if needed.\n * @return A Structure object\n * @throws IOException\n *             if name is an existing file, but doesn't parse correctly\n * @throws StructureException\n *             if the format is unknown, or if AtomCache throws an\n *             exception.\n */\n","repo_name":"biojava-master/","id":1058,"method_signature":"Structure getStructure(String, PDBFileParser, AtomCache)"}