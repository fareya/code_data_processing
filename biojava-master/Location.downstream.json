{"callee_method_names":[],"method_name":"Location.downstream","method_implementation":"{\n    if (length < 0) {\n        throw new IllegalArgumentException(\"Parameter must be >= 0; is=\" + length);\n    }\n    if (Math.signum(mEnd + length) == Math.signum(mEnd) || 0 == Math.signum(mEnd + length)) {\n        return new Location(mEnd, mEnd + length);\n    } else {\n        throw new IndexOutOfBoundsException(\"Specified length causes crossing of origin: \" + length + \"; \" + toString());\n    }\n}","repo_id":"9","comment":"/**\n * Return the adjacent location of specified length directly downstream of this location.\n *\n * @return The downstream location.\n * @param length The length of the downstream location.\n * @throws IndexOutOfBoundsException Specified length causes crossing of origin.\n */\n","repo_name":"biojava-master/","id":2410,"method_signature":"Location downstream(int)"}