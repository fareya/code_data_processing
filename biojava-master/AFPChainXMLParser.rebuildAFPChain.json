{"callee_method_ids":[502,487,488,490,481,490],"callee_method_names":["AFPChain.getAlgorithmName","AFPChain.setAlgorithmName","AFPChain.getVersion","AFPChain.setVersion","AFPChain.getBlockNum","AFPChain.getCa1Length","AFPChain.getCa2Length","AFPChain.getBlockResList","AFPChain.getOptLen","AFPChain.getPdbAln","AFPChain.getOptLen","Logger.warn","String.split","String.split","Logger.warn","AFPChain.setOptLen","AFPChain.setOptAln","AFPChain.setBlockResList"],"method_name":"AFPChainXMLParser.rebuildAFPChain","method_implementation":"{\n    if (afpChain.getAlgorithmName() == null) {\n        afpChain.setAlgorithmName(DEFAULT_ALGORITHM_NAME);\n    }\n    if (afpChain.getVersion() == null) {\n        afpChain.setVersion(\"1.0\");\n    }\n    int blockNum = afpChain.getBlockNum();\n    int ca1Length = afpChain.getCa1Length();\n    int ca2Length = afpChain.getCa2Length();\n    int minLength = Math.min(ca1Length, ca2Length);\n    int[][][] optAln = new int[blockNum][2][minLength];\n    int[][][] blockResList = afpChain.getBlockResList();\n    if (blockResList == null) {\n        blockResList = new int[blockNum][2][minLength];\n    }\n    int[] optLen = afpChain.getOptLen();\n    String[][][] pdbAln = afpChain.getPdbAln();\n    int[] verifiedOptLen = null;\n    if (optLen != null)\n        verifiedOptLen = afpChain.getOptLen().clone();\n    else {\n        logger.warn(\"did not find optimal alignment, building up empty alignment.\");\n        optLen = new int[1];\n        optLen[0] = 0;\n    }\n    for (int blockNr = 0; blockNr < blockNum; blockNr++) {\n        //System.out.println(\"got block \" + blockNr + \" size: \" + optLen[blockNr]);\n        int verifiedEQR = -1;\n        for (int eqrNr = 0; eqrNr < optLen[blockNr]; eqrNr++) {\n            String pdbResnum1 = pdbAln[blockNr][0][eqrNr];\n            String pdbResnum2 = pdbAln[blockNr][1][eqrNr];\n            //System.out.println(blockNr + \" \" + eqrNr + \" got resnum: \" + pdbResnum1 + \" \" + pdbResnum2);\n            String[] spl1 = pdbResnum1.split(\":\");\n            String[] spl2 = pdbResnum2.split(\":\");\n            String chain1 = spl1[0];\n            String pdbres1 = spl1[1];\n            String chain2 = spl2[0];\n            String pdbres2 = spl2[1];\n            int pos1 = getPositionForPDBresunm(pdbres1, chain1, ca1);\n            int pos2 = getPositionForPDBresunm(pdbres2, chain2, ca2);\n            if (pos1 == -1 || pos2 == -1) {\n                // this can happen when parsing old files that contained Calcium atoms...\n                logger.warn(\"pos1: {} (residue {}), pos2: {} (residue {}), should never be -1. Probably parsing an old file.\", pos1, pdbResnum1, pos2, pdbResnum2);\n                verifiedOptLen[blockNr]--;\n                continue;\n            }\n            verifiedEQR++;\n            //System.out.println(blockNr + \" \" + eqrNr + \" \" + pos1 + \" \" + pos2);\n            optAln[blockNr][0][verifiedEQR] = pos1;\n            optAln[blockNr][1][verifiedEQR] = pos2;\n            blockResList[blockNr][0][verifiedEQR] = pos1;\n            blockResList[blockNr][1][verifiedEQR] = pos2;\n        }\n    }\n    afpChain.setOptLen(verifiedOptLen);\n    afpChain.setOptAln(optAln);\n    afpChain.setBlockResList(blockResList);\n    // build up alignment image:\n    AFPAlignmentDisplay.getAlign(afpChain, ca1, ca2);\n}","repo_id":"9","comment":"/**\n *  replace the PDB res nums with atom positions:\n *\n * @param afpChain\n * @param ca1\n * @param ca2\n */\n","repo_name":"biojava-master/","id":523,"method_signature":"void rebuildAFPChain(AFPChain, Atom[], Atom[])"}