{"callee_method_names":["Logger.debug","Logger.debug","Logger.debug","Logger.debug","String.substring","String.substring","String.length","String.trim","ArrayList.contains","String.endsWith","ArrayList.contains","String.substring","String.length","Logger.info","String.replace","StringTokenizer.hasMoreTokens","StringTokenizer.nextToken","String.equals","ArrayList.contains","Logger.debug","Logger.debug","String.concat","Logger.debug","String.equals","ArrayList.contains","ArrayList.add"],"method_name":"PDBFileParser.pdb_COMPND_Handler","method_implementation":"{\n    logger.debug(\"previousContinuationField  is {}\", previousContinuationField);\n    logger.debug(\"current continuationField  is {}\", continuationField);\n    logger.debug(\"current continuationString is {}\", continuationString);\n    logger.debug(\"current compound           is {}\", current_compound);\n    // In legacy PDB files the line ends with the PDB code and a serial number, chop those off!\n    //format version 3.0 onwards will have 80 characters in a line\n    //\t\tif (line.length() > 72) {\n    if (isLegacyFormat) {\n        //                    if (DEBUG) {\n        //                        System.out.println(\"We have a legacy file - truncating line length to 71 characters:\");\n        //                        System.out.println(line);\n        //                    }\n        line = line.substring(0, 72);\n    }\n    line = line.substring(10, line.length());\n    String[] fieldList = line.trim().split(\"\\\\s+\");\n    int fl = fieldList.length;\n    if (fl > 0) {\n        String field0 = fieldList[0];\n        if (compndFieldValues.contains(field0)) {\n            continuationField = field0;\n            if (\"\".equals(previousContinuationField)) {\n                previousContinuationField = continuationField;\n            }\n        } else if (field0.endsWith(\";\") && compndFieldValues.contains(field0.substring(0, field0.length() - 1))) {\n            // the ':' character indicates the end of a field name and should be invalid as part the first data token\n            // e.g. obsolete file 1hhb has a malformed COMPND line that can only be caught with this kind of check\n            // UPDATE: There is no harm of having a ':' in the first data token. e.g. 3fdj contains a ':'.\n            //   The intended case occurs only if the token is a key followed by a colon and a semicolon without spaces, e.g. \"COMPND   2 MOLECULE:;\"\n            logger.info(\"COMPND line does not follow the PDB 3.0 format. Note that COMPND parsing is not supported any longer in format 2.3 or earlier\");\n            return;\n        }\n    } else {\n        // the line will be added as data to the previous field\n    }\n    line = line.replace(continuationField, \"\").trim();\n    StringTokenizer compndTokens = new StringTokenizer(line);\n    //\t\tSystem.out.println(\"PDBFileParser.pdb_COMPND_Handler: Tokenizing '\" + line + \"'\");\n    while (compndTokens.hasMoreTokens()) {\n        String token = compndTokens.nextToken();\n        if (\"\".equals(previousContinuationField)) {\n            previousContinuationField = continuationField;\n        }\n        if (previousContinuationField.equals(continuationField) && compndFieldValues.contains(continuationField)) {\n            logger.debug(\"Still in field {}\", continuationField);\n            logger.debug(\"token = {}\", token);\n            continuationString = continuationString.concat(token + \" \");\n            logger.debug(\"continuationString = {}\", continuationString);\n        }\n        if (!continuationField.equals(previousContinuationField)) {\n            if (\"\".equals(continuationString)) {\n                continuationString = token;\n            } else {\n                compndValueSetter(previousContinuationField, continuationString);\n                previousContinuationField = continuationField;\n                continuationString = token + \" \";\n            }\n        } else if (ignoreCompndFieldValues.contains(token)) {\n            // this field shall be ignored\n            //continuationField = token;\n        }\n    }\n    if (isLastCompndLine) {\n        // final line in the section - finish off the compound\n        //\t\t\tSystem.out.println(\"[pdb_COMPND_Handler] Final COMPND line - Finishing off final MolID header.\");\n        compndValueSetter(continuationField, continuationString);\n        continuationString = \"\";\n        if (current_compound != null)\n            entities.add(current_compound);\n    }\n}","repo_id":"9","comment":"/**\n * This should not be accessed directly, other than by <\/code>makeCompounds<\/code>. It still deals with the same\n * lines in a similar manner but if not accessed from <\/code>makeCompounds<\/code> the last element will be\n * missing. Don't say I didn't warn you.\n *\n * @param line\n */\n","repo_name":"biojava-master/","id":1171,"method_signature":"void pdb_COMPND_Handler(String)"}