{"callee_method_names":["ScopDatabase.getDomainByScopID","Logger.warn","Pattern.matcher","Matcher.matches","Matcher.group","Matcher.group","Matcher.group","ScopDatabase.getDomainsForPDB","Pattern.matcher","Matcher.matches","String.equals","Matcher.group","Matcher.group","Matcher.group","String.equals","Matcher.group","Matcher.group","List<ScopDomain>.add","List<ScopDomain>.iterator","Iterator<ScopDomain>.hasNext","Iterator<ScopDomain>.next","Logger.isWarnEnabled","StringBuilder.append","ScopDomain.getScopId","Iterator<ScopDomain>.hasNext","StringBuilder.append","Iterator<ScopDomain>.hasNext","StringBuilder.append","Iterator<ScopDomain>.next","StringBuilder.append","Logger.warn","StringBuilder.toString"],"method_name":"StructureName.guessScopDomain","method_implementation":"{\n    List<ScopDomain> matches = new LinkedList<ScopDomain>();\n    // Try exact match first\n    ScopDomain domain = scopDB.getDomainByScopID(name);\n    if (domain != null) {\n        return domain;\n    }\n    // Didn't work. Guess it!\n    logger.warn(\"Warning, could not find SCOP domain: \" + name);\n    Matcher scopMatch = scopPattern.matcher(name);\n    if (scopMatch.matches()) {\n        String pdbID = scopMatch.group(1);\n        String chainName = scopMatch.group(2);\n        String domainID = scopMatch.group(3);\n        for (ScopDomain potentialSCOP : scopDB.getDomainsForPDB(pdbID)) {\n            Matcher potMatch = scopPattern.matcher(potentialSCOP.getScopId());\n            if (potMatch.matches()) {\n                if (chainName.equals(potMatch.group(2)) || \"_\".equals(chainName) || \".\".equals(chainName) || \"_\".equals(potMatch.group(2)) || \".\".equals(potMatch.group(2))) {\n                    if (domainID.equals(potMatch.group(3)) || \"_\".equals(domainID) || \"_\".equals(potMatch.group(3))) {\n                        // Match, or near match\n                        matches.add(potentialSCOP);\n                    }\n                }\n            }\n        }\n    }\n    Iterator<ScopDomain> match = matches.iterator();\n    if (match.hasNext()) {\n        ScopDomain bestMatch = match.next();\n        if (logger.isWarnEnabled()) {\n            StringBuilder warnMsg = new StringBuilder();\n            warnMsg.append(\"Trying domain \" + bestMatch.getScopId() + \".\");\n            if (match.hasNext()) {\n                warnMsg.append(\" Other possibilities: \");\n                while (match.hasNext()) {\n                    warnMsg.append(match.next().getScopId()).append(\" \");\n                }\n            }\n            warnMsg.append(System.getProperty(\"line.separator\"));\n            logger.warn(warnMsg.toString());\n        }\n        return bestMatch;\n    } else {\n        return null;\n    }\n}","repo_id":"9","comment":"/**\n * <p>\n * Guess a scop domain. If an exact match is found, return that.\n *\n * <p>\n * Otherwise, return the first scop domain found for the specified protein such that\n * <ul>\n * <li>The chains match, or one of the chains is '_' or '.'.\n * <li>The domains match, or one of the domains is '_'.\n * <\/ul>\n *\n * In some cases there may be several valid matches. In this case a warning\n * will be logged.\n *\n * @param name SCOP domain name, or a guess thereof\n * @param scopDB SCOP domain provider\n * @return The best match for name among the domains of scopDB, or null if none match.\n */\n","repo_name":"biojava-master/","id":471,"method_signature":"ScopDomain guessScopDomain(String, ScopDatabase)"}