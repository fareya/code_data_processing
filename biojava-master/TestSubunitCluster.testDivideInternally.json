{"callee_method_ids":[1631,1627,1617,1661,1662,1663,1666,1666],"callee_method_names":["Structure.getChainByIndex","SubunitClustererParameters.setStructureCoverageThreshold","SubunitClustererParameters.setRMSDThreshold","SubunitClustererParameters.setMinimumSequenceLength","SubunitCluster.divideInternally","SubunitCluster.size","SubunitCluster.length","SubunitCluster.getAlignedAtomsSubunit","SubunitCluster.getAlignedAtomsSubunit"],"method_name":"TestSubunitCluster.testDivideInternally","method_implementation":"{\n    Structure s = StructureIO.getStructure(\"4e3e\");\n    // Create a SubunitCluster for the chain\n    SubunitCluster sc1 = new SubunitCluster(new Subunit(StructureTools.getRepresentativeAtomArray(s.getChainByIndex(0)), \"chain 0\", null, s));\n    SubunitClustererParameters clustererParameters = new SubunitClustererParameters();\n    clustererParameters.setStructureCoverageThreshold(0.8);\n    clustererParameters.setRMSDThreshold(3.0);\n    clustererParameters.setMinimumSequenceLength(20);\n    // Clusters should be merged by identity\n    boolean divided = sc1.divideInternally(clustererParameters);\n    // Divided has to be true, and Subunit length shorter than half\n    assertTrue(divided);\n    assertEquals(2, sc1.size());\n    assertTrue(sc1.length() < 178);\n    assertEquals(sc1.getAlignedAtomsSubunit(0).length, sc1.getAlignedAtomsSubunit(1).length);\n}","repo_id":"9","comment":"/**\n * Test {@link SubunitCluster#divideInternally(SubunitClustererParameters)}\n *\n * @throws StructureException\n * @throws IOException\n */\n","repo_name":"biojava-master/","id":2319,"method_signature":"void testDivideInternally()"}