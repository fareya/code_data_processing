{"callee_method_names":["String.split","Integer.equals","double[].getXGroup","Integer.equals","double[].getHGroup","Integer.equals","double[].getTGroup","Logger.warn","List<EcodDomain>.add"],"method_name":"EcodInstallation.filterByHierarchy","method_implementation":"{\n    String[] xhtGroup = hierarchy.split(\"\\\\.\");\n    Integer xGroup = xhtGroup.length > 0 ? Integer.parseInt(xhtGroup[0]) : null;\n    Integer hGroup = xhtGroup.length > 1 ? Integer.parseInt(xhtGroup[1]) : null;\n    Integer tGroup = xhtGroup.length > 2 ? Integer.parseInt(xhtGroup[2]) : null;\n    List<EcodDomain> filtered = new ArrayList<EcodDomain>();\n    for (EcodDomain d : getAllDomains()) {\n        boolean match = true;\n        if (xhtGroup.length > 0) {\n            match = match && xGroup.equals(d.getXGroup());\n        }\n        if (xhtGroup.length > 1) {\n            match = match && hGroup.equals(d.getHGroup());\n        }\n        if (xhtGroup.length > 2) {\n            match = match && tGroup.equals(d.getTGroup());\n        }\n        if (xhtGroup.length > 3) {\n            logger.warn(\"Ignoring unexpected additional parts of ECOD {}\", hierarchy);\n        }\n        if (match) {\n            filtered.add(d);\n        }\n    }\n    return filtered;\n}","repo_id":"9","comment":"/**\n * Get a list of domains within a particular level of the hierarchy\n * @param hierarchy A dot-separated list giving the X-group, H-group, and/or\n *  T-group (e.g. \"1.1\" for all members of the RIFT-related H-group)\n * @return\n * @throws IOException\n */\n","repo_name":"biojava-master/","id":1802,"method_signature":"List<EcodDomain> filterByHierarchy(String)"}