{"callee_method_names":["String.trim","String.replaceAll"],"method_name":"OperatorResolver.parseOperatorExpressionString","method_implementation":"{\n    String expression = operatorExpression.trim();\n    // remove single quotes, i.e. '(1-49)' in 1CGM\n    expression = expression.replaceAll(\"'\", \"\");\n    if (BioAssemblyTools.isUnaryExpression(expression)) {\n        unaryOperators = BioAssemblyTools.parseUnaryOperatorExpression(expression);\n    } else {\n        binaryOperators = BioAssemblyTools.parseBinaryOperatorExpression(expression);\n    }\n    //System.out.println(\"OperatorResolver: unary: \" + unaryOperators + \" | binary: \" + binaryOperators);\n}","repo_id":"9","comment":"/**\n * Parses the operator expression and save the operators as a list\n * of unary or binary operators (i.e. matrix multiplication, see below).\n * Operation expressions are given in a compact notation and specify\n * matrices from the operations list.\n * An operation expression can be a comma-separated list 1, 5, 9,\n * a dash-delimited range 1-60 or a matrix multiplication involving two\n * or more lists or ranges. For instance, (X0)(1-20) specifies the\n * portion of the X174 procapsid crystal asymmetric unit belonging to\n * the first independent virus particle and corresponds\n * to the 20 transformations [X0][1], [X0][2], ... , [X0][20].\n * See C. Lawson, Acta Cryst., D64, 874-882, 2008.\n *\n * @param operatorExpression the operator expression to be parsed\n */\n","repo_name":"biojava-master/","id":951,"method_signature":"void parseOperatorExpressionString(String)"}