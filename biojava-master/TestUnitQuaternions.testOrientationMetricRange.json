{"callee_method_names":[],"method_name":"TestUnitQuaternions.testOrientationMetricRange","method_implementation":"{\n    // no rotation quaternion\n    Quat4d qa = new Quat4d(0, 0, 0, 1);\n    Quat4d qb = new Quat4d(qa);\n    // Two equal quaternions produce the minimum score of 0\n    assertEquals(UnitQuaternions.orientationMetric(qa, qb), 0, 0.01);\n    // 90 degrees rotation over x\n    qa = new Quat4d(0.707, 0, 0, 0.707);\n    // 270 degrees rotation over x\n    qb = new Quat4d(0.707, 0, 0, -0.707);\n    // two quaternions with 180 degree axis produce the max score Pi / 2\n    assertEquals(UnitQuaternions.orientationMetric(qa, qb), Math.PI / 2, 0.01);\n    // 90 degrees rotation over y\n    qb = new Quat4d(0, 0.707, 0, 0.707);\n    // two quaternions with 90 degree axis produce the score Pi / 4\n    assertEquals(UnitQuaternions.orientationMetric(qa, qb), Math.PI / 3, 0.01);\n    // two quaternions with 45 degree axis produce the score Pi / 8\n    qb = new Quat4d(0.383, 0, 0, 0.924);\n    assertEquals(UnitQuaternions.orientationMetric(qa, qb), Math.PI / 8, 0.01);\n    // 90 degrees rotation over x in negative\n    qb = new Quat4d(0, -0.707, 0, -0.707);\n    // assert no negative angles are returned\n    assertEquals(UnitQuaternions.orientationMetric(qa, qb), Math.PI / 3, 0.01);\n}","repo_id":"9","comment":"/**\n * Test {@link UnitQuaternions#orientationMetric(Point3d[], Point3d[])}.\n * <p>\n * Tests the range of values of the metric with a perfect correlation,\n * perfect anticorrelation and intermediate values.\n */\n","repo_name":"biojava-master/","id":2311,"method_signature":"void testOrientationMetricRange()"}