{"callee_method_ids":[1318,1190],"callee_method_names":["FileParsingParameters.setHeaderOnly","Logger.info","PDBFileParser.setFileParsingParameters","PDBFileParser.parsePDBFile","Logger.info","Structure.getIdentifier","Logger.info","Logger.info","Structure.getIdentifier"],"method_name":"TestHeaderOnly.testSpeed2","method_implementation":"{\n    // Test the file parsing speed when the files are already downloaded.\n    InputStream cifStream = new GZIPInputStream(this.getClass().getResourceAsStream(\"/4hhb.cif.gz\"));\n    InputStream pdbStream = new GZIPInputStream(this.getClass().getResourceAsStream(\"/4hhb.pdb.gz\"));\n    assertNotNull(cifStream);\n    FileParsingParameters params = new FileParsingParameters();\n    // Flip this true/false to compare parsing speed.\n    params.setHeaderOnly(true);\n    logger.info(\"Testing PDB parsing speed\");\n    PDBFileParser pdbpars = new PDBFileParser();\n    pdbpars.setFileParsingParameters(params);\n    //pdbpars.setLoadChemCompInfo(true);\n    long start = System.nanoTime();\n    Structure s1 = pdbpars.parsePDBFile(pdbStream);\n    long stop = System.nanoTime();\n    double diff = (stop - start) / 1000000000.0;\n    logger.info(String.format(\"[%s] Elapsed time: %.3f s\", s1.getIdentifier(), diff));\n    logger.info(\"Testing mmCIF parsing speed\");\n    start = System.nanoTime();\n    Structure s2 = CifStructureConverter.fromInputStream(cifStream, params);\n    stop = System.nanoTime();\n    diff = (stop - start) / 1000000000.0;\n    logger.info(String.format(\"[%s] Elapsed time: %.3f s\", s2.getIdentifier(), diff));\n    /* Running from an SSD..\n\t\t * PDB .165s (all atom) -> 0.009s (only header)  95% faster.\n\t\t * mmCIF 0.323s (no header) -> 0.175s (only header) 45% faster.\n\t\t */\n}","repo_id":"9","comment":"// Test using local files.\n","repo_name":"biojava-master/","id":2278,"method_signature":"void testSpeed2()"}