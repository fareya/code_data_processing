{"callee_method_names":["QuatSymmetrySubunits.getSubunitCount","QuatSymmetrySubunits.getFolds","List<Integer>.size","List<Double>.add"],"method_name":"RotationSolver.getAngles","method_implementation":"{\n    int n = subunits.getSubunitCount();\n    // for spherical symmetric cases, n cannot be higher than 60\n    if (n % 60 == 0 && isSpherical()) {\n        n = 60;\n    }\n    List<Integer> folds = subunits.getFolds();\n    List<Double> angles = new ArrayList<Double>(folds.size() - 1);\n    // note this loop starts at 1, we do ignore 1-fold symmetry, which is the first entry\n    for (int fold : folds) {\n        if (fold > 0 && fold <= n) {\n            angles.add(2 * Math.PI / fold);\n        }\n    }\n    return angles;\n}","repo_id":"9","comment":"/**\n * Get valid rotation angles given the number of subunits\n * @return The rotation angle corresponding to each fold of {@link Subunits#getFolds()}\n */\n","repo_name":"biojava-master/","id":1902,"method_signature":"List<Double> getAngles()"}