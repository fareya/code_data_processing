{"callee_method_names":["Path.getEnd","Point.getPosition","List<Location>.get","List<Location>.size","Point.getPosition","Point.isUnknown","Point.isUncertain"],"method_name":"LocationHelper.detectEnd","method_implementation":"{\n    int end = 0;\n    Point lastPoint = null;\n    if (isCircular) {\n        for (Location sub : subLocations) {\n            lastPoint = sub.getEnd();\n            end += lastPoint.getPosition();\n        }\n    } else {\n        lastPoint = subLocations.get(subLocations.size() - 1).getEnd();\n        end = lastPoint.getPosition();\n    }\n    return new SimplePoint(end, lastPoint.isUnknown(), lastPoint.isUncertain());\n}","repo_id":"9","comment":"/**\n * This will attempt to find what the last point is and returns that\n * position. If the location is circular this will return the total length\n * of the location and does not mean the maximum point on the Sequence\n * we may find the locations on\n */\n","repo_name":"biojava-master/","id":3055,"method_signature":"Point detectEnd(List, boolean)"}