{"callee_method_names":["BufferedReader.readLine","BufferedReader.readLine","String.trim","String.length","String.startsWith","String.startsWith","String.substring","String.startsWith","String.substring","OntologyFactory.createOntology","StringTokenizer.nextToken","StringTokenizer.nextToken","StringTokenizer.nextToken"],"method_name":"TabDelimParser.parse","method_implementation":"{\n    String name = \"\";\n    String description = \"\";\n    Ontology onto = null;\n    for (String line = in.readLine(); line != null; line = in.readLine()) {\n        line = line.trim();\n        if (line.length() > 0) {\n            if (line.startsWith(\"#\")) {\n                // comment line - let's try to pull out name or description\n                if (line.startsWith(\"#name:\")) {\n                    name = line.substring(\"#name:\".length()).trim();\n                } else if (line.startsWith(\"#description:\")) {\n                    description = line.substring(\"#description:\".length()).trim();\n                }\n            } else {\n                try {\n                    // make sure we have an ontology\n                    if (onto == null) {\n                        onto = of.createOntology(name, description);\n                    }\n                    // build a tripple\n                    /*\n\n\t\t\t\t\t\tint t1 = line.indexOf(\"\\t\");\n\t\t\t\t\t\tint t2 = line.indexOf(\"\\t\", t1 + 1);\n\n\t\t\t\t\t\tString subject  = line.substring(0, t1);\n\t\t\t\t\t\tString predicate = line.substring(t1 + 1, t2);\n\t\t\t\t\t\tString object   = line.substring(t2 + 1);\n\n\t\t\t\t\t\t*/\n                    StringTokenizer toke = new StringTokenizer(line);\n                    String subject = toke.nextToken();\n                    String predicate = toke.nextToken();\n                    String object = toke.nextToken();\n                    Term subT = resolveTerm(subject, onto);\n                    Term objT = resolveTerm(object, onto);\n                    Term relT = resolveTerm(predicate, onto);\n                    Triple trip = resolveTriple(subT, objT, relT, onto);\n                    // prevent unused field error\n                    trip = trip == null ? null : trip;\n                } catch (StringIndexOutOfBoundsException e) {\n                    throw new IOException(\"Could not parse line: \" + line);\n                }\n            }\n        }\n    }\n    return onto;\n}","repo_id":"9","comment":"/**\n * Parse an ontology from a reader.\n * The reader will be emptied of text. It is the caller's responsibility to\n * close the reader.\n *\n * @param in  the BufferedReader to read from\n * @param of  an OntologyFactory used to create the Ontology instance\n * @return  a new Ontology\n * @throws IOException if there is some problem with the buffered reader\n * @throws OntologyException if it was not possible to instantiate a new\n *         ontology\n */\n","repo_name":"biojava-master/","id":329,"method_signature":"Ontology parse(BufferedReader, OntologyFactory)"}